package org.bedepay.uniqueboss.boss;

import org.bukkit.*;
import org.bukkit.attribute.Attribute;
import org.bukkit.boss.BarColor;
import org.bukkit.boss.BarStyle;
import org.bukkit.boss.BossBar;
import org.bukkit.entity.*;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitTask;
import org.bukkit.util.Vector;
import org.bukkit.plugin.Plugin;
import org.bukkit.Bukkit;
import org.bukkit.enchantments.Enchantment;
import org.bedepay.uniqueboss.config.ConfigManager;

import java.util.*;

public class UniqueBossEntity {
    
    private final Location spawnLocation;
    private Wither bossEntity;
    private int currentPhase = 1;
    private int tickCounter = 0;
    private boolean isAlive = true;
    private final Random random = new Random();
    private BossBar bossBar;
    private final ConfigManager config;
    
    // –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    private final List<BukkitTask> activeTasks = new ArrayList<>();
    
    // –î–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–æ—Å—Å–∞ —á–µ—Ä–µ–∑ PDC
    private static final org.bukkit.NamespacedKey BOSS_KEY = new org.bukkit.NamespacedKey(
        org.bukkit.Bukkit.getPluginManager().getPlugin("UniqueBoss"), "unique_boss");
    private static final org.bukkit.NamespacedKey BOSS_SPAWN_LOCATION_KEY = new org.bukkit.NamespacedKey(
        org.bukkit.Bukkit.getPluginManager().getPlugin("UniqueBoss"), "boss_spawn_location");
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
    private double lastKnownHealth;
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–π –≤ —á–∞—Ç
    private long lastTauntTime = 0;
    private String lastAttacker = null;
    private boolean lowHealthTauntSent = false;
    
    public UniqueBossEntity(Location location, ConfigManager config) {
        this.spawnLocation = location.clone();
        this.config = config;
        this.lastKnownHealth = config.getPhase1Health();
    }
    
    public void spawn() {
        if (spawnLocation.getWorld() == null) return;
        
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        plugin.getLogger().info("üåü –°–ø–∞–≤–Ω –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è...");
        plugin.getLogger().info("üìç –õ–æ–∫–∞—Ü–∏—è: " + spawnLocation.getBlockX() + ", " + 
            spawnLocation.getBlockY() + ", " + spawnLocation.getBlockZ() + " –≤ –º–∏—Ä–µ " + spawnLocation.getWorld().getName());
        
        // –°–ò–°–¢–ï–ú–ê –°–õ–û–ñ–ù–û–°–¢–ò: –õ–æ–≥–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        plugin.getLogger().info("‚öîÔ∏è –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: " + config.getDifficultyLevel() + " (" + config.getDifficultyName() + ")");
        plugin.getLogger().info("üí™ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã: –ó–¥–æ—Ä–æ–≤—å–µ x" + config.getDifficultyHealthMultiplier() + 
            ", –°–∫–æ—Ä–æ—Å—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π x" + config.getDifficultyAbilitiesSpeedMultiplier() + 
            ", –î—Ä–æ–ø x" + config.getDifficultyDropsMultiplier());
        
        if (config.isBossLifecycleLoggingEnabled()) {
            plugin.getLogger().info("üîß DEBUG: –ù–∞—á–∏–Ω–∞–µ–º —Å–ø–∞–≤–Ω –±–æ—Å—Å–∞...");
            plugin.getLogger().info("   –õ–æ–∫–∞—Ü–∏—è: " + spawnLocation);
            plugin.getLogger().info("   –ú–∏—Ä: " + spawnLocation.getWorld().getName());
            plugin.getLogger().info("   –ß–∞–Ω–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: " + spawnLocation.getChunk().isLoaded());
        }
        
        // –°–æ–∑–¥–∞–µ–º Wither –∫–∞–∫ –æ—Å–Ω–æ–≤—É –±–æ—Å—Å–∞
        try {
            bossEntity = (Wither) spawnLocation.getWorld().spawnEntity(spawnLocation, EntityType.WITHER);
            
            if (config.isBossLifecycleLoggingEnabled()) {
                plugin.getLogger().info("‚úÖ DEBUG: –°—É—â–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:");
                plugin.getLogger().info("   Entity ID: " + bossEntity.getEntityId());
                plugin.getLogger().info("   UUID: " + bossEntity.getUniqueId());
                plugin.getLogger().info("   isValid: " + bossEntity.isValid());
                plugin.getLogger().info("   isDead: " + bossEntity.isDead());
                plugin.getLogger().info("   –ó–¥–æ—Ä–æ–≤—å–µ: " + bossEntity.getHealth());
                plugin.getLogger().info("   –õ–æ–∫–∞—Ü–∏—è: " + bossEntity.getLocation());
                plugin.getLogger().info("   –ú–∏—Ä: " + bossEntity.getWorld().getName());
            }
            
        } catch (Exception e) {
            plugin.getLogger().severe("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –±–æ—Å—Å–∞!");
            e.printStackTrace();
            return;
        }
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PDC –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –±–æ—Å—Å
        try {
            org.bedepay.uniqueboss.listeners.BossChunkListener.markAsUniqueBoss(bossEntity, spawnLocation);
            
            if (config.isPdcOperationsLoggingEnabled()) {
                plugin.getLogger().info("‚úÖ DEBUG: PDC –º–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –±–æ—Å—Å–∞ " + bossEntity.getEntityId());
            }
            
            // –ù–û–í–û–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞–Ω–∫ –±–æ—Å—Å–∞
            org.bukkit.Chunk bossChunk = spawnLocation.getChunk();
            if (!bossChunk.isLoaded()) {
                bossChunk.load(true);
                plugin.getLogger().info("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —á–∞–Ω–∫ –±–æ—Å—Å–∞ –ø—Ä–∏ —Å–ø–∞–≤–Ω–µ: [" + 
                    bossChunk.getX() + ", " + bossChunk.getZ() + "]");
            }
            if (!bossChunk.isForceLoaded()) {
                bossChunk.setForceLoaded(true);
                plugin.getLogger().info("üîß –£—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–∞–Ω–∫–∞ –±–æ—Å—Å–∞ –ø—Ä–∏ —Å–ø–∞–≤–Ω–µ: [" + 
                    bossChunk.getX() + ", " + bossChunk.getZ() + "]");
            }
            
        } catch (Exception e) {
            plugin.getLogger().severe("üí• –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PDC –º–µ—Ç–∫–∏!");
            e.printStackTrace();
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Å—Å–∞
        try {
            setupBoss();
            
            if (config.isBossLifecycleLoggingEnabled()) {
                plugin.getLogger().info("‚úÖ DEBUG: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:");
                plugin.getLogger().info("   isValid –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: " + bossEntity.isValid());
                plugin.getLogger().info("   isDead –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: " + bossEntity.isDead());
                plugin.getLogger().info("   –ó–¥–æ—Ä–æ–≤—å–µ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: " + bossEntity.getHealth());
                plugin.getLogger().info("   –≠—Ñ—Ñ–µ–∫—Ç—ã: " + bossEntity.getActivePotionEffects().size());
            }
            
        } catch (Exception e) {
            plugin.getLogger().severe("üí• –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Å—Å–∞!");
            e.printStackTrace();
        }
        
        // –°–æ–∑–¥–∞–µ–º –±ossbar
        try {
            createBossBar();
            
            if (config.isBossLifecycleLoggingEnabled()) {
                plugin.getLogger().info("‚úÖ DEBUG: BossBar —Å–æ–∑–¥–∞–Ω");
            }
            
        } catch (Exception e) {
            plugin.getLogger().severe("üí• –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å BossBar!");
            e.printStackTrace();
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Å—Å–∞
        try {
            if (config.isBossLifecycleLoggingEnabled()) {
                plugin.getLogger().info("üîÑ DEBUG: –ó–∞–ø—É—Å–∫–∞–µ–º AI –±–æ—Å—Å–∞...");
                plugin.getLogger().info("   isValid –ø–µ—Ä–µ–¥ AI: " + bossEntity.isValid());
                plugin.getLogger().info("   isDead –ø–µ—Ä–µ–¥ AI: " + bossEntity.isDead());
            }
            
            startBossAI();
            
        } catch (Exception e) {
            plugin.getLogger().severe("üí• –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å AI –±–æ—Å—Å–∞!");
            e.printStackTrace();
        }
        
        // –ó–≤—É–∫–æ–≤—ã–µ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ—è–≤–ª–µ–Ω–∏—è
        try {
            spawnEffects();
            
            if (config.isBossLifecycleLoggingEnabled()) {
                plugin.getLogger().info("‚úÖ DEBUG: –≠—Ñ—Ñ–µ–∫—Ç—ã —Å–ø–∞–≤–Ω–∞ –∑–∞–ø—É—â–µ–Ω—ã");
            }
            
        } catch (Exception e) {
            plugin.getLogger().severe("üí• –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–ø–∞–≤–Ω–∞!");
            e.printStackTrace();
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        try {
            startAmbientEffects();
            
            if (config.isBossLifecycleLoggingEnabled()) {
                plugin.getLogger().info("‚úÖ DEBUG: –ê–º–±–∏–µ–Ω—Ç–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã");
            }
            
        } catch (Exception e) {
            plugin.getLogger().severe("üí• –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–º–±–∏–µ–Ω—Ç–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã!");
            e.printStackTrace();
        }
        
        if (config.isBossLifecycleLoggingEnabled()) {
            plugin.getLogger().info("üéâ DEBUG: –°–ø–∞–≤–Ω –±–æ—Å—Å–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω:");
            plugin.getLogger().info("   Entity ID: " + bossEntity.getEntityId());
            plugin.getLogger().info("   isValid: " + bossEntity.isValid());
            plugin.getLogger().info("   isDead: " + bossEntity.isDead());
            plugin.getLogger().info("   –ó–¥–æ—Ä–æ–≤—å–µ: " + bossEntity.getHealth());
            plugin.getLogger().info("   isAlive —Ñ–ª–∞–≥: " + isAlive);
        }
        
        plugin.getLogger().info("‚úÖ –ë–æ—Å—Å —Å–æ–∑–¥–∞–Ω —Å PDC –º–µ—Ç–∫–æ–π –≤ —á–∞–Ω–∫–µ [" + 
            spawnLocation.getChunk().getX() + ", " + spawnLocation.getChunk().getZ() + "] - " +
            "—á–∞–Ω–∫ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ");
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
        for (Player player : Bukkit.getOnlinePlayers()) {
            if (player.getWorld().equals(spawnLocation.getWorld())) {
                // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–∞–≤–Ω–∞
                player.sendTitle(config.getBossSpawnTitle(), config.getBossSpawnSubtitle(), 20, 80, 20);
                
                // –ù–û–í–û–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Å—Å–∞
                String difficultyMsg = config.getMessage("boss.difficulty_announcement")
                    .replace("%level%", String.valueOf(config.getDifficultyLevel()))
                    .replace("%name%", config.getDifficultyName());
                    
                String modifiersMsg = config.getMessage("boss.difficulty_modifiers")
                    .replace("%health%", String.format("%.1f", config.getDifficultyHealthMultiplier()))
                    .replace("%damage%", String.format("%.1f", config.getDifficultyDamageMultiplier()))
                    .replace("%minions%", String.format("%.1f", config.getDifficultyMinionsCountMultiplier()));
                
                player.sendMessage(difficultyMsg);
                player.sendMessage(modifiersMsg);
            }
        }
    }
    

    
    private void setupBoss() {
        bossEntity.setCustomName(ChatColor.DARK_RED + "‚ö° –¢–ï–ú–ù–´–ô –ü–û–í–ï–õ–ò–¢–ï–õ–¨ ‚ö°");
        bossEntity.setCustomNameVisible(true);
        bossEntity.getAttribute(Attribute.GENERIC_MAX_HEALTH).setBaseValue(config.getPhase1Health());
        bossEntity.setHealth(config.getPhase1Health());
        bossEntity.setRemoveWhenFarAway(false);
        
        // –û–¢–ö–õ–Æ–ß–ê–ï–ú —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–æ—Å—Å–±–∞—Ä Wither
        if (bossEntity.getBossBar() != null) {
            bossEntity.getBossBar().removeAll();
            bossEntity.getBossBar().setVisible(false);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã (–ë–ï–ó –†–ï–ì–ï–ù–ï–†–ê–¶–ò–ò!)
        bossEntity.addPotionEffect(new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, Integer.MAX_VALUE, 1));
        bossEntity.addPotionEffect(new PotionEffect(PotionEffectType.FIRE_RESISTANCE, Integer.MAX_VALUE, 0));
        bossEntity.addPotionEffect(new PotionEffect(PotionEffectType.GLOWING, Integer.MAX_VALUE, 0)); // –°–≤–µ—Ç–∏—Ç—Å—è
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —Å–∞–º–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–±–æ—Å—Ç—å —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        bossEntity.addPotionEffect(new PotionEffect(PotionEffectType.WEAKNESS, Integer.MAX_VALUE, 0, true, false));
        
        // –¢–∞–∫–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è Wither —á—Ç–æ–±—ã –æ–Ω –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª—Å—è
        bossEntity.setInvulnerable(false); // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ–Ω –Ω–µ –Ω–µ—É—è–∑–≤–∏–º
    }
    
    private void createBossBar() {
        bossBar = Bukkit.createBossBar(
            ChatColor.DARK_RED + "‚ö° –¢–ï–ú–ù–´–ô –ü–û–í–ï–õ–ò–¢–ï–õ–¨ ‚ö°",
            BarColor.RED,
            BarStyle.SEGMENTED_10
        );
        bossBar.setProgress(1.0);
    }
    
    private void updateBossBarPlayers() {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        bossBar.removeAll();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –±–ª–∏–∂–∞–π—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ (–≤ —Ä–∞–¥–∏—É—Å–µ 50 –±–ª–æ–∫–æ–≤) - –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –∏–≥—Ä—ã!
        List<Player> nearbyPlayers = getNearbyPlayersForBossBar(50);
        for (Player player : nearbyPlayers) {
            bossBar.addPlayer(player);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –±–æ—Å—Å–±–∞—Ä–∞ 
     * –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∫–æ–Ω—Ñ–∏–≥–∞: show_bossbar_all_modes
     */
    private List<Player> getNearbyPlayersForBossBar(double radius) {
        List<Player> nearbyPlayers = new ArrayList<>();
        for (Entity entity : bossEntity.getNearbyEntities(radius, radius, radius)) {
            if (entity instanceof Player) {
                Player player = (Player) entity;
                
                // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ø–µ–∫—Ç–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞)
                if (player.getGameMode() == org.bukkit.GameMode.SPECTATOR && !config.shouldAttackSpectators()) {
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞)
                }
                
                // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (vanish –ø–ª–∞–≥–∏–Ω—ã)
                if (config.shouldIgnoreVanished() && !player.getCanPickupItems() && player.isInvisible()) {
                    continue; // –í–æ–∑–º–æ–∂–Ω–æ –∏–≥—Ä–æ–∫ –≤ vanish
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–∫–∞–∑–∞ –±–æ—Å—Å–±–∞—Ä–∞ –≤—Å–µ–º —Ä–µ–∂–∏–º–∞–º
                if (!config.shouldShowBossBarAllModes()) {
                    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Survival –∏ Adventure
                    if (player.getGameMode() != org.bukkit.GameMode.SURVIVAL && 
                        player.getGameMode() != org.bukkit.GameMode.ADVENTURE) {
                        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Creative –∏ –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–º (–∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤—ã—à–µ)
                nearbyPlayers.add(player);
            }
        }
        return nearbyPlayers;
    }
    
    private void startAmbientEffects() {
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        
        BukkitTask ambientTask = new BukkitRunnable() {
            private int ambientTick = 0;
            
            @Override
            public void run() {
                if (bossEntity == null || !bossEntity.isValid() || bossEntity.isDead()) {
                    cancel(); // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –±–æ—Å—Å –º–µ—Ä—Ç–≤
                    return;
                }
                
                ambientTick++;
                
                // –¢–µ–º–Ω—ã–µ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–ª—å—Ü–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                if (ambientTick % 60 == 0) {
                    createDarkEnergyCircle(bossEntity.getLocation());
                }
                
                // –°–ª—É—á–∞–π–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                if (ambientTick % 20 == 0) {
                    Location bossLoc = bossEntity.getLocation();
                    World world = bossEntity.getWorld();
                    
                    double multiplier = config.getParticlesMultiplier();
                    
                    // –¢–µ–º–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –≤–æ–∫—Ä—É–≥ –±–æ—Å—Å–∞
                    world.spawnParticle(Particle.SPELL_WITCH, 
                        bossLoc.clone().add(random.nextGaussian() * 3, random.nextGaussian() * 3, random.nextGaussian() * 3), 
                        (int)(3 * multiplier), 0.5, 0.5, 0.5, 0.02);
                    
                    // –°–ª—É—á–∞–π–Ω—ã–π –∑–ª–æ–≤–µ—â–∏–π –∑–≤—É–∫ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                    if (ambientTick % 200 == 0 && random.nextInt(100) < 30) {
                        Sound[] evilSounds = {
                            Sound.ENTITY_WITHER_AMBIENT,
                            Sound.ENTITY_ENDERMAN_STARE,
                            Sound.AMBIENT_CAVE
                        };
                        Sound randomSound = evilSounds[random.nextInt(evilSounds.length)];
                        world.playSound(bossLoc, randomSound, 0.8f, 0.7f + random.nextFloat() * 0.6f);
                    }
                    
                    // –ö—Ä–∞—Å–Ω—ã–µ –≥–ª–∞–∑–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    if (ambientTick % 100 == 0) {
                        world.spawnParticle(Particle.REDSTONE, 
                            bossLoc.clone().add(0, 2.5, 0), 
                            (int)(8 * multiplier), 0.3, 0.1, 0.3, 
                            new Particle.DustOptions(org.bukkit.Color.RED, 1.5f));
                    }
                }
            }
        }.runTaskTimer(plugin, 0L, 1L);
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        registerTask(ambientTask);
    }
    
    private void createDarkEnergyCircle(Location center) {
        World world = center.getWorld();
        double radius = 3.0;
        int points = 16;
        
        for (int i = 0; i < points; i++) {
            double angle = 2 * Math.PI * i / points;
            double x = center.getX() + radius * Math.cos(angle);
            double z = center.getZ() + radius * Math.sin(angle);
            Location particleLoc = new Location(world, x, center.getY() + 0.5, z);
            
            world.spawnParticle(Particle.SPELL_WITCH, particleLoc, 1, 0, 0, 0, 0);
        }
    }
    
    private void spawnEffects() {
        World world = spawnLocation.getWorld();
        
        // –≠–ü–ò–ß–ï–°–ö–ò–ï —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ—è–≤–ª–µ–Ω–∏—è
        
        // –ú–æ—â–Ω—ã–µ –≤–∑—Ä—ã–≤—ã –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤
        for (int i = 0; i < 3; i++) {
            new BukkitRunnable() {
                @Override
                public void run() {
                    world.createExplosion(spawnLocation.clone().add(
                        random.nextDouble() * 4 - 2, 
                        random.nextDouble() * 2, 
                        random.nextDouble() * 4 - 2
                    ), 4.0f, false, false);
                }
            }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), i * 10L);
        }
        
        // –ó–≤—É–∫–æ–≤–∞—è —Å–∏–º—Ñ–æ–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        world.playSound(spawnLocation, Sound.ENTITY_WITHER_SPAWN, 2.0f, 0.5f);
        world.playSound(spawnLocation, Sound.ENTITY_LIGHTNING_BOLT_THUNDER, 2.0f, 0.8f);
        world.playSound(spawnLocation, Sound.ENTITY_ENDER_DRAGON_GROWL, 1.5f, 0.3f);
        world.playSound(spawnLocation, Sound.AMBIENT_CAVE, 1.0f, 0.5f);
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã —á–∞—Å—Ç–∏—Ü (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
        double multiplier = config.getParticlesMultiplier();
        world.spawnParticle(Particle.EXPLOSION_LARGE, spawnLocation, (int)(8 * multiplier), 2, 2, 2, 0.1);
        world.spawnParticle(Particle.SMOKE_LARGE, spawnLocation, (int)(30 * multiplier), 3, 3, 3, 0.1);
        world.spawnParticle(Particle.SPELL_WITCH, spawnLocation, (int)(20 * multiplier), 4, 4, 4, 0.2);
        world.spawnParticle(Particle.REDSTONE, spawnLocation, (int)(25 * multiplier), 3, 3, 3, 
            new Particle.DustOptions(org.bukkit.Color.MAROON, 2.0f));
        
        // –ú–æ–ª–Ω–∏–∏ –≤–æ–∫—Ä—É–≥ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –ø–æ—Ä—è–¥–∫–µ
        for (int i = 0; i < 8; i++) {
            double angle = 2 * Math.PI * i / 8;
            Location lightningLoc = spawnLocation.clone().add(
                Math.cos(angle) * 8,
                0,
                Math.sin(angle) * 8
            );
            
            new BukkitRunnable() {
                @Override
                public void run() {
                    world.strikeLightningEffect(lightningLoc);
                    world.spawnParticle(Particle.ELECTRIC_SPARK, lightningLoc, 
                        (int)(20 * multiplier), 1, 2, 1, 0.1);
                }
            }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), i * 5L);
        }
        
        // –¢–µ–º–Ω–∞—è –≤–æ–ª–Ω–∞ —Ä–∞—Å—Ö–æ–¥–∏—Ç—Å—è –æ—Ç –±–æ—Å—Å–∞
        createDarkWave(spawnLocation, 15.0);
        
        // –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–º –∏–≥—Ä–æ–∫–∞–º
        List<Player> nearbyPlayers = getNearbyPlayers(100);
        for (Player player : nearbyPlayers) {
            player.sendTitle(ChatColor.DARK_RED + "üíÄ –ë–û–°–° –ü–û–Ø–í–ò–õ–°–Ø! üíÄ", 
                ChatColor.RED + "–¢–µ–º–Ω—ã–π –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ø—Ä–æ–±—É–¥–∏–ª—Å—è!", 20, 60, 20);
            
            // –≠—Ñ—Ñ–µ–∫—Ç —Ç—Ä—è—Å–∫–∏ —ç–∫—Ä–∞–Ω–∞
            player.playSound(player.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1.0f, 0.5f);
        }
    }
    
    private void createDarkWave(Location center, double maxRadius) {
        World world = center.getWorld();
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        double multiplier = config.getParticlesMultiplier();
        
        new BukkitRunnable() {
            double radius = 0;
            
            @Override
            public void run() {
                if (radius > maxRadius) {
                    this.cancel();
                    return;
                }
                
                int points = (int) (radius * 4 * multiplier); // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
                for (int i = 0; i < points; i++) {
                    double angle = 2 * Math.PI * i / points;
                    double x = center.getX() + radius * Math.cos(angle);
                    double z = center.getZ() + radius * Math.sin(angle);
                    Location particleLoc = new Location(world, x, center.getY() + 0.2, z);
                    
                    world.spawnParticle(Particle.SMOKE_LARGE, particleLoc, 1, 0, 0, 0, 0.02);
                    world.spawnParticle(Particle.REDSTONE, particleLoc, 1, 0, 0, 0, 
                        new Particle.DustOptions(org.bukkit.Color.BLACK, 1.0f));
                }
                
                radius += 0.5;
            }
        }.runTaskTimer(plugin, 0L, 1L);
    }
    
    private void startBossAI() {
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        
        // –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Å—Å–∞ (–∫–∞–∂–¥—ã–π —Ç–∏–∫)
        BukkitTask mainAiTask = new BukkitRunnable() {
            private int debugTick = 0;
            
            @Override
            public void run() {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–∏–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Å—Å–∞
                tickCounter++;
                debugTick++;
                
                // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑ –≤ 20 —Ç–∏–∫–æ–≤ (1 —Å–µ–∫—É–Ω–¥–∞)
                if (config.isBossLifecycleLoggingEnabled() && debugTick % 20 == 0) {
                    plugin.getLogger().info("üîÑ DEBUG AI Tick " + debugTick + ": " + 
                        (bossEntity != null && bossEntity.isValid() && !bossEntity.isDead() ? "(boss alive)" : "(boss dead/invalid)"));
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –±–æ—Å—Å–∞ –∫–∞–∂–¥—ã–π —Ç–∏–∫
                if (bossEntity == null || !bossEntity.isValid() || bossEntity.isDead()) {
                    if (config.isBossLifecycleLoggingEnabled()) {
                        plugin.getLogger().info("‚ö†Ô∏è DEBUG: bossEntity.isValid() = " + 
                            (bossEntity != null ? bossEntity.isValid() : "null") + " (tick " + debugTick + ")");
                        
                        if (bossEntity != null) {
                            plugin.getLogger().info("   bossEntity.isDead() = " + bossEntity.isDead());
                            plugin.getLogger().info("   bossEntity class = " + bossEntity.getClass().getSimpleName());
                        }
                    }
                    
                    if (isAlive) {
                        plugin.getLogger().warning("üíÄ –°—É—â–Ω–æ—Å—Ç—å –±–æ—Å—Å–∞ —Å—Ç–∞–ª–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∏–ª–∏ –º–µ—Ä—Ç–≤–æ–π –Ω–∞ —Ç–∏–∫–µ " + debugTick + " - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–º–µ—Ä—Ç—å");
                        handleBossDeath();
                    }
                    cancel(); // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                    return;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±ossbar –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Ä—è–¥–æ–º
                updateBossBarPlayers();
                updateBossBarDisplay();
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–æ–ª–µ—Ç–∞ –±–æ—Å—Å–∞
                limitBossHeight();
                
                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–¥–æ—Ä–æ–≤—å—è
                preventRegeneration();
                
                // –°–∏—Å—Ç–µ–º–∞ —Ç–æ–Ω–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è —Å–º–µ–Ω—ã —Ñ–∞–∑
                updatePhase();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏ –≤ —á–∞—Ç
                if (tickCounter % 40 == 0) { // –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                    sendRandomTaunt();
                    checkLowHealthTaunts();
                }
                
                // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ñ–∞–∑—ã –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã (60 —Ç–∏–∫–æ–≤)
                if (tickCounter % 60 == 0) {
                    executePhaseAbilities();
                }
            }
        }.runTaskTimer(plugin, 0L, 1L);
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ–Ω—ã
        registerTask(mainAiTask);
    }
    
    private void preventRegeneration() {
        if (bossEntity == null || bossEntity.isDead()) return;
        
        // –°–ò–°–¢–ï–ú–ê –°–õ–û–ñ–ù–û–°–¢–ò: –ù–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        if (config.hasDifficultyBossRegeneration()) {
            // –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω—è—Ö —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            double currentHealth = bossEntity.getHealth();
            double maxHealth = bossEntity.getAttribute(Attribute.GENERIC_MAX_HEALTH).getValue();
            
            if (currentHealth < maxHealth) {
                double healAmount = maxHealth * 0.001; // 0.1% –≤ —Ç–∏–∫
                bossEntity.setHealth(Math.min(maxHealth, currentHealth + healAmount));
                
                // –≠—Ñ—Ñ–µ–∫—Ç—ã —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                if (tickCounter % 40 == 0) { // –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                    World world = bossEntity.getWorld();
                    Location loc = bossEntity.getLocation();
                    world.spawnParticle(Particle.HEART, loc.add(0, 2, 0), 5, 1, 1, 1, 0.1);
                    world.spawnParticle(Particle.VILLAGER_HAPPY, loc, 10, 2, 2, 2, 0.1);
                }
            }
        } else {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            bossEntity.removePotionEffect(PotionEffectType.REGENERATION);
        }
    }
    
    private void limitBossHeight() {
        Location bossLoc = bossEntity.getLocation();
        double groundY = spawnLocation.getY();
        
        // –ï—Å–ª–∏ –±–æ—Å—Å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        if (bossLoc.getY() > groundY + config.getMaxFlightHeight()) {
            Location newLoc = bossLoc.clone();
            newLoc.setY(groundY + config.getMaxFlightHeight() - 1);
            bossEntity.teleport(newLoc);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
            bossEntity.setVelocity(new Vector(0, -0.8, 0));
        }
        
        // –£–ú–ï–ù–¨–®–ê–ï–ú –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ "–¥–æ–º–∞—à–Ω–µ–≥–æ" –ø–æ–≤–µ–¥–µ–Ω–∏—è
        double maxDistance = 30.0; // –ë—ã–ª–æ 50, —Å—Ç–∞–ª–æ 30
        if (bossLoc.distance(spawnLocation) > maxDistance) {
            Location returnLoc = spawnLocation.clone().add(0, 2, 0);
            bossEntity.teleport(returnLoc);
            
            // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
            bossEntity.getWorld().playSound(bossEntity.getLocation(), Sound.ENTITY_ENDERMAN_TELEPORT, 1.5f, 0.8f);
            bossEntity.getWorld().spawnParticle(Particle.PORTAL, bossEntity.getLocation(), 30);
            
            Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
            plugin.getLogger().info("üè† –ë–æ—Å—Å –≤–µ—Ä–Ω—É–ª—Å—è –∫ –º–µ—Å—Ç—É —Å–ø–∞–≤–Ω–∞ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è > " + maxDistance + ")");
        }
        
        // –ù–û–í–û–ï: –ï—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Ä—è–¥–æ–º, –±–æ—Å—Å –∑–∞–≤–∏—Å–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ –Ω–∞ –º–µ—Å—Ç–µ —Å–ø–∞–≤–Ω–∞
        List<Player> nearbyPlayers = getNearbyPlayers(50);
        if (nearbyPlayers.isEmpty()) {
            // –ù–∏–∫–æ–≥–æ –Ω–µ—Ç —Ä—è–¥–æ–º - –∑–∞–≤–∏—Å–∞–µ–º –Ω–∞ –º–µ—Å—Ç–µ —Å–ø–∞–≤–Ω–∞
            Location hoverLoc = spawnLocation.clone().add(0, 5, 0);
            if (bossLoc.distance(hoverLoc) > 5) {
                bossEntity.teleport(hoverLoc);
                // –£–±–∏—Ä–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —á—Ç–æ–±—ã –Ω–µ —É–ª–µ—Ç–∞–ª
                bossEntity.setVelocity(new Vector(0, 0, 0));
            }
        }
    }
    
    private void updatePhase() {
        double currentHealth = bossEntity.getHealth();
        double maxHealth = bossEntity.getAttribute(Attribute.GENERIC_MAX_HEALTH).getValue();
        double healthPercentage = currentHealth / maxHealth;
        
        int newPhase = currentPhase;
        
        if (healthPercentage <= 0.3 && currentPhase < 3) {
            newPhase = 3;
        } else if (healthPercentage <= 0.6 && currentPhase < 2) {
            newPhase = 2;
        }
        
        if (newPhase != currentPhase) {
            transitionToPhase(newPhase);
        }
    }
    
    private void transitionToPhase(int newPhase) {
        currentPhase = newPhase;
        World world = bossEntity.getWorld();
        
        // –≠–ü–ò–ß–ï–°–ö–ò–ï —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–µ—Ä–µ—Ö–æ–¥–∞ —Ñ–∞–∑—ã
        createPhaseTransitionEffects(newPhase);
        
        // –ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã
        sendPhaseTaunt(newPhase);
        
        List<Player> nearbyPlayers = getNearbyPlayers(50);
        
        switch (currentPhase) {
            case 2:
                bossEntity.setCustomName(ChatColor.DARK_PURPLE + "‚ö° –¢–ï–ú–ù–´–ô –ü–û–í–ï–õ–ò–¢–ï–õ–¨ ‚ö° " + ChatColor.RED + "[–§–ê–ó–ê 2]");
                bossBar.setTitle(ChatColor.DARK_PURPLE + "‚ö° –¢–ï–ú–ù–´–ô –ü–û–í–ï–õ–ò–¢–ï–õ–¨ ‚ö° " + ChatColor.RED + "[–§–ê–ó–ê 2]");
                bossBar.setColor(BarColor.PURPLE);
                
                // –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–º –∏–≥—Ä–æ–∫–∞–º
                for (Player player : nearbyPlayers) {
                    player.sendTitle(ChatColor.DARK_PURPLE + "‚ö° –§–ê–ó–ê 2 ‚ö°", 
                        ChatColor.RED + "–ú–∞–≥–∏—á–µ—Å–∫–∞—è —è—Ä–æ—Å—Ç—å!", 10, 40, 10);
                }
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å (–ë–ï–ó –†–ï–ì–ï–ù–ï–†–ê–¶–ò–ò!)
                bossEntity.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, Integer.MAX_VALUE, 1));
                break;
                
            case 3:
                bossEntity.setCustomName(ChatColor.DARK_RED + "‚ö° –¢–ï–ú–ù–´–ô –ü–û–í–ï–õ–ò–¢–ï–õ–¨ ‚ö° " + ChatColor.GOLD + "[–§–ò–ù–ê–õ–¨–ù–ê–Ø –§–ê–ó–ê]");
                bossBar.setTitle(ChatColor.DARK_RED + "‚ö° –¢–ï–ú–ù–´–ô –ü–û–í–ï–õ–ò–¢–ï–õ–¨ ‚ö° " + ChatColor.GOLD + "[–§–ò–ù–ê–õ–¨–ù–ê–Ø –§–ê–ó–ê]");
                bossBar.setColor(BarColor.RED);
                
                for (Player player : nearbyPlayers) {
                    player.sendTitle(ChatColor.DARK_RED + "üíÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –§–ê–ó–ê! üíÄ", 
                        ChatColor.GOLD + "–ü–æ—Å–ª–µ–¥–Ω—è—è –±–∏—Ç–≤–∞!", 10, 50, 10);
                }
                // –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –±–æ–ª—å—à–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–ë–ï–ó –†–ï–ì–ï–ù–ï–†–ê–¶–ò–ò!)
                bossEntity.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, Integer.MAX_VALUE, 2));
                break;
        }
    }
    
    private void createPhaseTransitionEffects(int phase) {
        World world = bossEntity.getWorld();
        Location bossLoc = bossEntity.getLocation();
        
        // –ú–æ—â–Ω—ã–π –≤–∑—Ä—ã–≤ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
        world.createExplosion(bossLoc, 5.0f, false, false);
        
        // –ó–≤—É–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
        world.playSound(bossLoc, Sound.ENTITY_WITHER_AMBIENT, 2.0f, 0.5f);
        world.playSound(bossLoc, Sound.ENTITY_ENDER_DRAGON_GROWL, 2.0f, 0.8f);
        world.playSound(bossLoc, Sound.ENTITY_LIGHTNING_BOLT_THUNDER, 1.5f, 1.0f);
        
        switch (phase) {
            case 2:
                // –§–∏–æ–ª–µ—Ç–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ñ–∞–∑—ã 2
                world.spawnParticle(Particle.SPELL_WITCH, bossLoc, 100, 4, 4, 4, 0.3);
                world.spawnParticle(Particle.PORTAL, bossLoc, 50, 3, 3, 3, 0.2);
                world.spawnParticle(Particle.REDSTONE, bossLoc, 30, 3, 3, 3, 
                    new Particle.DustOptions(org.bukkit.Color.PURPLE, 2.0f));
                
                // –ö–æ–ª—å—Ü–∞ –º–∞–≥–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏
                createMagicRings(bossLoc, org.bukkit.Color.PURPLE);
                break;
                
            case 3:
                // –û–≥–Ω–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ñ–∞–∑—ã
                world.spawnParticle(Particle.FLAME, bossLoc, 80, 4, 4, 4, 0.3);
                world.spawnParticle(Particle.LAVA, bossLoc, 40, 3, 3, 3, 0.2);
                world.spawnParticle(Particle.SMOKE_LARGE, bossLoc, 60, 4, 4, 4, 0.2);
                world.spawnParticle(Particle.REDSTONE, bossLoc, 50, 4, 4, 4, 
                    new Particle.DustOptions(org.bukkit.Color.RED, 2.5f));
                
                // –û–≥–Ω–µ–Ω–Ω—ã–µ –∫–æ–ª—å—Ü–∞
                createMagicRings(bossLoc, org.bukkit.Color.RED);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–ª–Ω–∏–∏
                for (int i = 0; i < 5; i++) {
                    Location lightningLoc = bossLoc.clone().add(
                        random.nextDouble() * 8 - 4,
                        0,
                        random.nextDouble() * 8 - 4
                    );
                    world.strikeLightningEffect(lightningLoc);
                }
                break;
        }
    }
    
    private void createMagicRings(Location center, Color color) {
        World world = center.getWorld();
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        
        // –°–æ–∑–¥–∞–µ–º 3 –∫–æ–ª—å—Ü–∞ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        for (int ring = 1; ring <= 3; ring++) {
            final double ringRadius = ring * 2.0;
            final int ringIndex = ring;
            
            new BukkitRunnable() {
                int ticks = 0;
                
                @Override
                public void run() {
                    if (ticks > 20) { // 1 —Å–µ–∫—É–Ω–¥–∞
                        this.cancel();
                        return;
                    }
                    
                    int points = 20;
                    for (int i = 0; i < points; i++) {
                        double angle = 2 * Math.PI * i / points;
                        double x = center.getX() + ringRadius * Math.cos(angle);
                        double z = center.getZ() + ringRadius * Math.sin(angle);
                        double y = center.getY() + 0.5 + Math.sin(ticks * 0.3) * 0.5; // –í–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                        
                        Location particleLoc = new Location(world, x, y, z);
                        world.spawnParticle(Particle.REDSTONE, particleLoc, 1, 0, 0, 0, 
                            new Particle.DustOptions(color, 1.5f));
                    }
                    
                    ticks++;
                }
            }.runTaskTimer(plugin, ringIndex * 5L, 1L);
        }
    }
    
    private void executePhaseAbilities() {
        switch (currentPhase) {
            case 1:
                phaseOneAbilities();
                break;
            case 2:
                phaseTwoAbilities();
                break;
            case 3:
                phaseThreeAbilities();
                break;
        }
        
        // –£–ù–ò–ö–ê–õ–¨–ù–´–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò –¢–û–õ–¨–ö–û –î–õ–Ø 5 –£–†–û–í–ù–Ø –°–õ–û–ñ–ù–û–°–¢–ò (–≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô)
        if (config.hasDifficultyUniqueAbilities()) {
            executeExtremeAbilities();
        }
    }
    
    private void phaseOneAbilities() {
        // –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ - –æ–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞
        if (tickCounter % 100 == 0) {
            fireballBarrage();
        }
        
        // –ö–∞–∂–¥—ã–µ 8 —Å–µ–∫—É–Ω–¥ - –ø—Ä–∏–∑—ã–≤ —Å–∫–µ–ª–µ—Ç–æ–≤
        if (tickCounter % 160 == 0) {
            summonMinions();
        }
        
        // –ö–∞–∂–¥—ã–µ 12 —Å–µ–∫—É–Ω–¥ - –ø—Ä–∏—Ç—è–≥–∏–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
        if (tickCounter % 240 == 0) {
            pullPlayersAttack();
        }
    }
    
    private void phaseTwoAbilities() {
        // –í—Å–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–µ—Ä–≤–æ–π —Ñ–∞–∑—ã, –Ω–æ —á–∞—â–µ
        if (tickCounter % 80 == 0) {
            fireballBarrage();
        }
        
        if (tickCounter % 120 == 0) {
            summonMinions();
        }
        
        if (tickCounter % 180 == 0) {
            pullPlayersAttack();
        }
        
        // –ù–æ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å - —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è
        if (tickCounter % 200 == 0) {
            teleportStrike();
        }
        
        // –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–Ω–∞—Ä—è–¥—ã
        if (tickCounter % 60 == 0) {
            magicMissiles();
        }
        
        // –ó–µ–º–ª—è–Ω—ã–µ —à–∏–ø—ã
        if (tickCounter % 140 == 0) {
            earthSpikes();
        }
    }
    
    private void phaseThreeAbilities() {
        // –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –µ—â–µ —á–∞—â–µ
        if (tickCounter % 60 == 0) {
            fireballBarrage();
        }
        
        if (tickCounter % 100 == 0) {
            summonMinions();
        }
        
        if (tickCounter % 120 == 0) {
            pullPlayersAttack();
        }
        
        if (tickCounter % 150 == 0) {
            teleportStrike();
        }
        
        if (tickCounter % 40 == 0) {
            magicMissiles();
        }
        
        if (tickCounter % 100 == 0) {
            earthSpikes();
        }
        
        // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        if (tickCounter % 300 == 0) {
            meteorStorm();
        }
        
        // –û—Å–ª–µ–ø–ª—è—é—â–∞—è –≤—Å–ø—ã—à–∫–∞
        if (tickCounter % 180 == 0) {
            blindingFlash();
        }
        
        // –ù–û–í–ê–Ø –£–ù–ò–ö–ê–õ–¨–ù–ê–Ø –ê–¢–ê–ö–ê - –î—É—à–µ—Ä–∞–∑–¥–∏—Ä–∞—é—â–∏–π –∫—Ä–∏–∫
        if (tickCounter % 220 == 0) {
            soulScream();
        }
    }
    
    // üî• –£–ù–ò–ö–ê–õ–¨–ù–´–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò –î–õ–Ø 5 –£–†–û–í–ù–Ø –°–õ–û–ñ–ù–û–°–¢–ò (–≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ô) üî•
    private void executeExtremeAbilities() {
        // üíÄ –°–ú–ï–†–¢–ï–õ–¨–ù–´–ô –í–ó–ì–õ–Ø–î –¢–ï–ú–ù–û–ì–û –ü–û–í–ï–õ–ò–¢–ï–õ–Ø - –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ (300 —Ç–∏–∫–æ–≤)
        if (tickCounter % 300 == 0) {
            deathGaze();
        }
        
        // ‚ö° –¶–ï–ü–ù–ê–Ø –ú–û–õ–ù–ò–Ø –•–ê–û–°–ê - –∫–∞–∂–¥—ã–µ 18 —Å–µ–∫—É–Ω–¥ (360 —Ç–∏–∫–æ–≤) 
        if (tickCounter % 360 == 0) {
            chaosLightning();
        }
        
        // üåÄ –í–ò–•–†–¨ –¢–¨–ú–´ - –∫–∞–∂–¥—ã–µ 25 —Å–µ–∫—É–Ω–¥ (500 —Ç–∏–∫–æ–≤)
        if (tickCounter % 500 == 0) {
            darknessVortex();
        }
    }
    
    // –ù–û–í–´–ï –£–ù–ò–ö–ê–õ–¨–ù–´–ï –°–ü–û–°–û–ë–ù–û–°–¢–ò
    
    private void pullPlayersAttack() {
        List<Player> nearbyPlayers = getNearbyPlayers(25.0); // 25 –±–ª–æ–∫–æ–≤ —Ä–∞–¥–∏—É—Å
        if (nearbyPlayers.isEmpty()) return;
        
        // –ó–≤—É–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞—Ç–∞–∫–∏
        World world = bossEntity.getWorld();
        Location bossLoc = bossEntity.getLocation();
        world.playSound(bossLoc, Sound.ENTITY_ENDER_DRAGON_GROWL, 2.0f, 0.3f);
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        double multiplier = config.getParticlesMultiplier();
        world.spawnParticle(Particle.PORTAL, bossLoc.clone().add(0, 2, 0), 
            (int)(100 * multiplier), 3, 3, 3, 0.5);
        
        // –ü—Ä–∏—Ç—è–≥–∏–≤–∞—é—â–∞—è –∞—Ç–∞–∫–∞ —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        BukkitTask pullTask = new BukkitRunnable() {
            @Override
            public void run() {
                if (bossEntity == null || bossEntity.isDead()) {
                    cancel();
                    return;
                }
                
                for (Player player : nearbyPlayers) {
                    if (player.getLocation().distance(bossEntity.getLocation()) <= 25.0) {
                        Vector direction = bossEntity.getLocation().toVector().subtract(player.getLocation().toVector()).normalize();
                        Vector pullForce = direction.multiply(2.0); // –°–∏–ª–∞ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è
                        player.setVelocity(pullForce);
                        
                        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è
                        world.spawnParticle(Particle.REDSTONE, player.getLocation().clone().add(0, 1, 0), 
                            (int)(20 * multiplier), 1, 1, 1, 
                            new Particle.DustOptions(org.bukkit.Color.PURPLE, 1.5f));
                    }
                }
                
                // –ó–≤—É–∫ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è
                world.playSound(bossLoc, Sound.ENTITY_ENDERMAN_TELEPORT, 1.5f, 1.2f);
            }
        }.runTaskLater(plugin, 30L);
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        registerTask(pullTask);
    }
    
    private void earthSpikes() {
        List<Player> nearbyPlayers = getNearbyPlayers(20);
        if (nearbyPlayers.isEmpty()) return;
        
        World world = bossEntity.getWorld();
        Location bossLoc = bossEntity.getLocation();
        
        // –ú–û–©–ù–´–ï –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        double multiplier = config.getParticlesMultiplier();
        world.spawnParticle(Particle.BLOCK_CRACK, bossLoc, (int)(100 * multiplier), 4, 1, 4, 
            Material.STONE.createBlockData());
        world.spawnParticle(Particle.SMOKE_LARGE, bossLoc, (int)(60 * multiplier), 3, 1, 3, 0.1);
        world.spawnParticle(Particle.REDSTONE, bossLoc, (int)(50 * multiplier), 3, 1, 3,
            new Particle.DustOptions(org.bukkit.Color.GRAY, 2.0f));
        
        // –ó–≤—É–∫–∏ –∑–µ–º–ª–∏
        world.playSound(bossLoc, Sound.ENTITY_ENDER_DRAGON_GROWL, 2.0f, 0.3f);
        world.playSound(bossLoc, Sound.BLOCK_GRAVEL_BREAK, 2.0f, 0.5f);
        world.playSound(bossLoc, Sound.ENTITY_RAVAGER_ROAR, 1.5f, 0.8f);
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º
        for (Player player : nearbyPlayers) {
            player.sendTitle(ChatColor.GOLD + "‚õ∞Ô∏è –ó–ï–ú–õ–Ø–ù–´–ï –®–ò–ü–´! ‚õ∞Ô∏è", 
                ChatColor.RED + "–ó–µ–º–ª—è –≤–æ—Å—Å—Ç–∞–µ—Ç –ø–æ–¥ –Ω–æ–≥–∞–º–∏!", 10, 30, 10);
        }
        
        // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã —Å–æ–∑–¥–∞–µ–º —à–∏–ø—ã
        new BukkitRunnable() {
            @Override
            public void run() {
                for (Player player : nearbyPlayers) {
                    if (player.isOnline()) {
                        Location spikeLoc = player.getLocation().clone();
                        
                        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –º–µ—Å—Ç–µ —à–∏–ø–æ–≤
                        world.spawnParticle(Particle.BLOCK_CRACK, spikeLoc, (int)(30 * multiplier), 2, 0.5, 2,
                            Material.COBBLESTONE.createBlockData());
                        world.spawnParticle(Particle.CLOUD, spikeLoc, (int)(20 * multiplier), 1, 0.5, 1, 0.1);
                        world.playSound(spikeLoc, Sound.BLOCK_STONE_BREAK, 2.0f, 0.8f);
                        
                        // –°–æ–∑–¥–∞–µ–º "—à–∏–ø" –∏–∑ –±–ª–æ–∫–æ–≤
                        for (int y = 0; y < 4; y++) {
                            Location blockLoc = spikeLoc.clone().add(0, y, 0);
                            if (blockLoc.getBlock().getType() == Material.AIR) {
                                blockLoc.getBlock().setType(Material.COBBLESTONE);
                                
                                // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
                                world.spawnParticle(Particle.BLOCK_CRACK, blockLoc, (int)(10 * multiplier), 0.5, 0.5, 0.5,
                                    Material.COBBLESTONE.createBlockData());
                                
                                // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                                new BukkitRunnable() {
                                    @Override
                                    public void run() {
                                        if (blockLoc.getBlock().getType() == Material.COBBLESTONE) {
                                            // –≠—Ñ—Ñ–µ–∫—Ç—ã –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                                            world.spawnParticle(Particle.BLOCK_CRACK, blockLoc, (int)(15 * multiplier), 0.5, 0.5, 0.5,
                                                Material.COBBLESTONE.createBlockData());
                                            world.playSound(blockLoc, Sound.BLOCK_STONE_BREAK, 1.0f, 1.2f);
                                            
                                            blockLoc.getBlock().setType(Material.AIR);
                                        }
                                    }
                                }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), 60L);
                            }
                        }
                        
                        // –£—Ä–æ–Ω –∏–≥—Ä–æ–∫—É
                        player.damage(6.0);
                        
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–æ–∫—Ä—É–≥ –∏–≥—Ä–æ–∫–∞
                        world.spawnParticle(Particle.CRIT, spikeLoc.clone().add(0, 2, 0), (int)(30 * multiplier), 1, 1, 1, 0.1);
                        world.spawnParticle(Particle.REDSTONE, spikeLoc.clone().add(0, 1, 0), (int)(20 * multiplier), 1, 1, 1,
                            new Particle.DustOptions(org.bukkit.Color.ORANGE, 1.5f));
                        world.playSound(spikeLoc, Sound.BLOCK_ANVIL_LAND, 1.0f, 1.5f);
                    }
                }
            }
        }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), 40L);
    }
    
    private void blindingFlash() {
        List<Player> nearbyPlayers = getNearbyPlayers(30);
        if (nearbyPlayers.isEmpty()) return;
        
        World world = bossEntity.getWorld();
        Location bossLoc = bossEntity.getLocation();
        
        // –ú–û–©–ù–´–ï –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        double multiplier = config.getParticlesMultiplier();
        world.spawnParticle(Particle.FLASH, bossLoc, (int)(50 * multiplier), 3, 3, 3, 0.1);
        world.spawnParticle(Particle.FIREWORKS_SPARK, bossLoc, (int)(80 * multiplier), 3, 3, 3, 0.2);
        world.spawnParticle(Particle.REDSTONE, bossLoc, (int)(60 * multiplier), 3, 3, 3,
            new Particle.DustOptions(org.bukkit.Color.WHITE, 2.0f));
        world.spawnParticle(Particle.END_ROD, bossLoc, (int)(40 * multiplier), 2, 2, 2, 0.1);
        
        // –ó–≤—É–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        world.playSound(bossLoc, Sound.BLOCK_BEACON_ACTIVATE, 2.0f, 1.5f);
        world.playSound(bossLoc, Sound.ENTITY_FIREWORK_ROCKET_TWINKLE, 2.0f, 2.0f);
        world.playSound(bossLoc, Sound.BLOCK_ENCHANTMENT_TABLE_USE, 1.5f, 2.0f);
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        for (Player player : nearbyPlayers) {
            player.sendTitle(ChatColor.YELLOW + "üí• –û–°–õ–ï–ü–õ–Ø–Æ–©–ê–Ø –í–°–ü–´–®–ö–ê! üí•", 
                ChatColor.GOLD + "–¢–µ–º–Ω—ã–π –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –≥–æ—Ç–æ–≤–∏—Ç –∞—Ç–∞–∫—É!", 10, 40, 10);
        }
        
        // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã - –ú–û–©–ù–ê–Ø –≤—Å–ø—ã—à–∫–∞
        new BukkitRunnable() {
            @Override
            public void run() {
                // –≠–ü–ò–ß–ï–°–ö–ò–ï —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—Å–ø—ã—à–∫–∏
                world.spawnParticle(Particle.FLASH, bossLoc, (int)(200 * multiplier), 15, 15, 15, 0.3);
                world.spawnParticle(Particle.FIREWORKS_SPARK, bossLoc, (int)(150 * multiplier), 10, 10, 10, 0.5);
                world.spawnParticle(Particle.END_ROD, bossLoc, (int)(100 * multiplier), 8, 8, 8, 0.3);
                world.spawnParticle(Particle.REDSTONE, bossLoc, (int)(80 * multiplier), 8, 8, 8,
                    new Particle.DustOptions(org.bukkit.Color.YELLOW, 3.0f));
                
                // –°–æ–∑–¥–∞–µ–º –≤–æ–ª–Ω—É —Å–≤–µ—Ç–∞
                createLightWave(bossLoc, 40.0);
                
                // –ú–û–©–ù–´–ï –∑–≤—É–∫–∏ –≤—Å–ø—ã—à–∫–∏
                world.playSound(bossLoc, Sound.ENTITY_LIGHTNING_BOLT_THUNDER, 3.0f, 2.0f);
                world.playSound(bossLoc, Sound.ENTITY_FIREWORK_ROCKET_BLAST_FAR, 2.5f, 2.0f);
                world.playSound(bossLoc, Sound.BLOCK_BEACON_DEACTIVATE, 2.0f, 2.0f);
                world.playSound(bossLoc, Sound.ENTITY_GENERIC_EXPLODE, 2.0f, 1.5f);
                
                // –û—Å–ª–µ–ø–ª—è–µ–º –≤—Å–µ—Ö –±–ª–∏–∂–∞–π—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
                for (Player player : nearbyPlayers) {
                    if (player.isOnline() && player.getLocation().distance(bossEntity.getLocation()) <= 35) {
                        player.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS, 100, 2)); // 5 —Å–µ–∫—É–Ω–¥ —Å–ª–µ–ø–æ—Ç—ã
                        player.addPotionEffect(new PotionEffect(PotionEffectType.SLOW, 60, 1)); // 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        player.addPotionEffect(new PotionEffect(PotionEffectType.CONFUSION, 80, 0)); // –î–µ–∑–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
                        
                        // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –∏–≥—Ä–æ–∫–µ
                        Location playerLoc = player.getLocation();
                        world.spawnParticle(Particle.FLASH, playerLoc, (int)(30 * multiplier), 2, 2, 2, 0.1);
                        world.spawnParticle(Particle.FIREWORKS_SPARK, playerLoc, (int)(20 * multiplier), 1, 1, 1, 0.1);
                        
                        player.sendTitle(ChatColor.WHITE + "–û–°–õ–ï–ü–õ–ï–ù–´!", 
                            ChatColor.GRAY + "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–∏–¥–∏—Ç–µ!", 10, 80, 20);
                        
                        // –ó–≤—É–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                        world.playSound(playerLoc, Sound.ENTITY_FIREWORK_ROCKET_TWINKLE_FAR, 1.5f, 2.0f);
                    }
                }
            }
        }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), 40L);
    }
    
    private void createLightWave(Location center, double maxRadius) {
        World world = center.getWorld();
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        
        new BukkitRunnable() {
            double radius = 0;
            int ticks = 0;
            
            @Override
            public void run() {
                if (ticks > 30 || radius > maxRadius) { // 1.5 —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ maxRadius –±–ª–æ–∫–æ–≤
                    this.cancel();
                    return;
                }
                
                int points = (int) (radius * 3);
                for (int i = 0; i < points; i++) {
                    double angle = 2 * Math.PI * i / points;
                    double x = center.getX() + radius * Math.cos(angle);
                    double z = center.getZ() + radius * Math.sin(angle);
                    Location particleLoc = new Location(world, x, center.getY() + 0.5, z);
                    
                    world.spawnParticle(Particle.FLASH, particleLoc, 1, 0, 0, 0, 0);
                    world.spawnParticle(Particle.REDSTONE, particleLoc, 1, 0, 0, 0, 
                        new Particle.DustOptions(org.bukkit.Color.WHITE, 1.5f));
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫
                    if (i % 5 == 0) {
                        world.spawnParticle(Particle.FIREWORKS_SPARK, particleLoc, 2, 0.1, 0.1, 0.1, 0.05);
                    }
                }
                
                radius += 1.5;
                ticks++;
            }
        }.runTaskTimer(plugin, 0L, 1L);
    }
    
    // –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Å—Å–∞
    private void fireballBarrage() {
        World world = bossEntity.getWorld();
        List<Player> nearbyPlayers = getNearbyPlayers(20);
        Location bossLoc = bossEntity.getLocation();
        
        // –ö–†–ê–°–ò–í–´–ï –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        world.spawnParticle(Particle.FLAME, bossLoc, 100, 3, 3, 3, 0.2);
        world.spawnParticle(Particle.SMOKE_LARGE, bossLoc, 50, 2, 2, 2, 0.1);
        world.spawnParticle(Particle.LAVA, bossLoc, 30, 2, 2, 2, 0.1);
        world.playSound(bossLoc, Sound.ENTITY_GHAST_WARN, 2.0f, 0.5f);
        
        // –¢–û–õ–¨–ö–û title –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º
        for (Player player : nearbyPlayers) {
            player.sendTitle("", ChatColor.RED + "üî• –û–ì–ù–ï–ù–ù–´–ô –ó–ê–õ–ü! üî•", 5, 20, 5);
        }
        
        // –ß–µ—Ä–µ–∑ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã —Å—Ç—Ä–µ–ª—è–µ–º
        new BukkitRunnable() {
            @Override
            public void run() {
                for (Player player : nearbyPlayers) {
                    if (player.isOnline()) {
                        Vector direction = player.getLocation().toVector().subtract(bossEntity.getLocation().toVector()).normalize();
                        Fireball fireball = world.spawn(bossEntity.getEyeLocation(), Fireball.class);
                        fireball.setDirection(direction);
                        fireball.setYield(2.0f);
                        
                        // –≠—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π—Ä–±–æ–ª–∞
                        world.spawnParticle(Particle.FLAME, bossEntity.getEyeLocation(), 10, 0.5, 0.5, 0.5, 0.1);
                    }
                }
                
                world.playSound(bossLoc, Sound.ENTITY_GHAST_SHOOT, 2.0f, 0.8f);
                world.playSound(bossLoc, Sound.ENTITY_BLAZE_SHOOT, 1.5f, 1.0f);
            }
        }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), 10L);
    }
    
    private void summonMinions() {
        World world = bossEntity.getWorld();
        Location bossLoc = bossEntity.getLocation();
        
        // –°–ò–°–¢–ï–ú–ê –°–õ–û–ñ–ù–û–°–¢–ò: –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω—å–æ–Ω–æ–≤
        int baseMinions = 3;
        int actualMinions = Math.max(1, (int)(baseMinions * config.getDifficultyMinionsCountMultiplier()));
        
        // –≠–ü–ò–ß–ï–°–ö–ò–ï —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏–∑—ã–≤–∞
        double multiplier = config.getParticlesMultiplier();
        world.spawnParticle(Particle.SMOKE_LARGE, bossLoc, (int)(80 * multiplier), 4, 2, 4, 0.1);
        world.spawnParticle(Particle.SPELL_WITCH, bossLoc, (int)(60 * multiplier), 3, 2, 3, 0.2);
        world.spawnParticle(Particle.REDSTONE, bossLoc, (int)(40 * multiplier), 3, 2, 3, 
            new Particle.DustOptions(org.bukkit.Color.MAROON, 2.0f));
        
        // –ó–≤—É–∫–∏ –ø—Ä–∏–∑—ã–≤–∞
        world.playSound(bossLoc, Sound.ENTITY_WITHER_AMBIENT, 2.0f, 0.5f);
        world.playSound(bossLoc, Sound.ENTITY_ZOMBIE_VILLAGER_CONVERTED, 1.5f, 0.3f);
        
        for (int i = 0; i < actualMinions; i++) {
            final int index = i;
            new BukkitRunnable() {
                @Override
                public void run() {
                    Location spawnLoc = bossLoc.clone().add(
                        random.nextDouble() * 6 - 3,
                        1,
                        random.nextDouble() * 6 - 3
                    );
                    
                    // –≠—Ñ—Ñ–µ–∫—Ç—ã –≤ —Ç–æ—á–∫–µ –ø—Ä–∏–∑—ã–≤–∞
                    world.spawnParticle(Particle.SMOKE_LARGE, spawnLoc, (int)(20 * multiplier), 1, 1, 1, 0.1);
                    world.spawnParticle(Particle.REDSTONE, spawnLoc, (int)(15 * multiplier), 1, 1, 1,
                        new Particle.DustOptions(org.bukkit.Color.BLACK, 1.5f));
                    world.createExplosion(spawnLoc, 1.5f, false, false);
                    
                    Skeleton skeleton = (Skeleton) world.spawnEntity(spawnLoc, EntityType.SKELETON);
                    skeleton.setCustomName(ChatColor.RED + "üíÄ –ü—Ä–∏—Å–ª—É–∂–Ω–∏–∫ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è üíÄ");
                    skeleton.setCustomNameVisible(true);
                    skeleton.getEquipment().setHelmet(new ItemStack(Material.IRON_HELMET));
                    skeleton.getEquipment().setItemInMainHand(new ItemStack(Material.BOW));
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏—Å–ª—É–∂–Ω–∏–∫–∞–º
                    skeleton.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, Integer.MAX_VALUE, 1));
                    skeleton.addPotionEffect(new PotionEffect(PotionEffectType.INCREASE_DAMAGE, Integer.MAX_VALUE, 0));
                    skeleton.addPotionEffect(new PotionEffect(PotionEffectType.GLOWING, Integer.MAX_VALUE, 0));
                    
                    world.playSound(spawnLoc, Sound.ENTITY_SKELETON_AMBIENT, 1.5f, 0.5f);
                }
            }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), index * 10L);
        }
        
        // –¢–û–õ–¨–ö–û title —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º
        List<Player> nearbyPlayers = getNearbyPlayers(50);
        for (Player player : nearbyPlayers) {
            player.sendTitle("", ChatColor.RED + "üíÄ –ü–†–ò–ó–´–í –ù–ï–ñ–ò–¢–ò! üíÄ", 5, 30, 5);
        }
    }
    
    private void teleportStrike() {
        List<Player> nearbyPlayers = getNearbyPlayers(30);
        if (nearbyPlayers.isEmpty()) return;
        
        Player target = nearbyPlayers.get(random.nextInt(nearbyPlayers.size()));
        Location oldLoc = bossEntity.getLocation().clone();
        Location targetLoc = target.getLocation().clone().add(0, 2, 0);
        World world = bossEntity.getWorld();
        
        // –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –¶–ï–õ–ò
        target.sendTitle(ChatColor.DARK_PURPLE + "‚ö° –¢–ï–õ–ï–ü–û–†–¢ –ê–¢–ê–ö–ê! ‚ö°", 
            ChatColor.RED + "–ë–æ—Å—Å —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –≤–∞–º!", 10, 30, 10);
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –≤ —Å—Ç–∞—Ä–æ–º –º–µ—Å—Ç–µ
        world.spawnParticle(Particle.PORTAL, oldLoc, 100, 2, 2, 2, 0.3);
        world.spawnParticle(Particle.SPELL_WITCH, oldLoc, 50, 2, 2, 2, 0.2);
        world.spawnParticle(Particle.SMOKE_LARGE, oldLoc, 40, 2, 2, 2, 0.1);
        world.playSound(oldLoc, Sound.ENTITY_ENDERMAN_TELEPORT, 2.0f, 0.8f);
        world.playSound(oldLoc, Sound.ENTITY_ENDER_DRAGON_FLAP, 1.5f, 1.2f);
        
        // –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        new BukkitRunnable() {
            @Override
            public void run() {
                // –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è
                bossEntity.teleport(targetLoc);
                
                // –ú–û–©–ù–´–ï —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ—è–≤–ª–µ–Ω–∏—è
                world.spawnParticle(Particle.EXPLOSION_LARGE, targetLoc, 20, 3, 3, 3, 0.1);
                world.spawnParticle(Particle.PORTAL, targetLoc, 80, 3, 3, 3, 0.2);
                world.spawnParticle(Particle.ELECTRIC_SPARK, targetLoc, 60, 2, 2, 2, 0.1);
                world.spawnParticle(Particle.REDSTONE, targetLoc, 50, 3, 3, 3,
                    new Particle.DustOptions(org.bukkit.Color.PURPLE, 2.0f));
                
                // –í–∑—Ä—ã–≤ –∏ –∑–≤—É–∫–∏
                world.createExplosion(targetLoc, 4.0f, false, false);
                world.playSound(targetLoc, Sound.ENTITY_GENERIC_EXPLODE, 2.0f, 1.0f);
                world.playSound(targetLoc, Sound.ENTITY_LIGHTNING_BOLT_THUNDER, 1.5f, 1.2f);
                world.playSound(targetLoc, Sound.ENTITY_WITHER_BREAK_BLOCK, 2.0f, 0.8f);
                
                // –ú–æ–ª–Ω–∏—è –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏–∑–º–∞
                world.strikeLightningEffect(targetLoc);
            }
        }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), 20L);
    }
    
    private void magicMissiles() {
        World world = bossEntity.getWorld();
        List<Player> nearbyPlayers = getNearbyPlayers(25);
        Location bossLoc = bossEntity.getLocation();
        
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        world.spawnParticle(Particle.SPELL_WITCH, bossLoc, 80, 3, 3, 3, 0.3);
        world.spawnParticle(Particle.ENCHANTMENT_TABLE, bossLoc, 60, 2, 2, 2, 0.2);
        world.spawnParticle(Particle.REDSTONE, bossLoc, 40, 3, 3, 3,
            new Particle.DustOptions(org.bukkit.Color.BLUE, 2.0f));
        
        world.playSound(bossLoc, Sound.BLOCK_ENCHANTMENT_TABLE_USE, 2.0f, 0.5f);
        world.playSound(bossLoc, Sound.ENTITY_EVOKER_PREPARE_ATTACK, 1.5f, 1.0f);
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        for (Player player : nearbyPlayers) {
            player.sendTitle("", ChatColor.BLUE + "üåü –ú–ê–ì–ò–ß–ï–°–ö–ê–Ø –ê–¢–ê–ö–ê! üåü", 5, 20, 5);
        }
        
        // –ó–∞–ø—É—Å–∫ —Ä–∞–∫–µ—Ç —á–µ—Ä–µ–∑ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã
        new BukkitRunnable() {
            @Override
            public void run() {
                for (Player player : nearbyPlayers) {
                    if (player.isOnline()) {
                        // –°–æ–∑–¥–∞–µ–º —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–Ω–∞—Ä—è–¥
                        DragonFireball missile = world.spawn(bossEntity.getEyeLocation(), DragonFireball.class);
                        Vector direction = player.getLocation().toVector().subtract(bossEntity.getLocation().toVector()).normalize();
                        missile.setDirection(direction);
                        
                        // –≠—Ñ—Ñ–µ–∫—Ç—ã –∑–∞–ø—É—Å–∫–∞ –∫–∞–∂–¥–æ–π —Ä–∞–∫–µ—Ç—ã
                        world.spawnParticle(Particle.SPELL_WITCH, bossEntity.getEyeLocation(), 15, 0.5, 0.5, 0.5, 0.1);
                        world.spawnParticle(Particle.REDSTONE, bossEntity.getEyeLocation(), 10, 0.3, 0.3, 0.3,
                            new Particle.DustOptions(org.bukkit.Color.BLUE, 1.5f));
                    }
                }
                
                world.playSound(bossLoc, Sound.ENTITY_BLAZE_SHOOT, 2.0f, 1.2f);
                world.playSound(bossLoc, Sound.ENTITY_FIREWORK_ROCKET_LAUNCH, 1.5f, 1.5f);
            }
        }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), 10L);
    }
    
    private void meteorStorm() {
        World world = bossEntity.getWorld();
        List<Player> nearbyPlayers = getNearbyPlayers(30);
        Location bossLoc = bossEntity.getLocation();
        
        // –≠–ü–ò–ß–ï–°–ö–ò–ï –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        world.spawnParticle(Particle.FLAME, bossLoc, 150, 5, 5, 5, 0.3);
        world.spawnParticle(Particle.LAVA, bossLoc, 100, 4, 4, 4, 0.2);
        world.spawnParticle(Particle.SMOKE_LARGE, bossLoc, 120, 4, 4, 4, 0.2);
        world.spawnParticle(Particle.REDSTONE, bossLoc, 80, 4, 4, 4,
            new Particle.DustOptions(org.bukkit.Color.ORANGE, 2.5f));
        
        // –ú–æ—â–Ω—ã–µ –∑–≤—É–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        world.playSound(bossLoc, Sound.ENTITY_WITHER_SHOOT, 2.0f, 0.3f);
        world.playSound(bossLoc, Sound.ENTITY_ENDER_DRAGON_GROWL, 2.0f, 0.5f);
        world.playSound(bossLoc, Sound.AMBIENT_CAVE, 2.0f, 0.3f);
        
        // –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–º –∏–≥—Ä–æ–∫–∞–º
        for (Player player : nearbyPlayers) {
            player.sendTitle(ChatColor.DARK_RED + "" + ChatColor.BOLD + "‚òÑ –ú–ï–¢–ï–û–†–ò–¢–ù–´–ô –î–û–ñ–î–¨! ‚òÑ", 
                ChatColor.GOLD + "–ò—â–∏—Ç–µ —É–∫—Ä—ã—Ç–∏–µ!", 10, 60, 10);
        }
        
        // –°–æ–∑–¥–∞–µ–º 12 –º–µ—Ç–µ–æ—Ä–∏—Ç–æ–≤ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        for (int i = 0; i < 12; i++) {
            final int meteorIndex = i;
            new BukkitRunnable() {
                @Override
                public void run() {
                    for (Player player : nearbyPlayers) {
                        if (player.isOnline()) {
                            Location meteorLoc = player.getLocation().clone().add(
                                random.nextDouble() * 12 - 6,
                                25,
                                random.nextDouble() * 12 - 6
                            );
                            
                            // –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –Ω–µ–±–µ
                            world.spawnParticle(Particle.FLAME, meteorLoc, 30, 2, 2, 2, 0.1);
                            world.spawnParticle(Particle.SMOKE_LARGE, meteorLoc, 20, 1, 1, 1, 0.05);
                            
                            Fireball meteor = world.spawn(meteorLoc, Fireball.class);
                            meteor.setDirection(new Vector(0, -1, 0));
                            meteor.setYield(3.5f);
                            meteor.setIsIncendiary(false); // –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–≥–Ω—è
                            
                            // –ó–≤—É–∫ –ø–∞–¥–∞—é—â–µ–≥–æ –º–µ—Ç–µ–æ—Ä–∏—Ç–∞
                            world.playSound(meteorLoc, Sound.ENTITY_FIREWORK_ROCKET_TWINKLE, 1.0f, 0.5f);
                        }
                    }
                    
                    // –ó–≤—É–∫ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–µ—Ç–µ–æ—Ä–∏—Ç–∞
                    if (meteorIndex % 3 == 0) {
                        world.playSound(bossLoc, Sound.ENTITY_WITHER_SHOOT, 1.5f, 0.8f);
                    }
                }
            }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), i * 8L);
        }
    }
    
    private void soulScream() {
        List<Player> nearbyPlayers = getNearbyPlayers(40);
        if (nearbyPlayers.isEmpty()) return;
        
        World world = bossEntity.getWorld();
        Location bossLoc = bossEntity.getLocation();
        
        // –ú–û–©–ù–´–ï –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        world.spawnParticle(Particle.SOUL, bossLoc, 200, 5, 5, 5, 0.3);
        world.spawnParticle(Particle.SOUL_FIRE_FLAME, bossLoc, 150, 4, 4, 4, 0.2);
        world.spawnParticle(Particle.SMOKE_LARGE, bossLoc, 100, 4, 4, 4, 0.2);
        world.spawnParticle(Particle.REDSTONE, bossLoc, 80, 4, 4, 4,
            new Particle.DustOptions(org.bukkit.Color.fromRGB(50, 0, 50), 2.5f));
        
        // –ó–≤—É–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        world.playSound(bossLoc, Sound.ENTITY_WITHER_AMBIENT, 3.0f, 0.3f);
        world.playSound(bossLoc, Sound.ENTITY_VEX_AMBIENT, 2.0f, 0.5f);
        world.playSound(bossLoc, Sound.ENTITY_PHANTOM_AMBIENT, 2.5f, 0.3f);
        world.playSound(bossLoc, Sound.AMBIENT_SOUL_SAND_VALLEY_MOOD, 2.0f, 0.8f);
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º
        for (Player player : nearbyPlayers) {
            player.sendTitle(ChatColor.DARK_PURPLE + "" + ChatColor.BOLD + "üíÄ –î–£–®–ï–†–ê–ó–î–ò–†–ê–Æ–©–ò–ô –ö–†–ò–ö! üíÄ", 
                ChatColor.RED + "–ì–æ—Ç–æ–≤–∏—Ç—Å—è —É–∂–∞—Å–∞—é—â–∞—è –∞—Ç–∞–∫–∞!", 10, 60, 20);
        }
        
        // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã - –ú–û–©–ù–´–ô –∫—Ä–∏–∫
        new BukkitRunnable() {
            @Override
            public void run() {
                // –≠–ü–ò–ß–ï–°–ö–ò–ï —ç—Ñ—Ñ–µ–∫—Ç—ã –∫—Ä–∏–∫–∞
                world.spawnParticle(Particle.SOUL, bossLoc, 500, 20, 20, 20, 0.5);
                world.spawnParticle(Particle.SOUL_FIRE_FLAME, bossLoc, 300, 15, 15, 15, 0.4);
                world.spawnParticle(Particle.SMOKE_LARGE, bossLoc, 200, 12, 12, 12, 0.3);
                world.spawnParticle(Particle.SPELL_WITCH, bossLoc, 150, 10, 10, 10, 0.3);
                world.spawnParticle(Particle.REDSTONE, bossLoc, 100, 10, 10, 10,
                    new Particle.DustOptions(org.bukkit.Color.fromRGB(100, 0, 100), 3.0f));
                
                // –°–æ–∑–¥–∞–µ–º –¥—É—à–µ–≤–Ω—ã–µ –≤–æ–ª–Ω—ã
                createSoulWaves(bossLoc, 50.0);
                
                // –ú–û–©–ù–ï–ô–®–ò–ï –∑–≤—É–∫–∏ –∫—Ä–∏–∫–∞
                world.playSound(bossLoc, Sound.ENTITY_WITHER_DEATH, 3.0f, 0.1f);
                world.playSound(bossLoc, Sound.ENTITY_ENDER_DRAGON_DEATH, 2.5f, 0.3f);
                world.playSound(bossLoc, Sound.ENTITY_VEX_DEATH, 3.0f, 0.2f);
                world.playSound(bossLoc, Sound.ENTITY_PHANTOM_DEATH, 2.0f, 0.4f);
                world.playSound(bossLoc, Sound.AMBIENT_SOUL_SAND_VALLEY_MOOD, 3.0f, 0.5f);
                
                // –í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –≤—Å–µ—Ö –±–ª–∏–∂–∞–π—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
                for (Player player : nearbyPlayers) {
                    if (player.isOnline() && player.getLocation().distance(bossEntity.getLocation()) <= 45) {
                        double distance = player.getLocation().distance(bossEntity.getLocation());
                        
                        // –£—Ä–æ–Ω –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–±–ª–∏–∂–µ = –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞)
                        double damage = Math.max(2.0, 12.0 - (distance * 0.3));
                        player.damage(damage);
                        
                        // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
                        player.addPotionEffect(new PotionEffect(PotionEffectType.WITHER, 100, 1)); // 5 —Å–µ–∫—É–Ω–¥ –∏—Å—Å—É—à–µ–Ω–∏—è
                        player.addPotionEffect(new PotionEffect(PotionEffectType.WEAKNESS, 120, 1)); // 6 —Å–µ–∫—É–Ω–¥ —Å–ª–∞–±–æ—Å—Ç–∏
                        player.addPotionEffect(new PotionEffect(PotionEffectType.SLOW, 80, 2)); // 4 —Å–µ–∫—É–Ω–¥—ã —Å–∏–ª—å–Ω–æ–≥–æ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
                        player.addPotionEffect(new PotionEffect(PotionEffectType.CONFUSION, 100, 1)); // 5 —Å–µ–∫—É–Ω–¥ –¥–µ–∑–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
                        player.addPotionEffect(new PotionEffect(PotionEffectType.HUNGER, 200, 2)); // 10 —Å–µ–∫—É–Ω–¥ –≥–æ–ª–æ–¥–∞
                        
                        // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –∏–≥—Ä–æ–∫–µ
                        Location playerLoc = player.getLocation();
                        world.spawnParticle(Particle.SOUL, playerLoc, 50, 2, 2, 2, 0.1);
                        world.spawnParticle(Particle.SOUL_FIRE_FLAME, playerLoc, 30, 1, 2, 1, 0.1);
                        world.spawnParticle(Particle.SMOKE_LARGE, playerLoc, 20, 1, 1, 1, 0.05);
                        
                        // –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –æ—Ç –±–æ—Å—Å–∞
                        Vector knockback = player.getLocation().toVector().subtract(bossEntity.getLocation().toVector()).normalize();
                        knockback.multiply(2.0); // –°–∏–ª–∞ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è
                        knockback.setY(0.8); // –ü–æ–¥–Ω–∏–º–∞–µ–º –≤–≤–µ—Ä—Ö
                        player.setVelocity(knockback);
                        
                        player.sendTitle(ChatColor.DARK_RED + "üíÄ –î–£–®–ï–í–ù–ê–Ø –ë–û–õ–¨! üíÄ", 
                            ChatColor.GRAY + "–ö—Ä–∏–∫ —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç –≤–∞—à—É –¥—É—à—É!", 10, 80, 20);
                        
                        // –ó–≤—É–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                        world.playSound(playerLoc, Sound.ENTITY_VEX_HURT, 2.0f, 0.5f);
                        world.playSound(playerLoc, Sound.ENTITY_PHANTOM_HURT, 1.5f, 0.8f);
                    }
                }
            }
        }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), 60L); // 3 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
    }
    
    private void createSoulWaves(Location center, double maxRadius) {
        World world = center.getWorld();
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        
        // –°–æ–∑–¥–∞–µ–º 3 –≤–æ–ª–Ω—ã —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
        for (int wave = 1; wave <= 3; wave++) {
            final int waveNumber = wave;
            final double waveSpeed = 1.0 + (wave * 0.5); // –ö–∞–∂–¥–∞—è –≤–æ–ª–Ω–∞ –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
            
            new BukkitRunnable() {
                double radius = 0;
                int ticks = 0;
                
                @Override
                public void run() {
                    if (ticks > 60 || radius > maxRadius) { // 3 —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ maxRadius –±–ª–æ–∫–æ–≤
                        this.cancel();
                        return;
                    }
                    
                    int points = (int) (radius * 4);
                    for (int i = 0; i < points; i++) {
                        double angle = 2 * Math.PI * i / points;
                        double x = center.getX() + radius * Math.cos(angle);
                        double z = center.getZ() + radius * Math.sin(angle);
                        double y = center.getY() + 0.5 + Math.sin(ticks * 0.2) * 0.3; // –í–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                        
                        Location particleLoc = new Location(world, x, y, z);
                        
                        // –†–∞–∑–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–æ–ª–Ω
                        switch (waveNumber) {
                            case 1:
                                world.spawnParticle(Particle.SOUL, particleLoc, 1, 0, 0, 0, 0);
                                break;
                            case 2:
                                world.spawnParticle(Particle.SOUL_FIRE_FLAME, particleLoc, 1, 0, 0, 0, 0);
                                break;
                            case 3:
                                world.spawnParticle(Particle.REDSTONE, particleLoc, 1, 0, 0, 0, 
                                    new Particle.DustOptions(org.bukkit.Color.fromRGB(75, 0, 75), 1.5f));
                                break;
                        }
                    }
                    
                    radius += waveSpeed;
                    ticks++;
                }
            }.runTaskTimer(plugin, waveNumber * 5L, 1L); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤–æ–ª–Ω–∞–º–∏
        }
    }
    
    // üíÄ –°–ú–ï–†–¢–ï–õ–¨–ù–´–ô –í–ó–ì–õ–Ø–î –¢–ï–ú–ù–û–ì–û –ü–û–í–ï–õ–ò–¢–ï–õ–Ø - —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞ 5 —É—Ä–æ–≤–Ω—è
    private void deathGaze() {
        List<Player> nearbyPlayers = getNearbyPlayers(30.0);
        if (nearbyPlayers.isEmpty()) return;
        
        World world = bossEntity.getWorld();
        Location bossLoc = bossEntity.getLocation();
        double multiplier = config.getParticlesMultiplier();
        
        // –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –ò–ì–†–û–ö–ê–ú
        for (Player player : nearbyPlayers) {
            player.sendTitle(ChatColor.DARK_RED + "üíÄ –°–ú–ï–†–¢–ï–õ–¨–ù–´–ô –í–ó–ì–õ–Ø–î! üíÄ", 
                ChatColor.RED + "–¢–µ–º–Ω—ã–π –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –Ω–∞–ø—Ä–∞–≤–∏–ª –Ω–∞ –≤–∞—Å –≤–∑–≥–ª—è–¥ —Å–º–µ—Ä—Ç–∏!", 10, 60, 10);
            player.playSound(player.getLocation(), Sound.AMBIENT_SOUL_SAND_VALLEY_MOOD, 2.0f, 0.3f);
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        world.spawnParticle(Particle.SOUL, bossLoc.clone().add(0, 2, 0), 
            (int)(200 * multiplier), 5, 3, 5, 0.3);
        world.spawnParticle(Particle.REDSTONE, bossLoc, (int)(100 * multiplier), 3, 3, 3,
            new Particle.DustOptions(org.bukkit.Color.BLACK, 3.0f));
        
        world.playSound(bossLoc, Sound.ENTITY_WITHER_AMBIENT, 3.0f, 0.1f);
        world.playSound(bossLoc, Sound.AMBIENT_SOUL_SAND_VALLEY_ADDITIONS, 2.0f, 0.5f);
        
        // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –≤—Å–µ–º –≤ –ø—Ä—è–º–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        BukkitTask gazeTask = new BukkitRunnable() {
            @Override
            public void run() {
                if (bossEntity == null || bossEntity.isDead()) {
                    cancel();
                    return;
                }
                
                for (Player player : nearbyPlayers) {
                    if (!player.isOnline()) continue;
                    
                    Location playerLoc = player.getLocation();
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—É—é –≤–∏–¥–∏–º–æ—Å—Ç—å
                    if (bossLoc.distance(playerLoc) <= 30.0 && 
                        world.rayTraceBlocks(bossLoc, playerLoc.toVector().subtract(bossLoc.toVector()), 30.0) == null) {
                        
                        // –°–ú–ï–†–¢–ï–õ–¨–ù–´–ô –£–†–û–ù (—É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å)
                        double baseDamage = 12.0;
                        double damage = baseDamage * config.getDifficultyDamageMultiplier();
                        player.damage(damage);
                        
                        // –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
                        player.addPotionEffect(new PotionEffect(PotionEffectType.WEAKNESS, 200, 2));
                        player.addPotionEffect(new PotionEffect(PotionEffectType.SLOW, 100, 1));
                        player.addPotionEffect(new PotionEffect(PotionEffectType.BLINDNESS, 60, 0));
                        
                        // –õ—É—á —Å–º–µ—Ä—Ç–∏ –∫ –∏–≥—Ä–æ–∫—É
                        createDeathRay(bossLoc, playerLoc);
                        
                        player.sendMessage(ChatColor.DARK_RED + "üíÄ –í–∑–≥–ª—è–¥ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è –ø—Ä–æ–Ω–∑–∏–ª –≤–∞—à—É –¥—É—à—É!");
                        player.playSound(playerLoc, Sound.ENTITY_WITHER_HURT, 2.0f, 0.3f);
                    }
                }
                
                // –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–∑—Ä—ã–≤ —Ç–µ–º–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
                world.createExplosion(bossLoc, 6.0f, false, false);
                world.spawnParticle(Particle.SOUL_FIRE_FLAME, bossLoc, (int)(150 * multiplier), 6, 4, 6, 0.3);
            }
        }.runTaskLater(plugin, 60L); // 3 —Å–µ–∫—É–Ω–¥—ã
        
        registerTask(gazeTask);
    }
    
    // ‚ö° –¶–ï–ü–ù–ê–Ø –ú–û–õ–ù–ò–Ø –•–ê–û–°–ê
    private void chaosLightning() {
        List<Player> nearbyPlayers = getNearbyPlayers(35.0);
        if (nearbyPlayers.isEmpty()) return;
        
        World world = bossEntity.getWorld();
        Location bossLoc = bossEntity.getLocation();
        double multiplier = config.getParticlesMultiplier();
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        for (Player player : nearbyPlayers) {
            player.sendTitle(ChatColor.YELLOW + "‚ö° –¶–ï–ü–ù–ê–Ø –ú–û–õ–ù–ò–Ø! ‚ö°", 
                ChatColor.RED + "–•–∞–æ—Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –≤–æ–∑–¥—É—Ö!", 10, 40, 10);
        }
        
        world.playSound(bossLoc, Sound.ENTITY_LIGHTNING_BOLT_THUNDER, 3.0f, 0.8f);
        world.spawnParticle(Particle.ELECTRIC_SPARK, bossLoc.clone().add(0, 5, 0), 
            (int)(300 * multiplier), 8, 8, 8, 0.5);
        
        // –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–Ω—É—é –º–æ–ª–Ω–∏—é —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫—É–Ω–¥—ã
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        BukkitTask lightningTask = new BukkitRunnable() {
            @Override
            public void run() {
                if (bossEntity == null || bossEntity.isDead()) {
                    cancel();
                    return;
                }
                
                // –ë—å–µ–º –º–æ–ª–Ω–∏–µ–π –≤ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                if (!nearbyPlayers.isEmpty()) {
                    Player firstTarget = nearbyPlayers.get(random.nextInt(nearbyPlayers.size()));
                    Location currentLoc = firstTarget.getLocation();
                    
                    // –¶–µ–ø—å –∏–∑ 5 –º–æ–ª–Ω–∏–π
                    for (int i = 0; i < 5; i++) {
                        world.strikeLightning(currentLoc);
                        
                        // –£—Ä–æ–Ω –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
                        for (Entity entity : world.getNearbyEntities(currentLoc, 4, 4, 4)) {
                            if (entity instanceof Player) {
                                Player player = (Player) entity;
                                double damage = 8.0 * config.getDifficultyDamageMultiplier();
                                player.damage(damage);
                                player.addPotionEffect(new PotionEffect(PotionEffectType.CONFUSION, 100, 1));
                                
                                player.sendMessage(ChatColor.YELLOW + "‚ö° –í–∞—Å –ø–æ—Ä–∞–∑–∏–ª–∞ —Ü–µ–ø–Ω–∞—è –º–æ–ª–Ω–∏—è —Ö–∞–æ—Å–∞!");
                            }
                        }
                        
                        // –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ü–µ–ª—å —Ä—è–¥–æ–º —Å —Ç–µ–∫—É—â–µ–π
                        Player nextTarget = null;
                        double minDistance = Double.MAX_VALUE;
                        for (Player player : nearbyPlayers) {
                            if (player != firstTarget && player.getLocation().distance(currentLoc) < 15.0) {
                                double distance = player.getLocation().distance(currentLoc);
                                if (distance < minDistance) {
                                    minDistance = distance;
                                    nextTarget = player;
                                }
                            }
                        }
                        
                        if (nextTarget != null) {
                            currentLoc = nextTarget.getLocation();
                        } else {
                            // –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–∏ —Ä—è–¥–æ–º, –±—å–µ–º –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ—Å—Ç–æ
                            currentLoc = currentLoc.clone().add(
                                random.nextDouble() * 10 - 5,
                                0,
                                random.nextDouble() * 10 - 5
                            );
                        }
                        
                        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —É–¥–∞—Ä–∞–º–∏
                        try {
                            Thread.sleep(300);
                        } catch (InterruptedException e) {
                            break;
                        }
                    }
                }
            }
        }.runTaskLater(plugin, 30L);
        
        registerTask(lightningTask);
    }
    
    // üåÄ –í–ò–•–†–¨ –¢–¨–ú–´
    private void darknessVortex() {
        List<Player> nearbyPlayers = getNearbyPlayers(40.0);
        if (nearbyPlayers.isEmpty()) return;
        
        World world = bossEntity.getWorld();
        Location centerLoc = bossEntity.getLocation().clone().add(0, 10, 0);
        double multiplier = config.getParticlesMultiplier();
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        for (Player player : nearbyPlayers) {
            player.sendTitle(ChatColor.DARK_PURPLE + "üåÄ –í–ò–•–†–¨ –¢–¨–ú–´! üåÄ", 
                ChatColor.RED + "–¢–µ–º–Ω—ã–π –≤–∏—Ö—Ä—å –∑–∞—Å–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –∂–∏–≤–æ–µ!", 10, 80, 10);
        }
        
        world.playSound(centerLoc, Sound.ENTITY_WITHER_AMBIENT, 3.0f, 0.1f);
        world.playSound(centerLoc, Sound.AMBIENT_SOUL_SAND_VALLEY_LOOP, 2.0f, 0.3f);
        
        // –°–æ–∑–¥–∞–µ–º –≤–∏—Ö—Ä—å –Ω–∞ 8 —Å–µ–∫—É–Ω–¥
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        BukkitTask vortexTask = new BukkitRunnable() {
            private int ticks = 0;
            
            @Override
            public void run() {
                if (ticks > 160 || bossEntity == null || bossEntity.isDead()) { // 8 —Å–µ–∫—É–Ω–¥
                    cancel();
                    return;
                }
                
                // –í—Ä–∞—â–∞—é—â–∏–µ—Å—è —á–∞—Å—Ç–∏—Ü—ã –≤–∏—Ö—Ä—è
                int particles = (int)(200 * multiplier);
                for (int i = 0; i < particles; i++) {
                    double angle = (ticks * 0.3 + i * 360.0 / particles) * Math.PI / 180.0;
                    double radius = 15.0 - (ticks * 0.05); // –°—É–∂–∞—é—â–∏–π—Å—è –≤–∏—Ö—Ä—å
                    if (radius < 3.0) radius = 3.0;
                    
                    double x = centerLoc.getX() + radius * Math.cos(angle);
                    double z = centerLoc.getZ() + radius * Math.sin(angle);
                    double y = centerLoc.getY() - ticks * 0.1; // –û–ø—É—Å–∫–∞—é—â–∏–π—Å—è –≤–∏—Ö—Ä—å
                    
                    Location particleLoc = new Location(world, x, y, z);
                    world.spawnParticle(Particle.SOUL, particleLoc, 1, 0, 0, 0, 0);
                    world.spawnParticle(Particle.SMOKE_LARGE, particleLoc, 1, 0, 0, 0, 0);
                }
                
                // –ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –∫ —Ü–µ–Ω—Ç—Ä—É –∏ –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                for (Player player : nearbyPlayers) {
                    if (!player.isOnline()) continue;
                    
                    Location playerLoc = player.getLocation();
                    double distance = playerLoc.distance(centerLoc);
                    
                    if (distance <= 20.0) {
                        // –ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ–º –∫ —Ü–µ–Ω—Ç—Ä—É
                        Vector direction = centerLoc.toVector().subtract(playerLoc.toVector()).normalize();
                        Vector pullForce = direction.multiply(0.8);
                        player.setVelocity(pullForce);
                        
                        // –£—Ä–æ–Ω –∫–∞–∂–¥—ã–µ 20 —Ç–∏–∫–æ–≤ (1 —Å–µ–∫—É–Ω–¥–∞)
                        if (ticks % 20 == 0) {
                            double damage = 3.0 * config.getDifficultyDamageMultiplier();
                            player.damage(damage);
                            
                            // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–∏—Ö—Ä—è
                            if (distance <= 5.0) {
                                player.addPotionEffect(new PotionEffect(PotionEffectType.WITHER, 40, 1));
                                player.addPotionEffect(new PotionEffect(PotionEffectType.CONFUSION, 60, 2));
                            }
                        }
                        
                        // –≠—Ñ—Ñ–µ–∫—Ç—ã –≤–æ–∫—Ä—É–≥ –∏–≥—Ä–æ–∫–∞
                        world.spawnParticle(Particle.REDSTONE, playerLoc.clone().add(0, 1, 0), 
                            (int)(10 * multiplier), 1, 1, 1, 
                            new Particle.DustOptions(org.bukkit.Color.PURPLE, 1.5f));
                    }
                }
                
                ticks++;
            }
        }.runTaskTimer(plugin, 0L, 1L);
        
        registerTask(vortexTask);
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª—É—á–∞ —Å–º–µ—Ä—Ç–∏
    private void createDeathRay(Location from, Location to) {
        World world = from.getWorld();
        Vector direction = to.toVector().subtract(from.toVector()).normalize();
        double distance = from.distance(to);
        double multiplier = config.getParticlesMultiplier();
        
        // –°–æ–∑–¥–∞–µ–º –ª—É—á –∏–∑ —á–∞—Å—Ç–∏—Ü
        for (double d = 0; d < distance; d += 0.5) {
            Location rayLoc = from.clone().add(direction.clone().multiply(d));
            world.spawnParticle(Particle.REDSTONE, rayLoc, (int)(5 * multiplier), 0.1, 0.1, 0.1,
                new Particle.DustOptions(org.bukkit.Color.BLACK, 2.0f));
            world.spawnParticle(Particle.SOUL, rayLoc, (int)(3 * multiplier), 0.1, 0.1, 0.1, 0);
        }
        
        world.playSound(from, Sound.ENTITY_WITHER_SHOOT, 1.5f, 0.3f);
    }
    
    private List<Player> getNearbyPlayers(double radius) {
        List<Player> nearbyPlayers = new ArrayList<>();
        for (Entity entity : bossEntity.getNearbyEntities(radius, radius, radius)) {
            if (entity instanceof Player) {
                Player player = (Player) entity;
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò—Å–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
                if (player.getGameMode() == org.bukkit.GameMode.SPECTATOR && !config.shouldAttackSpectators()) {
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞)
                }
                
                if (player.getGameMode() == org.bukkit.GameMode.CREATIVE && !config.shouldAttackCreative()) {
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞)
                }
                
                // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (vanish –ø–ª–∞–≥–∏–Ω—ã)
                if (config.shouldIgnoreVanished() && !player.getCanPickupItems() && player.isInvisible()) {
                    continue; // –í–æ–∑–º–æ–∂–Ω–æ –∏–≥—Ä–æ–∫ –≤ vanish
                }
                
                nearbyPlayers.add(player);
            }
        }
        return nearbyPlayers;
    }
    
    private void updateBossBarDisplay() {
        double currentHealth = bossEntity.getHealth();
        double maxHealth = bossEntity.getAttribute(Attribute.GENERIC_MAX_HEALTH).getValue();
        double healthPercentage = currentHealth / maxHealth;
        
        bossBar.setProgress(healthPercentage);
        
        String phaseName = getPhaseDisplayName();
        String title = ChatColor.DARK_RED + "‚ö° –¢–ï–ú–ù–´–ô –ü–û–í–ï–õ–ò–¢–ï–õ–¨ ‚ö° " + phaseName;
        bossBar.setTitle(title);
    }
    
    private String getPhaseDisplayName() {
        switch (currentPhase) {
            case 1:
                return ChatColor.GREEN + "[–§–ê–ó–ê 1]";
            case 2:
                return ChatColor.YELLOW + "[–§–ê–ó–ê 2]";
            case 3:
                return ChatColor.RED + "[–§–ò–ù–ê–õ]";
            default:
                return "";
        }
    }
    
    private void handleBossDeath() {
        if (!isAlive) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        plugin.getLogger().info("üíÄ –°–ú–ï–†–¢–¨ –ë–û–°–°–ê: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...");
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –°–†–ê–ó–£
        cancelAllTasks();
        
        isAlive = false;
        World world = spawnLocation.getWorld();
        
        // PDC —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Å—Å–∞
        
        // –£–±–∏—Ä–∞–µ–º –±–æ—Å—Å–±–∞—Ä
        bossBar.removeAll();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ —Å–º–µ—Ä—Ç–∏ –±–æ—Å—Å–∞
        Location deathLoc = bossEntity.getLocation().clone();
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç—å –±–æ—Å—Å–∞
        if (bossEntity != null && !bossEntity.isDead()) {
            bossEntity.remove();
        }
        
        // –û–±—ä—è–≤–ª—è–µ–º –æ –ø–æ–±–µ–¥–µ —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–º
        List<Player> nearbyPlayers = getNearbyPlayers(100);
        for (Player player : nearbyPlayers) {
            player.sendTitle(ChatColor.GOLD + "üéâ –¢–ï–ú–ù–´–ô –ü–û–í–ï–õ–ò–¢–ï–õ–¨ –ü–û–í–ï–†–ñ–ï–ù! üéâ", 
                ChatColor.GREEN + "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã!", 20, 80, 20);
        }
        
        // –ù–ê–ß–ò–ù–ê–ï–ú –≠–ü–ò–ß–ï–°–ö–£–Æ –ê–ù–ò–ú–ê–¶–ò–Æ –°–ú–ï–†–¢–ò (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if (config.isDeathAnimationEnabled()) {
            startDeathAnimation(deathLoc, world);
        }
        
        // –î–†–û–ü–ê–ï–ú –ù–ê–ì–†–ê–î–´ –ò –û–ü–´–¢ –ß–ï–†–ï–ó –ù–ê–°–¢–†–û–ï–ù–ù–û–ï –í–†–ï–ú–Ø (–ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏)
        int delayTicks = config.isDeathAnimationEnabled() ? config.getDeathAnimationDuration() : 40; // 2 —Å–µ–∫—É–Ω–¥—ã –º–∏–Ω–∏–º—É–º
        new BukkitRunnable() {
            @Override
            public void run() {
                // –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥—Ä–æ–ø–µ
                List<Player> currentNearbyPlayers = getNearbyPlayers(100);
                for (Player player : currentNearbyPlayers) {
                    player.sendTitle(ChatColor.YELLOW + "üéÅ –ü–û–õ–£–ß–ï–ù–ò–ï –ù–ê–ì–†–ê–î! üéÅ", 
                        ChatColor.GREEN + "–ù–∞–≥—Ä–∞–¥—ã –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è!", 10, 60, 10);
                    player.playSound(player.getLocation(), Sound.ENTITY_PLAYER_LEVELUP, 2.0f, 1.5f);
                }
                
                // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥—Ä–æ–ø–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
                dropRewards(deathLoc);
                dropExperience(deathLoc);
            }
        }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), delayTicks);
        
        // –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Å—Å–∞ (–±—ã–ª–æ 10 —Å–µ–∫—É–Ω–¥ - —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ)
        new BukkitRunnable() {
            @Override
            public void run() {
                UniqueBossManager.setBossDefeated();
                
                // –£–±–∏—Ä–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–∞–Ω–∫–∞
                try {
                    org.bukkit.Chunk bossChunk = deathLoc.getChunk();
                    if (bossChunk.isForceLoaded()) {
                        bossChunk.setForceLoaded(false);
                        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
                        plugin.getLogger().info("üîß –£–±—Ä–∞–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–∞–Ω–∫–∞ –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏ –±–æ—Å—Å–∞: [" + 
                            bossChunk.getX() + ", " + bossChunk.getZ() + "]");
                    }
                } catch (Exception e) {
                    Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
                    plugin.getLogger().warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–∞: " + e.getMessage());
                }
            }
        }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), 40L); // 2 —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ 10
    }
    
    private void startDeathAnimation(Location deathLoc, World world) {
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        double multiplier = config.getParticlesMultiplier();
        
        // –§–ê–ó–ê 1: –ú–æ—â–Ω—ã–µ –≤–∑—Ä—ã–≤—ã –∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (0-3 —Å–µ–∫—É–Ω–¥—ã)
        
        // –ó–≤—É–∫–∏ —Å–º–µ—Ä—Ç–∏
        world.playSound(deathLoc, Sound.ENTITY_WITHER_DEATH, 3.0f, 0.3f);
        world.playSound(deathLoc, Sound.ENTITY_ENDER_DRAGON_DEATH, 2.5f, 0.5f);
        world.playSound(deathLoc, Sound.AMBIENT_CAVE, 2.0f, 0.3f);
        
        // –°–µ—Ä–∏—è –º–æ—â–Ω—ã—Ö –≤–∑—Ä—ã–≤–æ–≤
        for (int i = 0; i < 8; i++) {
            new BukkitRunnable() {
                @Override
                public void run() {
                    Location explosionLoc = deathLoc.clone().add(
                        random.nextDouble() * 8 - 4,
                        random.nextDouble() * 3,
                        random.nextDouble() * 8 - 4
                    );
                    world.createExplosion(explosionLoc, 4.0f, false, false);
                    
                    // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∑—Ä—ã–≤–µ
                    world.spawnParticle(Particle.SOUL, explosionLoc, (int)(50 * multiplier), 2, 2, 2, 0.2);
                    world.spawnParticle(Particle.SMOKE_LARGE, explosionLoc, (int)(30 * multiplier), 1.5, 1.5, 1.5, 0.1);
                }
            }.runTaskLater(plugin, i * 8L);
        }
        
        // –§–ê–ó–ê 2: –î—É—à–µ–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ —Ç–µ–º–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è (3-5 —Å–µ–∫—É–Ω–¥)
        new BukkitRunnable() {
            private int ticks = 0;
            
            @Override
            public void run() {
                if (ticks > 40) { // 2 —Å–µ–∫—É–Ω–¥—ã
                    this.cancel();
                    return;
                }
                
                // –ü—É–ª—å—Å–∏—Ä—É—é—â–∏–µ –¥—É—à–µ–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
                world.spawnParticle(Particle.SOUL, deathLoc.clone().add(0, 3, 0), 
                    (int)(100 * multiplier), 4, 3, 4, 0.3);
                world.spawnParticle(Particle.SOUL_FIRE_FLAME, deathLoc.clone().add(0, 4, 0), 
                    (int)(80 * multiplier), 3, 2, 3, 0.2);
                world.spawnParticle(Particle.SPELL_WITCH, deathLoc.clone().add(0, 2, 0), 
                    (int)(60 * multiplier), 3, 2, 3, 0.2);
                
                // –ö—Ä—É–≥–∏ —Ç–µ–º–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
                if (ticks % 10 == 0) {
                    createDarkEnergyCircle(deathLoc.clone().add(0, 1, 0));
                    world.playSound(deathLoc, Sound.ENTITY_VEX_DEATH, 2.0f, 0.5f);
                }
                
                ticks++;
            }
        }.runTaskTimer(plugin, 60L, 1L); // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        
        // –§–ê–ó–ê 3: –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–º–ø–ª–æ–∑–∏—è –∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ (5-7 —Å–µ–∫—É–Ω–¥)
        new BukkitRunnable() {
            @Override
            public void run() {
                // –ú–æ—â–Ω–∞—è –∏–º–ø–ª–æ–∑–∏—è
                world.playSound(deathLoc, Sound.ENTITY_GENERIC_EXPLODE, 3.0f, 0.1f);
                world.playSound(deathLoc, Sound.ENTITY_LIGHTNING_BOLT_THUNDER, 2.0f, 2.0f);
                
                // –û–≥—Ä–æ–º–Ω—ã–π –≤–∑—Ä—ã–≤ —á–∞—Å—Ç–∏—Ü
                world.spawnParticle(Particle.EXPLOSION_LARGE, deathLoc, (int)(200 * multiplier), 8, 8, 8, 0.3);
                world.spawnParticle(Particle.SOUL, deathLoc, (int)(300 * multiplier), 10, 10, 10, 0.5);
                world.spawnParticle(Particle.PORTAL, deathLoc, (int)(150 * multiplier), 6, 6, 6, 0.3);
                world.spawnParticle(Particle.REDSTONE, deathLoc, (int)(100 * multiplier), 8, 8, 8,
                    new Particle.DustOptions(org.bukkit.Color.BLACK, 3.0f));
                
                // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–æ–ª–Ω–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
                createDeathWave(deathLoc, 20.0);
                
                // –ú–æ–ª–Ω–∏–∏ –≤–æ–∫—Ä—É–≥
                for (int i = 0; i < 12; i++) {
                    double angle = 2 * Math.PI * i / 12;
                    Location lightningLoc = deathLoc.clone().add(
                        Math.cos(angle) * 6,
                        0,
                        Math.sin(angle) * 6
                    );
                    world.strikeLightningEffect(lightningLoc);
                }
            }
        }.runTaskLater(plugin, 100L); // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        
        // –§–ê–ó–ê 4: –ó–∞—Ç—É—Ö–∞–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥—Ä–æ–ø—É (7-8 —Å–µ–∫—É–Ω–¥)
        new BukkitRunnable() {
            @Override
            public void run() {
                world.playSound(deathLoc, Sound.UI_TOAST_CHALLENGE_COMPLETE, 2.0f, 1.0f);
                world.playSound(deathLoc, Sound.ENTITY_PLAYER_LEVELUP, 1.5f, 1.2f);
                
                // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–∞—Å–∏–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–µ—Ä–µ–¥ –¥—Ä–æ–ø–æ–º
                world.spawnParticle(Particle.TOTEM, deathLoc.clone().add(0, 5, 0), 
                    (int)(100 * multiplier), 5, 3, 5, 0.2);
                world.spawnParticle(Particle.FIREWORKS_SPARK, deathLoc.clone().add(0, 6, 0), 
                    (int)(80 * multiplier), 4, 2, 4, 0.1);
            }
        }.runTaskLater(plugin, 140L); // –ß–µ—Ä–µ–∑ 7 —Å–µ–∫—É–Ω–¥
    }
    
    private void createDeathWave(Location center, double maxRadius) {
        World world = center.getWorld();
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        double multiplier = config.getParticlesMultiplier();
        
        new BukkitRunnable() {
            double radius = 0;
            
            @Override
            public void run() {
                if (radius > maxRadius) {
                    this.cancel();
                    return;
                }
                
                int points = (int) (radius * 4 * multiplier);
                for (int i = 0; i < points; i++) {
                    double angle = 2 * Math.PI * i / points;
                    double x = center.getX() + radius * Math.cos(angle);
                    double z = center.getZ() + radius * Math.sin(angle);
                    Location particleLoc = new Location(world, x, center.getY() + 0.5, z);
                    
                    world.spawnParticle(Particle.SOUL, particleLoc, 1, 0, 0, 0, 0);
                    world.spawnParticle(Particle.REDSTONE, particleLoc, 1, 0, 0, 0, 
                        new Particle.DustOptions(org.bukkit.Color.fromRGB(50, 0, 50), 2.0f));
                }
                
                radius += 1.0;
            }
        }.runTaskTimer(plugin, 0L, 2L);
    }
    
    private void dropRewards(Location deathLoc) {
        World world = deathLoc.getWorld();
        
        // –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
        List<ItemStack> rewards = createUniqueRewards();
        
        // –ö–†–ê–°–ò–í–ê–Ø –∞–Ω–∏–º–∞—Ü–∏—è –¥—Ä–æ–ø–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        for (int i = 0; i < rewards.size(); i++) {
            final ItemStack reward = rewards.get(i);
            final int index = i;
            
            new BukkitRunnable() {
                @Override
                public void run() {
                    // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–∞–¥–∏—É—Å–µ 8 –±–ª–æ–∫–æ–≤
                    double angle = 2 * Math.PI * index / rewards.size(); // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫—Ä—É–≥—É
                    double radius = 3.0 + random.nextDouble() * 5.0; // –†–∞–¥–∏—É—Å –æ—Ç 3 –¥–æ 8 –±–ª–æ–∫–æ–≤
                    
                    Location dropLoc = deathLoc.clone().add(
                        Math.cos(angle) * radius,
                        3 + random.nextDouble() * 2, // –í—ã—Å–æ—Ç–∞ –æ—Ç 3 –¥–æ 5 –±–ª–æ–∫–æ–≤
                        Math.sin(angle) * radius
                    );
                    
                    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ —Ç–æ—á–∫–µ –ø–æ—è–≤–ª–µ–Ω–∏—è
                    world.spawnParticle(Particle.PORTAL, dropLoc, 20, 0.5, 0.5, 0.5, 0.1);
                    world.spawnParticle(Particle.SPELL_WITCH, dropLoc, 15, 0.3, 0.3, 0.3, 0.1);
                    world.spawnParticle(Particle.FIREWORKS_SPARK, dropLoc, 10, 0.2, 0.2, 0.2, 0.05);
                    world.spawnParticle(Particle.TOTEM, dropLoc, 8, 0.3, 0.3, 0.3, 0.05);
                    
                    // –ó–≤—É–∫ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
                    world.playSound(dropLoc, Sound.ENTITY_ITEM_PICKUP, 1.5f, 0.8f + (index * 0.1f));
                    world.playSound(dropLoc, Sound.BLOCK_ENCHANTMENT_TABLE_USE, 1.0f, 1.2f);
                    
                    // –î—Ä–æ–ø–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                    world.dropItemNaturally(dropLoc, reward);
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ—Å–ª–µ –¥—Ä–æ–ø–∞
                    new BukkitRunnable() {
                        @Override
                        public void run() {
                            world.spawnParticle(Particle.VILLAGER_HAPPY, dropLoc, 12, 1, 1, 1, 0.1);
                            world.spawnParticle(Particle.REDSTONE, dropLoc, 8, 0.5, 0.5, 0.5, 0,
                                new Particle.DustOptions(org.bukkit.Color.YELLOW, 1.5f));
                        }
                    }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), 10L);
                }
            }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), index * 8L); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        }
        
        // –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–≤—É–∫–∏ –¥—Ä–æ–ø–∞
        new BukkitRunnable() {
            @Override
            public void run() {
                world.playSound(deathLoc, Sound.UI_TOAST_CHALLENGE_COMPLETE, 2.0f, 1.0f);
                world.playSound(deathLoc, Sound.ENTITY_PLAYER_LEVELUP, 2.0f, 1.2f);
                
                // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–æ–ª–Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
                world.spawnParticle(Particle.FIREWORKS_SPARK, deathLoc, 100, 8, 3, 8, 0.2);
                world.spawnParticle(Particle.TOTEM, deathLoc, 50, 6, 2, 6, 0.1);
            }
        }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), rewards.size() * 8L + 20L);
    }
    
    private List<ItemStack> createUniqueRewards() {
        List<ItemStack> rewards = new ArrayList<>();
        
        // –û–°–ù–û–í–ù–´–ï –û–°–ö–û–õ–ö–ò –¢–ï–ú–ù–û–ì–û –ü–û–í–ï–õ–ò–¢–ï–õ–Ø (–¥–∏–∞–ø–∞–∑–æ–Ω)
        int minFragments = config.getFragmentsMinAmount();
        int maxFragments = config.getFragmentsMaxAmount();
        int baseFragments = minFragments + random.nextInt(maxFragments - minFragments + 1);
        
        // –ë–û–ù–£–° –ó–ê –ö–û–õ–ò–ß–ï–°–¢–í–û –ò–ì–†–û–ö–û–í
        if (config.isPlayerCountBonusEnabled()) {
            List<Player> nearbyPlayers = getNearbyPlayers(config.getPlayerCountBonusRadius());
            int playerCount = Math.min(nearbyPlayers.size(), config.getPlayerCountBonusMaxPlayers());
            double bonusMultiplier = playerCount * config.getPlayerCountBonusMultiplier();
            int playerBonus = (int) Math.floor(baseFragments * bonusMultiplier);
            baseFragments += playerBonus;
            
            if (playerBonus > 0) {
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ –±–æ–Ω—É—Å–µ
                for (Player player : nearbyPlayers) {
                    player.sendMessage(ChatColor.GOLD + "üéâ –ë–æ–Ω—É—Å –∑–∞ –∫–æ–º–∞–Ω–¥—É: +" + playerBonus + " –æ—Å–∫–æ–ª–∫–æ–≤!");
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Å–∫–æ–ª–∫–∏
        for (int i = 0; i < baseFragments; i++) {
            rewards.add(createDarkFragment());
        }
        
        // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–°–ö–û–õ–ö–ò (—Å —à–∞–Ω—Å–æ–º)
        if (config.isExtraFragmentsEnabled() && random.nextInt(100) < config.getExtraFragmentsChance()) {
            int extraMin = config.getExtraFragmentsMinAmount();
            int extraMax = config.getExtraFragmentsMaxAmount();
            int extraAmount = extraMin + random.nextInt(extraMax - extraMin + 1);
            
            for (int i = 0; i < extraAmount; i++) {
                rewards.add(createDarkFragment());
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Å–∫–æ–ª–∫–∞—Ö
            List<Player> nearbyPlayers = getNearbyPlayers(50);
            for (Player player : nearbyPlayers) {
                player.sendMessage(ChatColor.LIGHT_PURPLE + "‚ú® –£–¥–∞—á–∞! –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ +" + extraAmount + " –æ—Å–∫–æ–ª–∫–æ–≤!");
            }
        }
        
        // –†–ï–î–ö–ò–ï –ü–†–ï–î–ú–ï–¢–´ (—Å —à–∞–Ω—Å–æ–º)
        
        // –ù–µ–ª–æ–º–∞—é—â–∏–µ—Å—è —ç–ª–∏—Ç—Ä—ã
        if (random.nextInt(100) < config.getUnbreakableElytraChance()) {
            rewards.add(createUnbreakableElytra());
        }
        
        // –£—Å–∏–ª–µ–Ω–Ω—ã–π –º–µ—á
        if (random.nextInt(100) < config.getEnhancedSwordChance()) {
            rewards.add(createEnhancedSword());
        }
        
        // –ü–æ—Å–æ—Ö —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
        if (random.nextInt(100) < config.getTeleportStaffChance()) {
            rewards.add(createTeleportStaff());
        }
        
        // –¢–µ–Ω–µ–≤—ã–µ —Å–∞–ø–æ–≥–∏
        if (random.nextInt(100) < config.getShadowBootsChance()) {
            rewards.add(createShadowBoots());
        }
        
        // –ö—Ä–∏—Å—Ç–∞–ª–ª —Å–∏–ª—ã
        if (random.nextInt(100) < config.getPowerCrystalChance()) {
            rewards.add(createPowerCrystal());
        }
        
        // –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –¶–ï–ù–ù–´–ï –†–ï–°–£–†–°–´
        rewards.add(new ItemStack(Material.DIAMOND, 32));
        rewards.add(new ItemStack(Material.EMERALD, 16));
        rewards.add(new ItemStack(Material.GOLD_INGOT, 48));
        rewards.add(new ItemStack(Material.NETHERITE_INGOT, 8));
        rewards.add(new ItemStack(Material.ANCIENT_DEBRIS, 4));
        
        // –Ø–ô–¶–ê –ú–û–ë–û–í (—Å —à–∞–Ω—Å–æ–º)
        if (config.isMobEggsEnabled() && random.nextInt(100) < config.getMobEggsChance()) {
            int minAmount = config.getMobEggsMinAmount();
            int maxAmount = config.getMobEggsMaxAmount();
            int eggAmount = minAmount + random.nextInt(maxAmount - minAmount + 1);
            
            for (int i = 0; i < eggAmount; i++) {
                ItemStack mobEgg = createRandomMobEgg();
                if (mobEgg != null) {
                    rewards.add(mobEgg);
                }
            }
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ —è–π—Ü–∞—Ö –º–æ–±–æ–≤
            List<Player> nearbyPlayers = getNearbyPlayers(50);
            for (Player player : nearbyPlayers) {
                player.sendMessage(ChatColor.LIGHT_PURPLE + "ü•ö –£–¥–∞—á–∞! –í—ã–ø–∞–ª–æ " + eggAmount + " —è–∏—Ü –º–æ–±–æ–≤!");
            }
        }
        
        return rewards;
    }
    
    private ItemStack createRandomMobEgg() {
        // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∏—Ü –º–æ–±–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º –ø—Ä–∏–∑—ã–≤–∞—Ç–µ–ª–µ–π –∏ –¥—Ä—É–≥–∏—Ö –æ–ø–∞—Å–Ω—ã—Ö –º–æ–±–æ–≤)
        Material[] mobEggs = {
            Material.COW_SPAWN_EGG,
            Material.PIG_SPAWN_EGG,
            Material.SHEEP_SPAWN_EGG,
            Material.CHICKEN_SPAWN_EGG,
            Material.HORSE_SPAWN_EGG,
            Material.WOLF_SPAWN_EGG,
            Material.CAT_SPAWN_EGG,
            Material.VILLAGER_SPAWN_EGG,
            Material.IRON_GOLEM_SPAWN_EGG,
            Material.ZOMBIE_SPAWN_EGG,
            Material.SKELETON_SPAWN_EGG,
            Material.SPIDER_SPAWN_EGG,
            Material.CREEPER_SPAWN_EGG,
            Material.ENDERMAN_SPAWN_EGG,
            Material.BLAZE_SPAWN_EGG,
            Material.GHAST_SPAWN_EGG,
            Material.MAGMA_CUBE_SPAWN_EGG,
            Material.SLIME_SPAWN_EGG,
            Material.WITCH_SPAWN_EGG,
            Material.ZOMBIFIED_PIGLIN_SPAWN_EGG,
            Material.WITHER_SKELETON_SPAWN_EGG,
            Material.GUARDIAN_SPAWN_EGG,
            Material.ELDER_GUARDIAN_SPAWN_EGG,
            Material.SHULKER_SPAWN_EGG,
            Material.PHANTOM_SPAWN_EGG,
            Material.DROWNED_SPAWN_EGG,
            Material.HUSK_SPAWN_EGG,
            Material.STRAY_SPAWN_EGG,
            Material.VEX_SPAWN_EGG,
            Material.VINDICATOR_SPAWN_EGG,
            Material.PILLAGER_SPAWN_EGG,
            Material.RAVAGER_SPAWN_EGG
        };
        
        Material selectedEgg = mobEggs[random.nextInt(mobEggs.length)];
        ItemStack eggItem = new ItemStack(selectedEgg);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        ItemMeta meta = eggItem.getItemMeta();
        if (meta != null) {
            meta.setLore(Arrays.asList(
                ChatColor.GRAY + "–†–µ–¥–∫–æ–µ —è–π—Ü–æ –º–æ–±–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ",
                ChatColor.GRAY + "—Å –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è",
                "",
                ChatColor.YELLOW + "‚ú® –ü—Ä–∏–∑–æ–≤–∏—Ç–µ —ç—Ç–æ–≥–æ –º–æ–±–∞!",
                "",
                ChatColor.DARK_GRAY + "–¢—Ä–æ—Ñ–µ–π –±–æ—Å—Å–∞"
            ));
            eggItem.setItemMeta(meta);
        }
        
        return eggItem;
    }
    
    private ItemStack createDarkFragment() {
        ItemStack fragment = new ItemStack(Material.PRISMARINE_SHARD);
        ItemMeta meta = fragment.getItemMeta();
        
        meta.setDisplayName(ChatColor.DARK_PURPLE + "" + ChatColor.BOLD + "üñ§ –û–°–ö–û–õ–û–ö –¢–ï–ú–ù–û–ì–û –ü–û–í–ï–õ–ò–¢–ï–õ–Ø üñ§");
        meta.setLore(Arrays.asList(
            ChatColor.GRAY + "–û—Å–∫–æ–ª–æ–∫ –ø–æ–±–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è",
            ChatColor.GRAY + "–ü—É–ª—å—Å–∏—Ä—É–µ—Ç –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —Ç–µ–º–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π",
            "",
            ChatColor.YELLOW + "" + ChatColor.BOLD + "–ö–†–ê–§–¢ –ë–†–û–ù–ò:",
            ChatColor.GOLD + "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –æ—Å–∫–æ–ª–∫–∏ –Ω–∞ –≤–µ—Ä—Å—Ç–∞–∫–µ",
            ChatColor.GOLD + "–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –±—Ä–æ–Ω–∏:",
            "",
            ChatColor.LIGHT_PURPLE + "‚Ä¢ –®–ª–µ–º –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è (6 –æ—Å–∫–æ–ª–∫–æ–≤)",
            ChatColor.LIGHT_PURPLE + "‚Ä¢ –ù–∞–≥—Ä—É–¥–Ω–∏–∫ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è (8 –æ—Å–∫–æ–ª–∫–æ–≤)",
            ChatColor.LIGHT_PURPLE + "‚Ä¢ –ü–æ–Ω–æ–∂–∏ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è (7 –æ—Å–∫–æ–ª–∫–æ–≤)",
            ChatColor.LIGHT_PURPLE + "‚Ä¢ –°–∞–ø–æ–≥–∏ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è (5 –æ—Å–∫–æ–ª–∫–æ–≤)",
            "",
            ChatColor.GREEN + "–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏!",
            "",
            ChatColor.DARK_GRAY + "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"
        ));
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: CustomModelData –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤ —Ä–µ—Ü–µ–ø—Ç–∞—Ö!
        meta.setCustomModelData(config.getFragmentsCustomModelData());
        fragment.setItemMeta(meta);
        return fragment;
    }
    
    private ItemStack createUnbreakableElytra() {
        ItemStack elytra = new ItemStack(Material.ELYTRA);
        ItemMeta meta = elytra.getItemMeta();
        
        meta.setDisplayName(ChatColor.DARK_PURPLE + "" + ChatColor.BOLD + "ü¶á –ù–ï–õ–û–ú–ê–Æ–©–ò–ï–°–Ø –ö–†–´–õ–¨–Ø –¢–¨–ú–´ ü¶á");
        meta.setLore(Arrays.asList(
            ChatColor.GRAY + "–≠–ª–∏—Ç—Ä—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–Ω–µ–≤–æ–π –º–∞—Ç–µ—Ä–∏–∏",
            ChatColor.GRAY + "–¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è",
            "",
            ChatColor.GOLD + "" + ChatColor.BOLD + "–°–ü–û–°–û–ë–ù–û–°–¢–ò:",
            ChatColor.GREEN + "‚úì –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å",
            ChatColor.GREEN + "‚úì –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ",
            ChatColor.YELLOW + "üöÄ –õ–æ–Ω—á–µ—Ä –ø—Ä–∏ –≤–∑–ª–µ—Ç–µ",
            ChatColor.LIGHT_PURPLE + "üéÜ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∞–≤—Ç–æ—Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∏",
            ChatColor.AQUA + "‚ú® –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ–ª–µ—Ç–∞",
            "",
            ChatColor.DARK_PURPLE + "\"–õ–µ—Ç–∞–π—Ç–µ —Å —Å–∏–ª–æ–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–æ–≤!\"",
            "",
            ChatColor.DARK_GRAY + "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
        ));
        
        meta.addEnchant(Enchantment.MENDING, 1, true);
        meta.addEnchant(Enchantment.DURABILITY, 10, true); // –í—ã—Å–æ–∫–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å
        meta.setUnbreakable(true);
        meta.setCustomModelData(99001);
        
        elytra.setItemMeta(meta);
        return elytra;
    }
    
    private ItemStack createEnhancedSword() {
        ItemStack sword = new ItemStack(Material.NETHERITE_SWORD);
        ItemMeta meta = sword.getItemMeta();
        
        meta.setDisplayName(ChatColor.DARK_RED + "" + ChatColor.BOLD + "‚öî –ö–õ–ò–ù–û–ö –†–ê–ó–†–£–®–ï–ù–ò–Ø ‚öî");
        meta.setLore(Arrays.asList(
            ChatColor.GRAY + "–ú–µ—á, –∑–∞–∫–∞–ª–µ–Ω–Ω—ã–π –≤ —Ç–µ–º–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏",
            ChatColor.GRAY + "–¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è",
            "",
            ChatColor.GOLD + "" + ChatColor.BOLD + "–°–ü–û–°–û–ë–ù–û–°–¢–ò:",
            ChatColor.RED + "‚öî –û—Å—Ç—Ä–æ—Ç–∞ VI",
            ChatColor.RED + "üî• –ê—Å–ø–µ–∫—Ç –æ–≥–Ω—è III",
            ChatColor.RED + "üíÄ –ñ–∞—Ç–≤–∞ III",
            ChatColor.GREEN + "üîß –ü–æ—á–∏–Ω–∫–∞",
            ChatColor.BLUE + "üíé –ü—Ä–æ—á–Ω–æ—Å—Ç—å IV",
            "",
            ChatColor.DARK_PURPLE + "\"–°–º–µ—Ä—Ç—å —Å–ª–µ–¥—É–µ—Ç –∑–∞ –∫–∞–∂–¥—ã–º —É–¥–∞—Ä–æ–º\"",
            "",
            ChatColor.DARK_GRAY + "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –æ—Ä—É–∂–∏–µ"
        ));
        
        meta.addEnchant(Enchantment.DAMAGE_ALL, 6, true);
        meta.addEnchant(Enchantment.FIRE_ASPECT, 3, true);
        meta.addEnchant(Enchantment.LOOT_BONUS_MOBS, 3, true);
        meta.addEnchant(Enchantment.MENDING, 1, true);
        meta.addEnchant(Enchantment.DURABILITY, 4, true);
        meta.setCustomModelData(99002);
        
        sword.setItemMeta(meta);
        return sword;
    }
    
    private ItemStack createTeleportStaff() {
        ItemStack staff = new ItemStack(Material.BLAZE_ROD);
        ItemMeta meta = staff.getItemMeta();
        
        meta.setDisplayName(ChatColor.DARK_PURPLE + "" + ChatColor.BOLD + "üåü –ü–û–°–û–• –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò üåü");
        meta.setLore(Arrays.asList(
            ChatColor.GRAY + "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Å–æ—Ö —Å —Å–∏–ª–æ–π",
            ChatColor.GRAY + "–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è",
            "",
            ChatColor.GOLD + "" + ChatColor.BOLD + "–°–ü–û–°–û–ë–ù–û–°–¢–ò:",
            ChatColor.LIGHT_PURPLE + "–ü–ö–ú - –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –Ω–∞ 20 –±–ª–æ–∫–æ–≤",
            ChatColor.YELLOW + "–ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: 35 —Å–µ–∫—É–Ω–¥",
            ChatColor.GREEN + "‚úì –ù–µ—Ä–∞–∑—Ä—É—à–∏–º–æ—Å—Ç—å",
            "",
            ChatColor.DARK_PURPLE + "\"–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–¥—á–∏–Ω—è–µ—Ç—Å—è –≤–∞—à–µ–π –≤–æ–ª–µ\"",
            "",
            ChatColor.DARK_GRAY + "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç"
        ));
        
        meta.setUnbreakable(true);
        meta.setCustomModelData(99003);
        
        staff.setItemMeta(meta);
        return staff;
    }
    
    private ItemStack createShadowBoots() {
        ItemStack boots = new ItemStack(Material.NETHERITE_BOOTS);
        ItemMeta meta = boots.getItemMeta();
        
        meta.setDisplayName(ChatColor.DARK_GRAY + "" + ChatColor.BOLD + "üë§ –°–ê–ü–û–ì–ò –¢–ï–ù–ï–ô üë§");
        meta.setLore(Arrays.asList(
            ChatColor.GRAY + "–°–∞–ø–æ–≥–∏, —Å–æ—Ç–∫–∞–Ω–Ω—ã–µ –∏–∑ —á–∏—Å—Ç–æ–π —Ç–µ–Ω–∏",
            "",
            ChatColor.GOLD + "" + ChatColor.BOLD + "–°–ü–û–°–û–ë–ù–û–°–¢–ò:",
            ChatColor.GRAY + "üëª –ü—Ä–∏ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–∏ - –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å (8 —Å–µ–∫)",
            ChatColor.BLUE + "üí® –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å III",
            ChatColor.GREEN + "ü¶é –ë–µ—Å—à—É–º–Ω–æ–µ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ",
            ChatColor.YELLOW + "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ IV",
            ChatColor.GREEN + "üîß –ü–æ—á–∏–Ω–∫–∞",
            "",
            ChatColor.DARK_PURPLE + "\"–°—Ç–∞–Ω—å—Ç–µ –æ–¥–Ω–∏–º —Å —Ç–µ–Ω—è–º–∏\"",
            "",
            ChatColor.DARK_GRAY + "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è –æ–±—É–≤—å"
        ));
        
        meta.addEnchant(Enchantment.PROTECTION_ENVIRONMENTAL, 4, true);
        meta.addEnchant(Enchantment.MENDING, 1, true);
        meta.addEnchant(Enchantment.DURABILITY, 3, true);
        meta.setCustomModelData(99004);
        
        boots.setItemMeta(meta);
        return boots;
    }
    
    private ItemStack createPowerCrystal() {
        ItemStack crystal = new ItemStack(Material.END_CRYSTAL);
        ItemMeta meta = crystal.getItemMeta();
        
        meta.setDisplayName(ChatColor.LIGHT_PURPLE + "" + ChatColor.BOLD + "üíé –ö–†–ò–°–¢–ê–õ–õ –¢–ï–ú–ù–û–ô –°–ò–õ–´ üíé");
        meta.setLore(Arrays.asList(
            ChatColor.GRAY + "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É—â–Ω–æ—Å—Ç—å",
            ChatColor.GRAY + "—Å–∏–ª—ã –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è",
            "",
            ChatColor.GOLD + "" + ChatColor.BOLD + "–°–ü–û–°–û–ë–ù–û–°–¢–ò:",
            ChatColor.RED + "üî• –ü—Ä–∏ –Ω–æ—à–µ–Ω–∏–∏ –≤ —Ä—É–∫–µ:",
            ChatColor.YELLOW + "‚Ä¢ –°–∏–ª–∞ II",
            ChatColor.YELLOW + "‚Ä¢ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ —É—Ä–æ–Ω—É I",
            ChatColor.YELLOW + "‚Ä¢ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è I",
            ChatColor.YELLOW + "‚Ä¢ –ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ",
            "",
            ChatColor.DARK_PURPLE + "\"–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–∏—Å—Å—è–∫–∞–µ–º–æ–π —Å–∏–ª—ã\"",
            "",
            ChatColor.DARK_GRAY + "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç"
        ));
        
        meta.setCustomModelData(99005);
        crystal.setItemMeta(meta);
        return crystal;
    }
    
    private void dropExperience(Location deathLoc) {
        World world = deathLoc.getWorld();
        
        // –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –¥–æ 20000 (–±–æ–ª—å—à–µ —á–µ–º –±—ã–ª–æ)
        int totalExp = 20000;
        
        // –≠–ü–ò–ß–ï–°–ö–ò–ô —Ñ–æ–Ω—Ç–∞–Ω –æ–ø—ã—Ç–∞ —Å –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
        for (int i = 0; i < 50; i++) { // –ï—â–µ –±–æ–ª—å—à–µ –æ—Ä–±–æ–≤ –æ–ø—ã—Ç–∞
            final int index = i;
            new BukkitRunnable() {
                @Override
                public void run() {
                    int expToDrop = 300 + random.nextInt(500); // –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –≤ –æ—Ä–±–µ
                    
                    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Ä–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –¥—Ä–æ–ø–∞
                    double angle = 2 * Math.PI * index / 50; // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                    double radius = 2.0 + (index * 0.15); // –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–π—Å—è —Ä–∞–¥–∏—É—Å —Å–ø–∏—Ä–∞–ª–∏
                    double height = 4.0 + random.nextDouble() * 3; // –í—ã—Å–æ—Ç–∞ –æ—Ç 4 –¥–æ 7 –±–ª–æ–∫–æ–≤
                    
                    Location expLoc = deathLoc.clone().add(
                        Math.cos(angle) * radius,
                        height,
                        Math.sin(angle) * radius
                    );
                    
                    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ–ø—ã—Ç–∞
                    world.spawnParticle(Particle.VILLAGER_HAPPY, expLoc, 20, 0.5, 0.5, 0.5, 0.1);
                    world.spawnParticle(Particle.ENCHANTMENT_TABLE, expLoc, 15, 0.3, 0.3, 0.3, 0.1);
                    world.spawnParticle(Particle.FIREWORKS_SPARK, expLoc, 10, 0.2, 0.2, 0.2, 0.05);
                    world.spawnParticle(Particle.REDSTONE, expLoc, 8, 0.3, 0.3, 0.3, 0,
                        new Particle.DustOptions(org.bukkit.Color.LIME, 1.5f));
                    
                    // –ó–≤—É–∫–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞
                    world.playSound(expLoc, Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0f, 0.8f + (index * 0.02f));
                    world.playSound(expLoc, Sound.BLOCK_ENCHANTMENT_TABLE_USE, 0.8f, 1.5f);
                    
                    ExperienceOrb expOrb = (ExperienceOrb) world.spawnEntity(expLoc, EntityType.EXPERIENCE_ORB);
                    expOrb.setExperience(expToDrop);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ–Ω—Ç–∞–Ω–∞
                    Vector velocity = new Vector(
                        Math.cos(angle) * 0.3, // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
                        0.5 + random.nextDouble() * 0.8, // –í—ã—Å–æ–∫–∏–π –ø–æ–¥—ä–µ–º
                        Math.sin(angle) * 0.3
                    );
                    expOrb.setVelocity(velocity);
                    
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                    new BukkitRunnable() {
                        @Override
                        public void run() {
                            if (!expOrb.isDead()) {
                                Location orbLoc = expOrb.getLocation();
                                world.spawnParticle(Particle.VILLAGER_HAPPY, orbLoc, 5, 0.2, 0.2, 0.2, 0.05);
                                world.spawnParticle(Particle.REDSTONE, orbLoc, 3, 0.1, 0.1, 0.1, 0,
                                    new Particle.DustOptions(org.bukkit.Color.GREEN, 1.0f));
                            }
                        }
                    }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), 20L);
                }
            }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), index * 3L); // –ö–∞–∂–¥—ã–µ 0.15 —Å–µ–∫—É–Ω–¥—ã
        }
        
        // –≠–ü–ò–ß–ï–°–ö–ò–ï —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –æ–ø—ã—Ç–∞
        new BukkitRunnable() {
            private int ticks = 0;
            
            @Override
            public void run() {
                if (ticks > 100) { // 5 —Å–µ–∫—É–Ω–¥
                    this.cancel();
                    return;
                }
                
                // –ü—É–ª—å—Å–∏—Ä—É—é—â–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ —Ü–µ–Ω—Ç—Ä–µ
                if (ticks % 10 == 0) {
                    world.spawnParticle(Particle.VILLAGER_HAPPY, deathLoc.clone().add(0, 2, 0), 30, 3, 2, 3, 0.1);
                    world.spawnParticle(Particle.ENCHANTMENT_TABLE, deathLoc.clone().add(0, 3, 0), 20, 2, 1, 2, 0.1);
                    world.spawnParticle(Particle.FIREWORKS_SPARK, deathLoc.clone().add(0, 4, 0), 15, 1.5, 0.5, 1.5, 0.1);
                }
                
                // –ö–æ–ª—å—Ü–∞ –æ–ø—ã—Ç–∞
                if (ticks % 20 == 0) {
                    createExperienceRings(deathLoc);
                }
                
                // –ó–≤—É–∫–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ
                if (ticks % 30 == 0) {
                    world.playSound(deathLoc, Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 2.0f, 0.5f);
                    world.playSound(deathLoc, Sound.ENTITY_PLAYER_LEVELUP, 1.5f, 1.0f);
                }
                
                ticks++;
            }
        }.runTaskTimer(Bukkit.getPluginManager().getPlugin("UniqueBoss"), 0L, 1L);
        
        // –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–≤—É–∫–∏ –æ–ø—ã—Ç–∞
        new BukkitRunnable() {
            @Override
            public void run() {
                world.playSound(deathLoc, Sound.ENTITY_PLAYER_LEVELUP, 3.0f, 1.5f);
                world.playSound(deathLoc, Sound.UI_TOAST_CHALLENGE_COMPLETE, 2.5f, 1.8f);
                
                // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–æ–ª–Ω–∞ –æ–ø—ã—Ç–∞
                world.spawnParticle(Particle.VILLAGER_HAPPY, deathLoc.clone().add(0, 5, 0), 200, 10, 5, 10, 0.3);
                world.spawnParticle(Particle.FIREWORKS_SPARK, deathLoc.clone().add(0, 6, 0), 100, 8, 3, 8, 0.2);
            }
        }.runTaskLater(Bukkit.getPluginManager().getPlugin("UniqueBoss"), 200L); // –ß–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    }
    
    private void createExperienceRings(Location center) {
        World world = center.getWorld();
        
        // –°–æ–∑–¥–∞–µ–º 2 –∫–æ–ª—å—Ü–∞ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        for (int ring = 1; ring <= 2; ring++) {
            final double ringRadius = ring * 3.0;
            final double ringHeight = center.getY() + 1.0 + (ring * 0.5);
            
            int points = 20;
            for (int i = 0; i < points; i++) {
                double angle = 2 * Math.PI * i / points;
                double x = center.getX() + ringRadius * Math.cos(angle);
                double z = center.getZ() + ringRadius * Math.sin(angle);
                
                Location particleLoc = new Location(world, x, ringHeight, z);
                world.spawnParticle(Particle.VILLAGER_HAPPY, particleLoc, 1, 0, 0, 0, 0);
                world.spawnParticle(Particle.REDSTONE, particleLoc, 1, 0, 0, 0, 0,
                    new Particle.DustOptions(org.bukkit.Color.YELLOW, 1.0f));
            }
        }
    }
    
    // –ì–µ—Ç—Ç–µ—Ä—ã –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    public Entity getEntity() {
        return bossEntity;
    }
    
    public boolean isAlive() {
        return isAlive && bossEntity != null && !bossEntity.isDead();
    }
    
    public int getCurrentPhase() {
        return currentPhase;
    }
    
    public BossBar getBossBar() {
        return bossBar;
    }
    
    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –±–æ—Å—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
     * –ù–ï –¥—Ä–æ–ø–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∏ –ù–ï –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é —Å–º–µ—Ä—Ç–∏
     */
    public void forceDestroy() {
        isAlive = false;
        
        // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
        cancelAllTasks();
        
        // –£–¥–∞–ª—è–µ–º bossbar
        if (bossBar != null) {
            bossBar.removeAll();
        }
        
        // –°–Ω–∏–º–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–∞–Ω–∫–∞
        if (bossEntity != null) {
            try {
                org.bukkit.Chunk bossChunk = bossEntity.getLocation().getChunk();
                if (bossChunk.isForceLoaded()) {
                    bossChunk.setForceLoaded(false);
                    Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
                    plugin.getLogger().info("üîß –°–Ω—è–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–∞–Ω–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –±–æ—Å—Å–∞: [" + 
                        bossChunk.getX() + ", " + bossChunk.getZ() + "]");
                }
            } catch (Exception e) {
                Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
                plugin.getLogger().warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–∞–Ω–∫–∞: " + e.getMessage());
            }
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç—å
        if (bossEntity != null && !bossEntity.isDead()) {
            bossEntity.remove();
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        List<Player> nearbyPlayers = getNearbyPlayers(100);
        for (Player player : nearbyPlayers) {
            player.sendTitle(ChatColor.YELLOW + "‚è∞ –ë–û–°–° –ò–°–ß–ï–ó", 
                ChatColor.GRAY + "–¢–µ–º–Ω—ã–π –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –º–∏—Ä", 10, 40, 10);
        }

        Bukkit.getPluginManager().getPlugin("UniqueBoss").getLogger()
            .info("üî• –ë–æ—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏");
        
        // PDC –º–µ—Ç–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ —Å—É—â–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–∫ –±–æ—Å—Å–∞ (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ PDC)
     */
    public void setBossEntity(Wither existingEntity) {
        this.bossEntity = existingEntity;
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Å—Å–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    public void restoreFromSave(double savedHealth, int savedPhase) {
        if (bossEntity == null) {
            throw new IllegalStateException("–ù–µ–ª—å–∑—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Å—Å–∞ –±–µ–∑ —Å—É—â–Ω–æ—Å—Ç–∏!");
        }
        
        Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
        plugin.getLogger().info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Å—Å–∞:");
        plugin.getLogger().info("   –ó–¥–æ—Ä–æ–≤—å–µ: " + savedHealth);
        plugin.getLogger().info("   –§–∞–∑–∞: " + savedPhase);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å
        setupBoss();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        double maxHealth = bossEntity.getAttribute(Attribute.GENERIC_MAX_HEALTH).getValue();
        if (savedHealth > 0 && savedHealth <= maxHealth) {
            bossEntity.setHealth(savedHealth);
            lastKnownHealth = savedHealth;
        } else {
            // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
            bossEntity.setHealth(maxHealth);
            lastKnownHealth = maxHealth;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–∑—É
        if (savedPhase >= 1 && savedPhase <= 3) {
            currentPhase = savedPhase;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Ñ–∞–∑—ã
            if (currentPhase >= 2) {
                bossEntity.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, Integer.MAX_VALUE, 1));
            }
            if (currentPhase >= 3) {
                bossEntity.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, Integer.MAX_VALUE, 2));
            }
        } else {
            currentPhase = 1;
        }
        
        // –°–æ–∑–¥–∞–µ–º –±ossbar
        createBossBar();
        updateBossBarDisplay();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Å—Å–∞
        startBossAI();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        startAmbientEffects();
        
        plugin.getLogger().info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Å—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:");
        plugin.getLogger().info("   –ó–¥–æ—Ä–æ–≤—å–µ: " + bossEntity.getHealth() + "/" + maxHealth);
        plugin.getLogger().info("   –§–∞–∑–∞: " + currentPhase);
        plugin.getLogger().info("   –≠—Ñ—Ñ–µ–∫—Ç—ã: " + bossEntity.getActivePotionEffects().size());
    }

    
    // ================================
    // –°–ò–°–¢–ï–ú–ê –ü–†–û–í–û–ö–ê–¶–ò–ô –í –ß–ê–¢
    // ================================
    
    private void sendRandomTaunt() {
        if (!config.isChatTauntsEnabled()) return;
        
        long currentTime = System.currentTimeMillis();
        if (currentTime - lastTauntTime < config.getTauntInterval() * 1000) return;
        
        if (random.nextInt(100) >= config.getTauntChance()) return;
        
        List<Player> nearbyPlayers = getNearbyPlayers(config.getTauntRadius());
        if (nearbyPlayers.isEmpty()) return;
        
        lastTauntTime = currentTime;
        
        // 60% —à–∞–Ω—Å –Ω–∞ –æ–±—â—É—é –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—é, 40% –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é
        if (random.nextInt(100) < 60) {
            sendGeneralTaunt();
        } else {
            Player target = nearbyPlayers.get(random.nextInt(nearbyPlayers.size()));
            sendTargetedTaunt(target.getName());
        }
    }
    
    private void sendGeneralTaunt() {
        List<String> taunts = config.getGeneralTaunts();
        if (taunts.isEmpty()) return;
        
        String taunt = taunts.get(random.nextInt(taunts.size()));
        taunt = ChatColor.translateAlternateColorCodes('&', taunt);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ —Ä–∞–¥–∏—É—Å–µ
        List<Player> nearbyPlayers = getNearbyPlayers(config.getTauntRadius());
        for (Player player : nearbyPlayers) {
            player.sendMessage(taunt);
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –æ–±—â–µ–π –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏
        World world = bossEntity.getWorld();
        Location bossLoc = bossEntity.getLocation();
        world.playSound(bossLoc, Sound.ENTITY_WITHER_AMBIENT, 1.5f, 0.8f);
        
        double multiplier = config.getParticlesMultiplier();
        world.spawnParticle(Particle.SPELL_WITCH, bossLoc.clone().add(0, 2, 0), 
            (int)(15 * multiplier), 1, 1, 1, 0.1);
    }
    
    private void sendTargetedTaunt(String playerName) {
        List<String> taunts = config.getTargetedTaunts();
        if (taunts.isEmpty()) return;
        
        String taunt = taunts.get(random.nextInt(taunts.size()));
        taunt = taunt.replace("%player%", playerName);
        taunt = ChatColor.translateAlternateColorCodes('&', taunt);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ —Ä–∞–¥–∏—É—Å–µ
        List<Player> nearbyPlayers = getNearbyPlayers(config.getTauntRadius());
        for (Player player : nearbyPlayers) {
            player.sendMessage(taunt);
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏
        World world = bossEntity.getWorld();
        Location bossLoc = bossEntity.getLocation();
        world.playSound(bossLoc, Sound.ENTITY_WITHER_HURT, 1.0f, 1.2f);
        
        double multiplier = config.getParticlesMultiplier();
        world.spawnParticle(Particle.REDSTONE, bossLoc.clone().add(0, 2, 0), 
            (int)(10 * multiplier), 1, 1, 1, 
            new Particle.DustOptions(org.bukkit.Color.RED, 1.5f));
    }
    
    public void onDamageReceived(String attackerName) {
        lastAttacker = attackerName;
        
        // 20% —à–∞–Ω—Å –Ω–∞ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏—é –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞
        if (random.nextInt(100) < 20) {
            sendDamageTaunt(attackerName);
        }
    }
    
    private void sendDamageTaunt(String attackerName) {
        List<String> taunts = config.getDamageTaunts();
        if (taunts.isEmpty()) return;
        
        String taunt = taunts.get(random.nextInt(taunts.size()));
        taunt = taunt.replace("%attacker%", attackerName);
        taunt = ChatColor.translateAlternateColorCodes('&', taunt);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ —Ä–∞–¥–∏—É—Å–µ
        List<Player> nearbyPlayers = getNearbyPlayers(config.getTauntRadius());
        for (Player player : nearbyPlayers) {
            player.sendMessage(taunt);
        }
        
        // –ó–≤—É–∫ –∑–ª–æ—Å—Ç–∏
        World world = bossEntity.getWorld();
        world.playSound(bossEntity.getLocation(), Sound.ENTITY_WITHER_HURT, 2.0f, 0.5f);
    }
    
    private void checkLowHealthTaunts() {
        if (lowHealthTauntSent) return;
        
        double currentHealth = bossEntity.getHealth();
        double maxHealth = bossEntity.getAttribute(org.bukkit.attribute.Attribute.GENERIC_MAX_HEALTH).getValue();
        double healthPercent = currentHealth / maxHealth;
        
        // –ü—Ä–∏ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∏–∂–µ 25%
        if (healthPercent <= 0.25) {
            lowHealthTauntSent = true;
            sendLowHealthTaunt();
        }
    }
    
    private void sendLowHealthTaunt() {
        List<String> taunts = config.getLowHealthTaunts();
        if (taunts.isEmpty()) return;
        
        String taunt = taunts.get(random.nextInt(taunts.size()));
        taunt = ChatColor.translateAlternateColorCodes('&', taunt);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ —Ä–∞–¥–∏—É—Å–µ
        List<Player> nearbyPlayers = getNearbyPlayers(config.getTauntRadius());
        for (Player player : nearbyPlayers) {
            player.sendMessage(taunt);
        }
        
        // –ú–æ—â–Ω—ã–µ –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        World world = bossEntity.getWorld();
        Location bossLoc = bossEntity.getLocation();
        world.playSound(bossLoc, Sound.ENTITY_WITHER_DEATH, 1.5f, 1.5f);
        world.playSound(bossLoc, Sound.ENTITY_ENDER_DRAGON_GROWL, 1.0f, 0.8f);
    }
    
    public void sendPhaseTaunt(int phase) {
        List<String> taunts;
        
        if (phase == 2) {
            taunts = config.getPhase2Taunts();
        } else if (phase == 3) {
            taunts = config.getPhase3Taunts();
        } else {
            return;
        }
        
        if (taunts.isEmpty()) return;
        
        String taunt = taunts.get(random.nextInt(taunts.size()));
        taunt = ChatColor.translateAlternateColorCodes('&', taunt);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ —Ä–∞–¥–∏—É—Å–µ
        List<Player> nearbyPlayers = getNearbyPlayers(config.getTauntRadius());
        for (Player player : nearbyPlayers) {
            player.sendMessage(taunt);
        }
        
        // –ó–≤—É–∫ —Å–º–µ–Ω—ã —Ñ–∞–∑—ã
        World world = bossEntity.getWorld();
        world.playSound(bossEntity.getLocation(), Sound.ENTITY_ENDER_DRAGON_GROWL, 2.0f, 0.3f);
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–º–µ–Ω—ã –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –±–æ—Å—Å–∞
     */
    private void registerTask(BukkitTask task) {
        activeTasks.add(task);
    }
    
    /**
     * –û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
     */
    private void cancelAllTasks() {
        for (BukkitTask task : activeTasks) {
            if (task != null && !task.isCancelled()) {
                task.cancel();
            }
        }
        activeTasks.clear();
        
        if (config.isBossLifecycleLoggingEnabled()) {
            Plugin plugin = Bukkit.getPluginManager().getPlugin("UniqueBoss");
            plugin.getLogger().info("üßπ DEBUG: –û—Ç–º–µ–Ω–µ–Ω–æ –≤—Å–µ—Ö –∑–∞–¥–∞—á: " + activeTasks.size());
        }
    }
} 

