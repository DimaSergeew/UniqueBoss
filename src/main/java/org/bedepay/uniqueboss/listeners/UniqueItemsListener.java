package org.bedepay.uniqueboss.listeners;

import org.bukkit.*;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerToggleSneakEvent;
import org.bukkit.event.player.PlayerItemHeldEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerSwapHandItemsEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityToggleGlideEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.plugin.Plugin;
import org.bukkit.util.RayTraceResult;
import org.bukkit.util.Vector;
import org.bedepay.uniqueboss.config.ConfigManager;
import org.bedepay.uniqueboss.UniqueBoss;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class UniqueItemsListener implements Listener {
    
    private final Plugin plugin;
    private final ConfigManager config;
    private final Map<Player, Long> teleportCooldowns = new HashMap<>();
    private final Map<Player, Long> swordPullCooldowns = new HashMap<>();
    private final Map<Player, Long> shadowBootsCooldowns = new HashMap<>();
    private final Set<Player> powerCrystalHolders = new HashSet<>();
    private final Set<Player> shadowBootsWearers = new HashSet<>();
    private final Map<Player, BukkitRunnable> activeFireworkSystems = new HashMap<>();
    
    public UniqueItemsListener(Plugin plugin) {
        this.plugin = plugin;
        this.config = UniqueBoss.getInstance().getConfigManager();
        startPowerCrystalEffects();
        startShadowBootsEffects();
    }
    
    // ===============================
    // –ü–û–°–û–• –¢–ï–õ–ï–ü–û–†–¢–ê–¶–ò–ò (customModelData: 99003)
    // ===============================
    
    @EventHandler
    public void onPlayerInteract(PlayerInteractEvent event) {
        if (event.getAction() != org.bukkit.event.block.Action.RIGHT_CLICK_AIR && 
            event.getAction() != org.bukkit.event.block.Action.RIGHT_CLICK_BLOCK) {
            return;
        }
        
        Player player = event.getPlayer();
        ItemStack item = player.getInventory().getItemInMainHand();
        
        if (isTeleportStaff(item)) {
            handleTeleportStaff(player);
            event.setCancelled(true);
        } else if (isEnhancedSword(item)) {
            handleEnhancedSwordPull(player);
            event.setCancelled(true);
        }
    }
    
    private boolean isTeleportStaff(ItemStack item) {
        if (item == null || item.getType() != Material.BLAZE_ROD) return false;
        if (!item.hasItemMeta()) return false;
        
        ItemMeta meta = item.getItemMeta();
        return meta.hasCustomModelData() && meta.getCustomModelData() == 99003;
    }
    
    private boolean isEnhancedSword(ItemStack item) {
        if (item == null || item.getType() != Material.NETHERITE_SWORD) return false;
        if (!item.hasItemMeta()) return false;
        
        ItemMeta meta = item.getItemMeta();
        return meta.hasCustomModelData() && meta.getCustomModelData() == 99002;
    }
    
    private void handleTeleportStaff(Player player) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        Long lastUse = teleportCooldowns.get(player);
        long currentTime = System.currentTimeMillis();
        
        long cooldownMs = config.getTeleportStaffCooldown() * 1000L;
        if (lastUse != null && currentTime - lastUse < cooldownMs) {
            long remainingTime = config.getTeleportStaffCooldown() - (currentTime - lastUse) / 1000;
            player.sendActionBar(ChatColor.RED + "‚è± –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: " + remainingTime + " —Å–µ–∫.");
            return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫—É —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
        Location teleportLoc = findTeleportLocation(player);
        if (teleportLoc == null) {
            player.sendActionBar(ChatColor.RED + "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ –º–µ—Å—Ç–æ!");
            return;
        }
        
        Location originalLoc = player.getLocation();
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –î–û —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
        World world = player.getWorld();
        world.spawnParticle(Particle.PORTAL, originalLoc, 30, 1, 1, 1, 0.3);
        world.spawnParticle(Particle.SPELL_WITCH, originalLoc, 20, 0.5, 0.5, 0.5, 0.1);
        world.playSound(originalLoc, Sound.ENTITY_ENDERMAN_TELEPORT, 1.0f, 1.2f);
        
        // –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è
        player.teleport(teleportLoc);
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ü–û–°–õ–ï —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏
        world.spawnParticle(Particle.PORTAL, teleportLoc, 30, 1, 1, 1, 0.3);
        world.spawnParticle(Particle.SPELL_WITCH, teleportLoc, 20, 0.5, 0.5, 0.5, 0.1);
        world.spawnParticle(Particle.FIREWORKS_SPARK, teleportLoc, 15, 1, 1, 1, 0.05);
        world.playSound(teleportLoc, Sound.ENTITY_ENDERMAN_TELEPORT, 1.0f, 0.8f);
        
        player.sendActionBar(ChatColor.LIGHT_PURPLE + "üåü –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!");
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        teleportCooldowns.put(player, currentTime);
    }
    
    // ===============================
    // –ö–õ–ò–ù–û–ö –†–ê–ó–†–£–®–ï–ù–ò–Ø (customModelData: 99002)
    // ===============================
    
    private void handleEnhancedSwordPull(Player player) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        Long lastUse = swordPullCooldowns.get(player);
        long currentTime = System.currentTimeMillis();
        long cooldownMs = config.getEnhancedSwordPullCooldown() * 1000L;
        
        if (lastUse != null && currentTime - lastUse < cooldownMs) {
            long remainingTime = config.getEnhancedSwordPullCooldown() - (currentTime - lastUse) / 1000;
            player.sendActionBar(ChatColor.RED + "‚è± –ü—Ä–∏—Ç—è–≥–∏–≤–∞–Ω–∏–µ: " + remainingTime + " —Å–µ–∫.");
            return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Å–º–æ—Ç—Ä–∏—Ç –∏–≥—Ä–æ–∫
        LivingEntity target = findPullTarget(player);
        if (target == null) {
            player.sendActionBar(ChatColor.RED + "‚ùå –ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –ø—Ä–∏—Ç—è–≥–∏–≤–∞–Ω–∏—è!");
            return;
        }
        
        // –ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ–º —Ü–µ–ª—å
        Vector pullDirection = player.getLocation().toVector().subtract(target.getLocation().toVector()).normalize();
        pullDirection.multiply(config.getEnhancedSwordPullStrength());
        pullDirection.setY(Math.max(0.5, pullDirection.getY())); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ–¥—ä–µ–º
        
        target.setVelocity(pullDirection);
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏—Ç—è–≥–∏–≤–∞–Ω–∏—è
        World world = player.getWorld();
        Location playerLoc = player.getLocation();
        Location targetLoc = target.getLocation();
        
        // –õ–∏–Ω–∏—è —á–∞—Å—Ç–∏—Ü –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–æ–º –∏ —Ü–µ–ª—å—é
        createPullEffectLine(playerLoc, targetLoc, world);
        
        // –ó–≤—É–∫–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
        world.playSound(playerLoc, Sound.ENTITY_EVOKER_CAST_SPELL, 1.5f, 0.8f);
        world.playSound(targetLoc, Sound.ENTITY_ENDERMAN_TELEPORT, 1.0f, 1.2f);
        world.spawnParticle(Particle.SPELL_WITCH, targetLoc, 30, 1, 1, 1, 0.2);
        world.spawnParticle(Particle.REDSTONE, targetLoc, 20, 1, 1, 1, 
            new Particle.DustOptions(org.bukkit.Color.PURPLE, 2.0f));
        
        player.sendActionBar(ChatColor.DARK_PURPLE + "‚öî –¶–µ–ª—å –ø—Ä–∏—Ç—è–Ω—É—Ç–∞ —Ç–µ–º–Ω–æ–π —Å–∏–ª–æ–π!");
        
        // –£—Ä–æ–Ω —Ü–µ–ª–∏
        target.damage(4.0, player);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        swordPullCooldowns.put(player, currentTime);
    }
    
    private LivingEntity findPullTarget(Player player) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—ã–π rayTrace
        RayTraceResult result = player.getWorld().rayTraceEntities(
            player.getEyeLocation(),
            player.getEyeLocation().getDirection(),
            config.getEnhancedSwordPullDistance(),
            entity -> entity instanceof LivingEntity && entity != player
        );
        
        if (result != null && result.getHitEntity() instanceof LivingEntity) {
            return (LivingEntity) result.getHitEntity();
        }
        
        // –ï—Å–ª–∏ —Ç–æ—á–Ω—ã–π rayTrace –Ω–µ –Ω–∞—à–µ–ª —Ü–µ–ª—å, –∏—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å—É—â–Ω–æ—Å—Ç—å –≤ –∫–æ–Ω—É—Å–µ –≤–∑–≥–ª—è–¥–∞
        Vector lookDirection = player.getEyeLocation().getDirection();
        double maxDistance = config.getEnhancedSwordPullDistance();
        LivingEntity closestEntity = null;
        double closestDistance = maxDistance;
        
        for (Entity entity : player.getNearbyEntities(maxDistance, maxDistance, maxDistance)) {
            if (!(entity instanceof LivingEntity) || entity == player) continue;
            
            Location entityLoc = entity.getLocation();
            Vector toEntity = entityLoc.toVector().subtract(player.getEyeLocation().toVector()).normalize();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥–æ–ª –º–µ–∂–¥—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤–∑–≥–ª—è–¥–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫ —Å—É—â–Ω–æ—Å—Ç–∏
            double angle = lookDirection.angle(toEntity);
            if (angle <= Math.toRadians(30)) { // 30 –≥—Ä–∞–¥—É—Å–æ–≤ –∫–æ–Ω—É—Å
                double distance = player.getEyeLocation().distance(entityLoc);
                if (distance < closestDistance) {
                    closestEntity = (LivingEntity) entity;
                    closestDistance = distance;
                }
            }
        }
        
        return closestEntity;
    }
    
    private void createPullEffectLine(Location start, Location end, World world) {
        Vector direction = end.toVector().subtract(start.toVector());
        double distance = direction.length();
        direction.normalize();
        
        for (double i = 0; i < distance; i += 0.5) {
            Location particleLoc = start.clone().add(direction.clone().multiply(i));
            world.spawnParticle(Particle.REDSTONE, particleLoc, 1, 0, 0, 0,
                new Particle.DustOptions(org.bukkit.Color.PURPLE, 1.0f));
        }
    }
    
    private Location findTeleportLocation(Player player) {
        // –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫—É, –∫—É–¥–∞ —Å–º–æ—Ç—Ä–∏—Ç –∏–≥—Ä–æ–∫, –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –¥–æ 20 –±–ª–æ–∫–æ–≤
        RayTraceResult result = player.getWorld().rayTraceBlocks(
            player.getEyeLocation(), 
            player.getEyeLocation().getDirection(), 
            config.getTeleportStaffDistance()
        );
        
        Location targetLoc;
        if (result != null && result.getHitBlock() != null) {
            // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º—Å—è –ù–ê –±–ª–æ–∫
            targetLoc = result.getHitBlock().getLocation().add(0.5, 1, 0.5);
        } else {
            // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–∑–≥–ª—è–¥–∞
            Vector direction = player.getEyeLocation().getDirection().normalize();
            targetLoc = player.getLocation().add(direction.multiply(config.getTeleportStaffDistance()));
            targetLoc.setY(findSafeY(targetLoc));
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –º–µ—Å—Ç–∞
        if (isSafeForTeleport(targetLoc)) {
            return targetLoc;
        }
        
        return null;
    }
    
    private double findSafeY(Location loc) {
        World world = loc.getWorld();
        int startY = Math.max(1, (int) loc.getY());
        
        // –ò—â–µ–º —Ç–≤–µ—Ä–¥—ã–π –±–ª–æ–∫ —Å–Ω–∏–∑—É
        for (int y = startY; y >= world.getMinHeight(); y--) {
            if (world.getBlockAt(loc.getBlockX(), y, loc.getBlockZ()).getType().isSolid()) {
                return y + 1; // –ù–∞ –±–ª–æ–∫ –≤—ã—à–µ —Ç–≤–µ—Ä–¥–æ–≥–æ
            }
        }
        
        return loc.getY(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤—ã—Å–æ—Ç—É
    }
    
    private boolean isSafeForTeleport(Location loc) {
        World world = loc.getWorld();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ (2 –±–ª–æ–∫–∞ –≤—ã—Å–æ—Ç—ã)
        Location feet = loc.clone();
        Location head = loc.clone().add(0, 1, 0);
        Location ground = loc.clone().subtract(0, 1, 0);
        
        return feet.getBlock().getType() == Material.AIR && 
               head.getBlock().getType() == Material.AIR &&
               ground.getBlock().getType().isSolid() &&
               !isLavaOrVoid(feet);
    }
    
    private boolean isLavaOrVoid(Location loc) {
        return loc.getY() < loc.getWorld().getMinHeight() + 5 ||
               loc.getBlock().getType() == Material.LAVA ||
               loc.getBlock().getType() == Material.FIRE;
    }
    
    // ===============================
    // –ù–ï–õ–û–ú–ê–Æ–©–ò–ï–°–Ø –ö–†–´–õ–¨–Ø –¢–¨–ú–´ (customModelData: 99001)
    // ===============================
    
    @EventHandler
    public void onElytraGlide(EntityToggleGlideEvent event) {
        if (!(event.getEntity() instanceof Player)) return;
        
        Player player = (Player) event.getEntity();
        
        if (event.isGliding() && isWearingDarkElytra(player)) {
            // –ò–≥—Ä–æ–∫ –Ω–∞—á–∞–ª –ø–æ–ª–µ—Ç —Å –∫—Ä—ã–ª—å—è–º–∏ —Ç—å–º—ã - –¥–∞–µ–º –ª–æ–Ω—á–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∏
            
            // –õ–û–ù–ß–ï–† - –ø–æ–¥–∫–∏–¥—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤–≤–µ—Ä—Ö –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –ø–æ–ª–µ—Ç–∞
            Vector launchVelocity = player.getVelocity().clone();
            launchVelocity.setY(config.getDarkElytraLaunchVelocity()); // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è —Å–∏–ª–∞ –ª–æ–Ω—á–µ—Ä–∞
            player.setVelocity(launchVelocity);
            
            // –≠—Ñ—Ñ–µ–∫—Ç—ã –ª–æ–Ω—á–µ—Ä–∞
            World world = player.getWorld();
            Location playerLoc = player.getLocation();
            world.spawnParticle(Particle.CLOUD, playerLoc, 30, 1, 0.5, 1, 0.1);
            world.spawnParticle(Particle.FIREWORKS_SPARK, playerLoc, 20, 0.5, 0.5, 0.5, 0.1);
            world.playSound(playerLoc, Sound.ENTITY_FIREWORK_ROCKET_LAUNCH, 1.0f, 1.2f);
            
            // –°–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
            int fireworkInterval = config.getDarkElytraFireworkInterval();
            player.sendActionBar(ChatColor.LIGHT_PURPLE + "üöÄ –ö—Ä—ã–ª—å—è –¢—å–º—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ " + fireworkInterval + " —Å–µ–∫");
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–æ–≤
            startAutomaticFireworks(player);
        } else if (!event.isGliding()) {
            // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–æ–≤ –ø—Ä–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏–∏
            stopAutomaticFireworks(player);
        }
    }
    
    private boolean isWearingDarkElytra(Player player) {
        ItemStack chestplate = player.getInventory().getChestplate();
        if (chestplate == null || chestplate.getType() != Material.ELYTRA) return false;
        if (!chestplate.hasItemMeta()) return false;
        
        ItemMeta meta = chestplate.getItemMeta();
        return meta.hasCustomModelData() && meta.getCustomModelData() == 99001;
    }
    
    private void startAutomaticFireworks(Player player) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–∏—Å—Ç–µ–º—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
        stopAutomaticFireworks(player);
        
        World world = player.getWorld();
        int fireworkIntervalTicks = config.getDarkElytraFireworkInterval() * 20; // –°–µ–∫—É–Ω–¥—ã –≤ —Ç–∏–∫–∏
        int repairIntervalTicks = config.getDarkElytraRepairInterval() * 20; // –°–µ–∫—É–Ω–¥—ã –≤ —Ç–∏–∫–∏
        
        BukkitRunnable fireworkSystem = new BukkitRunnable() {
            private int tickCount = 0;
            
            @Override
            public void run() {
                if (!player.isOnline() || !player.isGliding() || !isWearingDarkElytra(player)) {
                    this.cancel();
                    activeFireworkSystems.remove(player);
                    return;
                }
                
                tickCount++;
                
                // –ö–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥ —Å–æ–∑–¥–∞–µ–º –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫
                if (tickCount % fireworkIntervalTicks == 0) {
                    createAndUseFirework(player);
                }
                
                // –ê–≤—Ç–æ–ø–æ—á–∏–Ω–∫–∞ —ç–ª–∏—Ç—Ä
                if (tickCount % repairIntervalTicks == 0) {
                    repairElytra(player);
                }
                
                // –ö—Ä–∞—Å–∏–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                if (tickCount % 40 == 0) {
                    Location loc = player.getLocation();
                    world.spawnParticle(Particle.PORTAL, loc, 8, 0.5, 0.5, 0.5, 0.05);
                    world.spawnParticle(Particle.SPELL_WITCH, loc, 5, 0.3, 0.3, 0.3, 0.02);
                    world.playSound(loc, Sound.ENTITY_PHANTOM_FLAP, 0.3f, 1.5f);
                }
            }
        };
        
        fireworkSystem.runTaskTimer(plugin, 0L, 1L);
        activeFireworkSystems.put(player, fireworkSystem);
    }
    
    private void stopAutomaticFireworks(Player player) {
        BukkitRunnable system = activeFireworkSystems.remove(player);
        if (system != null && !system.isCancelled()) {
            system.cancel();
        }
    }
    
    private void createAndUseFirework(Player player) {
        // –†–ï–ê–õ–¨–ù–û–ï –£–°–ö–û–†–ï–ù–ò–ï –∫–∞–∫ –æ—Ç —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞
        Vector currentVelocity = player.getVelocity();
        Vector lookDirection = player.getLocation().getDirection();
        
        // –í—ã—á–∏—Å–ª—è–µ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        double fireworkPower = config.getDarkElytraFireworkPower();
        double accelerationMultiplier = 0.5 + (fireworkPower * 0.3); // 0.8 –¥–ª—è —É—Ä–æ–≤–Ω—è 1, 1.4 –¥–ª—è —É—Ä–æ–≤–Ω—è 3
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–∑–≥–ª—è–¥–∞ –∏–≥—Ä–æ–∫–∞
        Vector acceleration = lookDirection.clone().multiply(accelerationMultiplier);
        
        // –°–º–µ—à–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        Vector newVelocity = currentVelocity.clone().add(acceleration);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ)
        double maxSpeed = config.getDarkElytraMaxSpeed();
        if (newVelocity.length() > maxSpeed) {
            newVelocity = newVelocity.normalize().multiply(maxSpeed);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
        player.setVelocity(newVelocity);
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞
        Location loc = player.getLocation();
        World world = player.getWorld();
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫
        org.bukkit.entity.Firework visualFirework = world.spawn(loc, org.bukkit.entity.Firework.class);
        org.bukkit.inventory.meta.FireworkMeta fireworkMeta = visualFirework.getFireworkMeta();
        fireworkMeta.setPower(1); // –ö–æ—Ä–æ—Ç–∫–∏–π –ø–æ–ª–µ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–∑—Ä—ã–≤–∞
        
        org.bukkit.FireworkEffect effect = org.bukkit.FireworkEffect.builder()
            .with(org.bukkit.FireworkEffect.Type.STAR)
            .withColor(org.bukkit.Color.PURPLE, org.bukkit.Color.BLACK)
            .withFade(org.bukkit.Color.GRAY)
            .trail(true)
            .flicker(true)
            .build();
        fireworkMeta.addEffect(effect);
        visualFirework.setFireworkMeta(fireworkMeta);
        
        // –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫ –Ω–∞–∑–∞–¥ –æ—Ç –∏–≥—Ä–æ–∫–∞
        Vector fireworkDirection = lookDirection.clone().multiply(-0.2);
        visualFirework.setVelocity(fireworkDirection);
        
        // –ë—ã—Å—Ç—Ä–æ –¥–µ—Ç–æ–Ω–∏—Ä—É–µ–º –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        new BukkitRunnable() {
            @Override
            public void run() {
                if (!visualFirework.isDead()) {
                    visualFirework.detonate();
                }
            }
        }.runTaskLater(plugin, 8L);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —É—Å–∫–æ—Ä–µ–Ω–∏—è
        world.spawnParticle(Particle.FIREWORKS_SPARK, loc, 25, 0.8, 0.8, 0.8, 0.15);
        world.spawnParticle(Particle.PORTAL, loc, 15, 1, 1, 1, 0.1);
        world.spawnParticle(Particle.FLAME, loc, 12, 0.5, 0.5, 0.5, 0.05);
        
        // –ó–≤—É–∫–∏ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞
        world.playSound(loc, Sound.ENTITY_FIREWORK_ROCKET_LAUNCH, 1.2f, 1.2f);
        world.playSound(loc, Sound.ENTITY_FIREWORK_ROCKET_BLAST, 0.8f, 1.5f);
        
        player.sendActionBar(ChatColor.DARK_PURPLE + "üéÜ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫ —É—Ä–æ–≤–Ω—è " + 
                           config.getDarkElytraFireworkPower() + " - —É—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!");
    }
    

    
    private void repairElytra(Player player) {
        ItemStack elytra = player.getInventory().getChestplate();
        if (elytra != null && elytra.getType() == Material.ELYTRA) {
            if (elytra.getDurability() > 0) {
                int repairAmount = config.getDarkElytraRepairAmount();
                elytra.setDurability((short) Math.max(0, elytra.getDurability() - repairAmount));
                
                World world = player.getWorld();
                world.spawnParticle(Particle.VILLAGER_HAPPY, player.getLocation(), 5, 0.5, 0.5, 0.5, 0.05);
                world.playSound(player.getLocation(), Sound.BLOCK_ENCHANTMENT_TABLE_USE, 0.5f, 2.0f);
            }
        }
    }
    
    // ===============================
    // –¢–ï–ù–ï–í–´–ï –°–ê–ü–û–ì–ò (customModelData: 99004)
    // ===============================
    
    @EventHandler
    public void onPlayerSneak(PlayerToggleSneakEvent event) {
        Player player = event.getPlayer();
        
        if (isWearingShadowBoots(player) && event.isSneaking()) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            long currentTime = System.currentTimeMillis();
            Long lastUsed = shadowBootsCooldowns.get(player);
            
            if (lastUsed != null && (currentTime - lastUsed) < 1000) {
                // –ö—É–ª–¥–∞—É–Ω –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª (–º–µ–Ω–µ–µ —Å–µ–∫—É–Ω–¥—ã)
                return;
            }
            
            // –ò–≥—Ä–æ–∫ –Ω–∞—á–∞–ª –ø—Ä–∏—Å–µ–¥–∞—Ç—å - –¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ 8 —Å–µ–∫—É–Ω–¥
            activateShadowMode(player);
            shadowBootsCooldowns.put(player, currentTime);
        }
    }
    
    private boolean isWearingShadowBoots(Player player) {
        ItemStack boots = player.getInventory().getBoots();
        if (boots == null || boots.getType() != Material.NETHERITE_BOOTS) return false;
        if (!boots.hasItemMeta()) return false;
        
        ItemMeta meta = boots.getItemMeta();
        return meta.hasCustomModelData() && meta.getCustomModelData() == 99004;
    }
    
    private void activateShadowMode(Player player) {
        // –≠—Ñ—Ñ–µ–∫—Ç—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (8 —Å–µ–∫—É–Ω–¥ = 160 —Ç–∏–∫–æ–≤)
        player.addPotionEffect(new PotionEffect(PotionEffectType.INVISIBILITY, 160, 0, true, false));
        player.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, 160, 2, true, false)); // –°–∫–æ—Ä–æ—Å—Ç—å III
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        World world = player.getWorld();
        world.spawnParticle(Particle.SMOKE_LARGE, player.getLocation().add(0, 1, 0), 20, 0.5, 1, 0.5, 0.05);
        world.spawnParticle(Particle.SPELL_WITCH, player.getLocation().add(0, 1, 0), 15, 0.3, 0.5, 0.3, 0.1);
        world.playSound(player.getLocation(), Sound.ENTITY_ENDERMAN_TELEPORT, 0.5f, 1.5f);
        
        player.sendActionBar(ChatColor.DARK_GRAY + "üë§ –†–µ–∂–∏–º —Ç–µ–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 8 —Å–µ–∫—É–Ω–¥!");
    }
    
    // ===============================
    // –ö–†–ò–°–¢–ê–õ–õ –°–ò–õ–´ (customModelData: 99005)  
    // ===============================
    
    @EventHandler
    public void onItemHeld(PlayerItemHeldEvent event) {
        Player player = event.getPlayer();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
        new BukkitRunnable() {
            @Override
            public void run() {
                ItemStack newItem = player.getInventory().getItem(event.getNewSlot());
                ItemStack oldItem = player.getInventory().getItem(event.getPreviousSlot());
                
                boolean hadCrystal = isPowerCrystal(oldItem);
                boolean hasCrystal = isPowerCrystal(newItem);
                
                if (!hadCrystal && hasCrystal) {
                    // –í–∑—è–ª –∫—Ä–∏—Å—Ç–∞–ª–ª –≤ —Ä—É–∫—É
                    activatePowerCrystal(player);
                } else if (hadCrystal && !hasCrystal) {
                    // –£–±—Ä–∞–ª –∫—Ä–∏—Å—Ç–∞–ª–ª –∏–∑ —Ä—É–∫–∏
                    deactivatePowerCrystal(player);
                }
            }
        }.runTaskLater(plugin, 1L);
    }
    
    @EventHandler
    public void onItemDrop(PlayerDropItemEvent event) {
        Player player = event.getPlayer();
        ItemStack droppedItem = event.getItemDrop().getItemStack();
        
        if (isPowerCrystal(droppedItem)) {
            deactivatePowerCrystal(player);
        }
    }
    
    @EventHandler
    public void onItemSwap(PlayerSwapHandItemsEvent event) {
        Player player = event.getPlayer();
        
        new BukkitRunnable() {
            @Override
            public void run() {
                ItemStack mainHand = player.getInventory().getItemInMainHand();
                ItemStack offHand = player.getInventory().getItemInOffHand();
                
                boolean hadCrystal = powerCrystalHolders.contains(player);
                boolean hasCrystal = isPowerCrystal(mainHand) || isPowerCrystal(offHand);
                
                if (!hadCrystal && hasCrystal) {
                    activatePowerCrystal(player);
                } else if (hadCrystal && !hasCrystal) {
                    deactivatePowerCrystal(player);
                }
            }
        }.runTaskLater(plugin, 1L);
    }
    
    @EventHandler
    public void onInventoryClick(InventoryClickEvent event) {
        if (!(event.getWhoClicked() instanceof Player)) return;
        
        Player player = (Player) event.getWhoClicked();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –≤ —Å–ª–æ—Ç offhand (40) –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ä—É–∫—É (player.getInventory().getHeldItemSlot())
        if (event.getSlot() == 40 || event.getSlot() == player.getInventory().getHeldItemSlot()) {
            new BukkitRunnable() {
                @Override
                public void run() {
                    ItemStack mainHand = player.getInventory().getItemInMainHand();
                    ItemStack offHand = player.getInventory().getItemInOffHand();
                    
                    boolean hadCrystal = powerCrystalHolders.contains(player);
                    boolean hasCrystal = isPowerCrystal(mainHand) || isPowerCrystal(offHand);
                    
                    if (!hadCrystal && hasCrystal) {
                        activatePowerCrystal(player);
                    } else if (hadCrystal && !hasCrystal) {
                        deactivatePowerCrystal(player);
                    }
                }
            }.runTaskLater(plugin, 1L); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Ç–∏–∫ —á—Ç–æ–±—ã –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ–±–Ω–æ–≤–∏–ª—Å—è
        }
    }
    
    private boolean isPowerCrystal(ItemStack item) {
        if (item == null || item.getType() != Material.END_CRYSTAL) return false;
        if (!item.hasItemMeta()) return false;
        
        ItemMeta meta = item.getItemMeta();
        return meta.hasCustomModelData() && meta.getCustomModelData() == 99005;
    }
    
    private void activatePowerCrystal(Player player) {
        powerCrystalHolders.add(player);
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        World world = player.getWorld();
        world.spawnParticle(Particle.REDSTONE, player.getLocation().add(0, 1, 0), 20, 0.5, 1, 0.5, 
            new Particle.DustOptions(org.bukkit.Color.PURPLE, 1.5f));
        world.spawnParticle(Particle.SPELL_WITCH, player.getLocation().add(0, 1, 0), 15, 0.3, 0.5, 0.3, 0.1);
        world.playSound(player.getLocation(), Sound.BLOCK_ENCHANTMENT_TABLE_USE, 1.0f, 1.2f);
        
        player.sendActionBar(ChatColor.LIGHT_PURPLE + "üíé –ö—Ä–∏—Å—Ç–∞–ª–ª —Å–∏–ª—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!");
    }
    
    private void deactivatePowerCrystal(Player player) {
        powerCrystalHolders.remove(player);
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∫—Ä–∏—Å—Ç–∞–ª–ª–∞
        player.removePotionEffect(PotionEffectType.INCREASE_DAMAGE);
        player.removePotionEffect(PotionEffectType.DAMAGE_RESISTANCE);
        player.removePotionEffect(PotionEffectType.REGENERATION);
        player.removePotionEffect(PotionEffectType.NIGHT_VISION);
        
        player.sendActionBar(ChatColor.GRAY + "üíé –ö—Ä–∏—Å—Ç–∞–ª–ª —Å–∏–ª—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
    }
    
    // –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ —Å–∏–ª—ã
    private void startPowerCrystalEffects() {
        new BukkitRunnable() {
            @Override
            public void run() {
                for (Player player : powerCrystalHolders) {
                    if (player.isOnline()) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—Ä–∏—Å—Ç–∞–ª–ª –≤—Å–µ –µ—â–µ –≤ —Ä—É–∫–µ
                        ItemStack mainHand = player.getInventory().getItemInMainHand();
                        ItemStack offHand = player.getInventory().getItemInOffHand();
                        
                        if (isPowerCrystal(mainHand) || isPowerCrystal(offHand)) {
                            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
                            player.addPotionEffect(new PotionEffect(PotionEffectType.INCREASE_DAMAGE, 60, 1, true, false)); // –°–∏–ª–∞ II
                            player.addPotionEffect(new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 60, 0, true, false)); // –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ I
                            player.addPotionEffect(new PotionEffect(PotionEffectType.REGENERATION, 60, 0, true, false)); // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è I
                            player.addPotionEffect(new PotionEffect(PotionEffectType.NIGHT_VISION, 400, 0, true, false)); // –ù–æ—á–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ
                            
                            // –ù–µ–±–æ–ª—å—à–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                            if (System.currentTimeMillis() % 5000 < 50) {
                                World world = player.getWorld();
                                world.spawnParticle(Particle.REDSTONE, player.getLocation().add(0, 1, 0), 5, 0.3, 0.5, 0.3,
                                    new Particle.DustOptions(org.bukkit.Color.PURPLE, 1.0f));
                                world.spawnParticle(Particle.SPELL_WITCH, player.getLocation().add(0, 1, 0), 3, 0.2, 0.3, 0.2, 0.05);
                            }
                        } else {
                            // –ö—Ä–∏—Å—Ç–∞–ª–ª –±–æ–ª—å—à–µ –Ω–µ –≤ —Ä—É–∫–µ - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
                            deactivatePowerCrystal(player);
                        }
                    }
                }
                
                // –û—á–∏—â–∞–µ–º –æ—Ç–∫–ª—é—á–∏–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
                powerCrystalHolders.removeIf(player -> !player.isOnline());
            }
        }.runTaskTimer(plugin, 0L, 20L); // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    }
    
    // –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–∞–ø–æ–≥ —Ç–µ–Ω–µ–π
    private void startShadowBootsEffects() {
        new BukkitRunnable() {
            @Override
            public void run() {
                for (Player player : org.bukkit.Bukkit.getOnlinePlayers()) {
                    boolean wasWearing = shadowBootsWearers.contains(player);
                    boolean isWearing = isWearingShadowBoots(player);
                    
                    if (isWearing) {
                        if (!wasWearing) {
                            shadowBootsWearers.add(player);
                            player.sendActionBar(ChatColor.DARK_GRAY + "üë§ –°–∞–ø–æ–≥–∏ —Ç–µ–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!");
                        }
                        
                        // –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å 3
                        player.addPotionEffect(new PotionEffect(PotionEffectType.SPEED, 60, 2, true, false));
                        
                        // –ù–µ–±–æ–ª—å—à–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                        if (System.currentTimeMillis() % 5000 < 50) {
                            World world = player.getWorld();
                            world.spawnParticle(Particle.SMOKE_LARGE, player.getLocation().add(0, 0.1, 0), 2, 0.2, 0.05, 0.2, 0.02);
                        }
                    } else if (wasWearing) {
                        shadowBootsWearers.remove(player);
                        player.sendActionBar(ChatColor.GRAY + "üë§ –°–∞–ø–æ–≥–∏ —Ç–µ–Ω–µ–π –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã");
                    }
                }
                
                // –û—á–∏—â–∞–µ–º –æ—Ç–∫–ª—é—á–∏–≤—à–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤
                shadowBootsWearers.removeIf(player -> !player.isOnline());
            }
        }.runTaskTimer(plugin, 0L, 20L); // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–ª–∞–≥–∏–Ω–∞
    public void cleanup() {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Å –∏–≥—Ä–æ–∫–æ–≤
        for (Player player : powerCrystalHolders) {
            deactivatePowerCrystal(player);
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–æ–≤
        for (BukkitRunnable system : activeFireworkSystems.values()) {
            if (!system.isCancelled()) {
                system.cancel();
            }
        }
        
        powerCrystalHolders.clear();
        teleportCooldowns.clear();
        shadowBootsCooldowns.clear();
        shadowBootsWearers.clear();
        swordPullCooldowns.clear();
        activeFireworkSystems.clear();
    }
} 
