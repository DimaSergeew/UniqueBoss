package org.bedepay.uniqueboss.listeners;

import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.CraftItemEvent;
import org.bukkit.event.inventory.PrepareItemCraftEvent;
import org.bukkit.inventory.CraftingInventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.Recipe;
import org.bukkit.inventory.ShapedRecipe;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.NamespacedKey;
import org.bukkit.plugin.Plugin;
import org.bedepay.uniqueboss.config.ConfigManager;
import io.papermc.paper.event.server.ServerResourcesReloadedEvent;

import java.util.Arrays;

public class ArmorCraftingListener implements Listener {
    
    private final ConfigManager config;
    private final Plugin plugin;
    
    public ArmorCraftingListener(ConfigManager config, Plugin plugin) {
        this.config = config;
        this.plugin = plugin;
    }
    
    @EventHandler
    public void onPrepareCraft(PrepareItemCraftEvent event) {
        Recipe recipe = event.getRecipe();
        
        if (recipe == null) return;
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –æ—Å–∫–æ–ª–∫–∏ –≤ —á—É–∂–∏—Ö —Ä–µ—Ü–µ–ø—Ç–∞—Ö
        if (recipe instanceof ShapedRecipe) {
            ShapedRecipe shapedRecipe = (ShapedRecipe) recipe;
            String key = shapedRecipe.getKey().getKey();
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –Ω–∞—à —Ä–µ—Ü–µ–ø—Ç, –Ω–æ –≤ —Å–µ—Ç–∫–µ –µ—Å—Ç—å –Ω–∞—à–∏ –æ—Å–∫–æ–ª–∫–∏ - –±–ª–æ–∫–∏—Ä—É–µ–º!
            if (!key.startsWith("dark_lord_")) {
                CraftingInventory inventory = event.getInventory();
                boolean hasDarkFragments = false;
                
                for (int i = 1; i <= 9; i++) {
                    ItemStack item = inventory.getItem(i);
                    if (isDarkFragment(item)) {
                        hasDarkFragments = true;
                        break;
                    }
                }
                
                if (hasDarkFragments) {
                    // –ë–ª–æ–∫–∏—Ä—É–µ–º —á—É–∂–æ–π —Ä–µ—Ü–µ–ø—Ç —Å –Ω–∞—à–∏–º–∏ –æ—Å–∫–æ–ª–∫–∞–º–∏!
                    event.getInventory().setResult(null);
                    plugin.getLogger().info("üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ä–µ—Ü–µ–ø—Ç " + key + " —Å –æ—Å–∫–æ–ª–∫–∞–º–∏ –±–æ—Å—Å–∞");
                    return;
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
        if (recipe instanceof ShapedRecipe) {
            ShapedRecipe shapedRecipe = (ShapedRecipe) recipe;
            String key = shapedRecipe.getKey().getKey();
            
            if (key.startsWith("dark_lord_")) {
                if (config.isVerboseLoggingEnabled()) {
                    plugin.getLogger().info("üîç DEBUG: –†–µ—Ü–µ–ø—Ç " + key + " –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –≤–µ—Ä—Å—Ç–∞–∫–µ");
                }
                
                // –í–ê–ñ–ù–û: –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞!
                // –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤ onCraftItem
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–∫–æ–ª–∫–∏ –≤–æ–æ–±—â–µ
                CraftingInventory inventory = event.getInventory();
                boolean hasPrismarineShards = false;
                
                for (int i = 1; i <= 9; i++) { // –°–ª–æ—Ç—ã –∫—Ä–∞—Ñ—Ç–∞ (–±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
                    ItemStack item = inventory.getItem(i);
                    if (item != null && item.getType() == Material.PRISMARINE_SHARD) {
                        hasPrismarineShards = true;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞—à–∏–º –æ—Å–∫–æ–ª–∫–æ–º
                        if (isDarkFragment(item)) {
                            if (config.isVerboseLoggingEnabled()) {
                                plugin.getLogger().info("‚úÖ DEBUG: –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –æ—Å–∫–æ–ª–æ–∫ –≤ —Å–ª–æ—Ç–µ " + i + 
                                    ": " + (item.hasItemMeta() && item.getItemMeta().hasDisplayName() ? 
                                    item.getItemMeta().getDisplayName() : "–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"));
                            }
                        } else {
                            if (config.isVerboseLoggingEnabled()) {
                                plugin.getLogger().info("‚ö†Ô∏è DEBUG: –ù–∞–π–¥–µ–Ω –ù–ï–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Å–∫–æ–ª–æ–∫ –≤ —Å–ª–æ—Ç–µ " + i);
                            }
                        }
                    }
                }
                
                if (!hasPrismarineShards && config.isVerboseLoggingEnabled()) {
                    plugin.getLogger().info("‚ÑπÔ∏è DEBUG: –ù–µ—Ç –ø—Ä–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–∫–æ–ª–∫–æ–≤ –≤ —Å–µ—Ç–∫–µ –∫—Ä–∞—Ñ—Ç–∞");
                }
            }
        }
    }
    
    @EventHandler
    public void onCraftItem(CraftItemEvent event) {
        if (!(event.getWhoClicked() instanceof Player)) return;
        
        Player player = (Player) event.getWhoClicked();
        Recipe recipe = event.getRecipe();
        
        if (recipe instanceof ShapedRecipe) {
            ShapedRecipe shapedRecipe = (ShapedRecipe) recipe;
            String key = shapedRecipe.getKey().getKey();
            
            if (key.startsWith("dark_lord_")) {
                if (config.isVerboseLoggingEnabled()) {
                    plugin.getLogger().info("DEBUG: –ò–≥—Ä–æ–∫ " + player.getName() + 
                        " –ø—ã—Ç–∞–µ—Ç—Å—è —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å " + key);
                }
                handleDarkLordArmorCraft(player, key, event);
            } else {
                // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ó–∞–ø—Ä–µ—â–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –æ—Å–∫–æ–ª–∫–∏ –≤ —á—É–∂–∏—Ö —Ä–µ—Ü–µ–ø—Ç–∞—Ö
                CraftingInventory inventory = event.getInventory();
                boolean hasDarkFragments = false;
                
                for (int i = 1; i <= 9; i++) {
                    ItemStack item = inventory.getItem(i);
                    if (isDarkFragment(item)) {
                        hasDarkFragments = true;
                        break;
                    }
                }
                
                if (hasDarkFragments) {
                    event.setCancelled(true);
                    player.sendMessage(ChatColor.RED + "‚ùå –û—Å–∫–æ–ª–∫–∏ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –µ–≥–æ –±—Ä–æ–Ω–∏!");
                    plugin.getLogger().info("üõ°Ô∏è –ó–ê–©–ò–¢–ê: –ò–≥—Ä–æ–∫ " + player.getName() + 
                        " –ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–∫–æ–ª–∫–∏ –±–æ—Å—Å–∞ –≤ —Ä–µ—Ü–µ–ø—Ç–µ " + key);
                }
            }
        }
    }
    
    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ—Å–ª–µ /reload –∏–ª–∏ /minecraft:reload
     */
    @EventHandler
    public void onServerResourcesReloaded(ServerResourcesReloadedEvent event) {
        plugin.getLogger().info("üîÑ –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –†–ï–°–£–†–°–û–í –°–ï–†–í–ï–†–ê!");
        plugin.getLogger().info("üìã –ü—Ä–∏—á–∏–Ω–∞: " + event.getCause().name());
        plugin.getLogger().info("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç—ã –∫—Ä–∞—Ñ—Ç–∞ –±—Ä–æ–Ω–∏...");
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (–¥–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤)
        plugin.getServer().getScheduler().runTaskLater(plugin, () -> {
            registerRecipes();
            plugin.getLogger().info("‚úÖ –†–µ—Ü–µ–ø—Ç—ã –∫—Ä–∞—Ñ—Ç–∞ –±—Ä–æ–Ω–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏!");
        }, 40L); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏
    }
    
    private void handleDarkLordArmorCraft(Player player, String armorType, CraftItemEvent event) {
        int requiredFragments = getRequiredFragments(armorType);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—á–∏—Ç–∞–µ–º –æ—Å–∫–æ–ª–∫–∏ –≤ –°–ï–¢–ö–ï –ö–†–ê–§–¢–ê, –∞ –Ω–µ –≤ –æ–±—â–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!
        CraftingInventory craftingInv = event.getInventory();
        int fragmentsInCraftingGrid = countDarkFragmentsInCraftingGrid(craftingInv);
        int playerFragments = countDarkFragments(player); // –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
        plugin.getLogger().info("üî® –ü–û–ü–´–¢–ö–ê –ö–†–ê–§–¢–ê " + armorType.toUpperCase() + ":");
        plugin.getLogger().info("   üë§ –ò–≥—Ä–æ–∫: " + player.getName());
        plugin.getLogger().info("   üìã –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Å–∫–æ–ª–∫–æ–≤: " + requiredFragments);
        plugin.getLogger().info("   üõ†Ô∏è –í —Å–µ—Ç–∫–µ –∫—Ä–∞—Ñ—Ç–∞: " + fragmentsInCraftingGrid + " –≤–∞–ª–∏–¥–Ω—ã—Ö –æ—Å–∫–æ–ª–∫–æ–≤");
        plugin.getLogger().info("   üí∞ –í –æ–±—â–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: " + playerFragments + " –≤–∞–ª–∏–¥–Ω—ã—Ö –æ—Å–∫–æ–ª–∫–æ–≤");
        
        if (fragmentsInCraftingGrid < requiredFragments) {
            event.setCancelled(true);
            plugin.getLogger().info("‚ùå –ö–†–ê–§–¢ –û–¢–ú–ï–ù–ï–ù: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Å–∫–æ–ª–∫–æ–≤ –≤ —Å–µ—Ç–∫–µ –∫—Ä–∞—Ñ—Ç–∞");
            player.sendMessage(ChatColor.RED + "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –æ—Å–∫–æ–ª–∫–æ–≤ –≤ —Å–µ—Ç–∫–µ –∫—Ä–∞—Ñ—Ç–∞! –¢—Ä–µ–±—É–µ—Ç—Å—è: " + 
                requiredFragments + ", –≤ —Å–µ—Ç–∫–µ: " + fragmentsInCraftingGrid);
            return;
        }
        
        // –ù–ï —É–±–∏—Ä–∞–µ–º –æ—Å–∫–æ–ª–∫–∏ –≤—Ä—É—á–Ω—É—é - –ø—É—Å—Ç—å Minecraft —Å–∞–º –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ!
        // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ —Å–µ—Ç–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –æ—Å–∫–æ–ª–∫–æ–≤
        
        // –£—Å–ø–µ—à–Ω—ã–π –∫—Ä–∞—Ñ—Ç
        String itemName = getArmorDisplayName(armorType);
        player.sendMessage(ChatColor.GREEN + "‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: " + ChatColor.GOLD + itemName);
        
        // –≠—Ñ—Ñ–µ–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –∫—Ä–∞—Ñ—Ç–∞
        player.getWorld().playSound(player.getLocation(), 
            org.bukkit.Sound.UI_TOAST_CHALLENGE_COMPLETE, 1.5f, 1.0f);
        player.getWorld().spawnParticle(org.bukkit.Particle.TOTEM, 
            player.getLocation().add(0, 1, 0), 20, 1, 1, 1, 0.1);
            
        plugin.getLogger().info("‚úÖ –ò–≥—Ä–æ–∫ " + player.getName() + " —É—Å–ø–µ—à–Ω–æ —Å–∫—Ä–∞—Ñ—Ç–∏–ª " + itemName + 
            " (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ " + fragmentsInCraftingGrid + " –æ—Å–∫–æ–ª–∫–æ–≤ –∏–∑ —Å–µ—Ç–∫–∏)");
    }
    
    private int getRequiredFragments(String armorType) {
        switch (armorType) {
            case "dark_lord_helmet":
                return 6; // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            case "dark_lord_chestplate":
                return 8;
            case "dark_lord_leggings":
                return 7;
            case "dark_lord_boots":
                return 4;
            default:
                return 8;
        }
    }
    
    private String getArmorDisplayName(String armorType) {
        switch (armorType) {
            case "dark_lord_helmet":
                return "–®–ª–µ–º –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è";
            case "dark_lord_chestplate":
                return "–ù–∞–≥—Ä—É–¥–Ω–∏–∫ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è";
            case "dark_lord_leggings":
                return "–ü–æ–Ω–æ–∂–∏ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è";
            case "dark_lord_boots":
                return "–°–∞–ø–æ–≥–∏ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è";
            default:
                return "–î–æ—Å–ø–µ—Ö –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è";
        }
    }
    
    private boolean hasEnoughFragments(Player player, String armorType) {
        int required = getRequiredFragments(armorType);
        int available = countDarkFragments(player);
        return available >= required;
    }
    
    /**
     * –°–û–í–ú–ï–°–¢–ò–ú–ê–Ø –° 1.20.4 –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–∫–æ–ª–∫–æ–≤
     */
    private boolean isDarkFragment(ItemStack item) {
        if (item == null || item.getType() != Material.PRISMARINE_SHARD) return false;
        if (!item.hasItemMeta()) return false;
        
        ItemMeta meta = item.getItemMeta();
        
        // –û–°–ù–û–í–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
        if (meta.hasDisplayName()) {
            String displayName = ChatColor.stripColor(meta.getDisplayName());
            if (displayName.contains("–û–°–ö–û–õ–û–ö –¢–ï–ú–ù–û–ì–û –ü–û–í–ï–õ–ò–¢–ï–õ–Ø") || 
                displayName.contains("–û—Å–∫–æ–ª–æ–∫ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è")) {
                if (config.isVerboseLoggingEnabled()) {
                    plugin.getLogger().info("DEBUG: –ù–∞–π–¥–µ–Ω –æ—Å–∫–æ–ª–æ–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: " + displayName);
                }
                return true;
            }
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ CustomModelData
        if (meta.hasCustomModelData() && meta.getCustomModelData() == config.getFragmentsCustomModelData()) {
            if (config.isVerboseLoggingEnabled()) {
                plugin.getLogger().info("DEBUG: –ù–∞–π–¥–µ–Ω –æ—Å–∫–æ–ª–æ–∫ –ø–æ CustomModelData: " + config.getFragmentsCustomModelData());
            }
            return true;
        }
        
        return false;
    }
    
    /**
     * –ù–û–í–´–ô –ú–ï–¢–û–î: –°—á–∏—Ç–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –æ—Å–∫–æ–ª–∫–∏ —Ç–æ–ª—å–∫–æ –≤ —Å–µ—Ç–∫–µ –∫—Ä–∞—Ñ—Ç–∞ (—Å–ª–æ—Ç—ã 1-9)
     */
    private int countDarkFragmentsInCraftingGrid(CraftingInventory craftingInv) {
        int count = 0;
        plugin.getLogger().info("üîç –ê–ù–ê–õ–ò–ó –û–°–ö–û–õ–ö–û–í –í –°–ï–¢–ö–ï –ö–†–ê–§–¢–ê:");
        
        for (int slot = 1; slot <= 9; slot++) { // –°–ª–æ—Ç—ã —Å–µ—Ç–∫–∏ –∫—Ä–∞—Ñ—Ç–∞ (–±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
            ItemStack item = craftingInv.getItem(slot);
            if (item != null && item.getType() == Material.PRISMARINE_SHARD) {
                plugin.getLogger().info("üìç –°–ª–æ—Ç –∫—Ä–∞—Ñ—Ç–∞ " + slot + ": –ø—Ä–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Å–∫–æ–ª–æ–∫, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + item.getAmount());
                
                if (isDarkFragment(item)) {
                    count += item.getAmount();
                    plugin.getLogger().info("‚úÖ –°–ª–æ—Ç –∫—Ä–∞—Ñ—Ç–∞ " + slot + ": " + item.getAmount() + " –í–ê–õ–ò–î–ù–´–• –æ—Å–∫–æ–ª–∫–æ–≤");
                } else {
                    plugin.getLogger().info("‚ùå –°–ª–æ—Ç –∫—Ä–∞—Ñ—Ç–∞ " + slot + ": " + item.getAmount() + " –ù–ï–í–ê–õ–ò–î–ù–´–• –æ—Å–∫–æ–ª–∫–æ–≤");
                }
            }
        }
        
        plugin.getLogger().info("üìä –ò–¢–û–ì–û –≤ —Å–µ—Ç–∫–µ –∫—Ä–∞—Ñ—Ç–∞: " + count + " –≤–∞–ª–∏–¥–Ω—ã—Ö –æ—Å–∫–æ–ª–∫–æ–≤");
        return count;
    }

    private int countDarkFragments(Player player) {
        int count = 0;
        plugin.getLogger().info("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–°–ö–û–õ–ö–û–í –£ " + player.getName() + ":");
        
        for (int slot = 0; slot < player.getInventory().getSize(); slot++) {
            ItemStack item = player.getInventory().getItem(slot);
            if (item != null && item.getType() == Material.PRISMARINE_SHARD) {
                plugin.getLogger().info("üìç –°–ª–æ—Ç " + slot + ": –Ω–∞–π–¥–µ–Ω –ø—Ä–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Å–∫–æ–ª–æ–∫, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + item.getAmount());
                
                if (isDarkFragment(item)) {
                    count += item.getAmount();
                    plugin.getLogger().info("‚úÖ –°–ª–æ—Ç " + slot + ": " + item.getAmount() + " –í–ê–õ–ò–î–ù–´–• –æ—Å–∫–æ–ª–∫–æ–≤");
                    
                    // –î–µ—Ç–∞–ª–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ—Å–∫–æ–ª–∫–∞
                    ItemMeta meta = item.getItemMeta();
                    if (meta != null) {
                        if (meta.hasDisplayName()) {
                            plugin.getLogger().info("   üìù DisplayName: " + meta.getDisplayName());
                        }
                        if (meta.hasCustomModelData()) {
                            plugin.getLogger().info("   üé® CustomModelData: " + meta.getCustomModelData());
                        }
                        if (meta.hasLore()) {
                            plugin.getLogger().info("   üìú –õ–æ—Ä: " + meta.getLore().size() + " —Å—Ç—Ä–æ–∫");
                        }
                    }
                } else {
                    plugin.getLogger().info("‚ùå –°–ª–æ—Ç " + slot + ": " + item.getAmount() + " –ù–ï–í–ê–õ–ò–î–ù–´–• –æ—Å–∫–æ–ª–∫–æ–≤");
                    
                    // –î–µ—Ç–∞–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ—Å–∫–æ–ª–∫–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    ItemMeta meta = item.getItemMeta();
                    if (meta != null) {
                        if (!meta.hasDisplayName()) {
                            plugin.getLogger().info("   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ—Ç displayName");
                        } else {
                            String displayName = ChatColor.stripColor(meta.getDisplayName());
                            plugin.getLogger().info("   üìù DisplayName: " + meta.getDisplayName());
                            plugin.getLogger().info("   üìù –û—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: " + displayName);
                            
                            if (!displayName.contains("–û–°–ö–û–õ–û–ö –¢–ï–ú–ù–û–ì–û –ü–û–í–ï–õ–ò–¢–ï–õ–Ø") && 
                                !displayName.contains("–û—Å–∫–æ–ª–æ–∫ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è")) {
                                plugin.getLogger().info("   ‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–µ–±—É–µ–º—ã–π —Ç–µ–∫—Å—Ç");
                            }
                        }
                        
                        if (!meta.hasCustomModelData()) {
                            plugin.getLogger().info("   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ—Ç CustomModelData");
                        } else {
                            plugin.getLogger().info("   üé® CustomModelData: " + meta.getCustomModelData() + 
                                " (—Ç—Ä–µ–±—É–µ—Ç—Å—è: " + config.getFragmentsCustomModelData() + ")");
                            
                            if (meta.getCustomModelData() != config.getFragmentsCustomModelData()) {
                                plugin.getLogger().info("   ‚ùå CustomModelData –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–º—É");
                            }
                        }
                    } else {
                        plugin.getLogger().info("   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ—Ç ItemMeta");
                    }
                }
            }
        }
        
        plugin.getLogger().info("üìä –ò–¢–û–ì–û —É " + player.getName() + ": " + count + " –≤–∞–ª–∏–¥–Ω—ã—Ö –æ—Å–∫–æ–ª–∫–æ–≤");
        return count;
    }
    
    private void removeDarkFragments(Player player, int amount) {
        int remaining = amount;
        for (int i = 0; i < player.getInventory().getSize(); i++) {
            ItemStack item = player.getInventory().getItem(i);
            if (isDarkFragment(item)) {
                int itemAmount = item.getAmount();
                if (itemAmount <= remaining) {
                    player.getInventory().setItem(i, null);
                    remaining -= itemAmount;
                } else {
                    item.setAmount(itemAmount - remaining);
                    remaining = 0;
                }
                
                if (remaining <= 0) break;
            }
        }
        plugin.getLogger().info("DEBUG: –£–¥–∞–ª–µ–Ω–æ " + (amount - remaining) + " –æ—Å–∫–æ–ª–∫–æ–≤ —É " + player.getName());
    }
    
    // –°–û–í–ú–ï–°–¢–ò–ú–´–ï –° 1.20.4 –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
    public void registerRecipes() {
        plugin.getLogger().info("üîß –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∫—Ä–∞—Ñ—Ç–∞ –±—Ä–æ–Ω–∏ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è...");
        plugin.getLogger().info("üéØ –í–µ—Ä—Å–∏—è: Paper 1.20.4+ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è");
        
        try {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã
            removeExistingRecipes();
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ 1.20.4
            plugin.getServer().getScheduler().runTaskLater(plugin, () -> {
                int registered = 0;
                
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                if (registerHelmetRecipe()) {
                    registered++;
                    plugin.getLogger().info("‚úÖ –®–ª–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
                } else {
                    plugin.getLogger().warning("‚ùå –®–ª–µ–º –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
                }
                
                if (registerChestplateRecipe()) {
                    registered++;
                    plugin.getLogger().info("‚úÖ –ù–∞–≥—Ä—É–¥–Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
                } else {
                    plugin.getLogger().warning("‚ùå –ù–∞–≥—Ä—É–¥–Ω–∏–∫ –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
                }
                
                if (registerLeggingsRecipe()) {
                    registered++;
                    plugin.getLogger().info("‚úÖ –ü–æ–Ω–æ–∂–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
                } else {
                    plugin.getLogger().warning("‚ùå –ü–æ–Ω–æ–∂–∏ –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
                }
                
                if (registerBootsRecipe()) {
                    registered++;
                    plugin.getLogger().info("‚úÖ –°–∞–ø–æ–≥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
                } else {
                    plugin.getLogger().warning("‚ùå –°–∞–ø–æ–≥–∏ –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
                }
                
                plugin.getLogger().info("üìä –ò–¢–û–ì–û –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: " + registered + "/4 —Ä–µ—Ü–µ–ø—Ç–æ–≤");
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                plugin.getServer().getScheduler().runTaskLater(plugin, () -> {
                    verifyRecipeRegistration();
                }, 60L);
                
            }, 40L); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è 1.20.4
            
        } catch (Exception e) {
            plugin.getLogger().severe("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void verifyRecipeRegistration() {
        plugin.getLogger().info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∫—Ä–∞—Ñ—Ç–∞ –±—Ä–æ–Ω–∏...");
        
        String[] recipeKeys = {"dark_lord_helmet", "dark_lord_chestplate", "dark_lord_leggings", "dark_lord_boots"};
        String[] recipeNames = {"–®–ª–µ–º –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è", "–ù–∞–≥—Ä—É–¥–Ω–∏–∫ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è", "–ü–æ–Ω–æ–∂–∏ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è", "–°–∞–ø–æ–≥–∏ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è"};
        int foundRecipes = 0;
        
        for (int i = 0; i < recipeKeys.length; i++) {
            String key = recipeKeys[i];
            String name = recipeNames[i];
            NamespacedKey namespacedKey = new NamespacedKey(plugin, key);
            Recipe recipe = plugin.getServer().getRecipe(namespacedKey);
            
            if (recipe != null) {
                foundRecipes++;
                plugin.getLogger().info("‚úÖ –†–µ—Ü–µ–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: " + name + " (" + key + ")");
            } else {
                plugin.getLogger().warning("‚ùå –†–µ—Ü–µ–ø—Ç –ù–ï –Ω–∞–π–¥–µ–Ω: " + name + " (" + key + ")");
            }
        }
        
        if (foundRecipes == 4) {
            plugin.getLogger().info("üéâ –í–°–ï 4 –†–ï–¶–ï–ü–¢–ê –ë–†–û–ù–ò –£–°–ü–ï–®–ù–û –†–ê–ë–û–¢–ê–Æ–¢!");
            plugin.getLogger().info("üí° –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∫—Ä–∞—Ñ—Ç–∏—Ç—å –±—Ä–æ–Ω—é –∏–∑ –æ—Å–∫–æ–ª–∫–æ–≤ –Ω–∞ –≤–µ—Ä—Å—Ç–∞–∫–µ");
        } else {
            plugin.getLogger().warning("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ " + foundRecipes + "/4 —Ä–µ—Ü–µ–ø—Ç–æ–≤!");
            plugin.getLogger().warning("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bossdebug recipes check-registration");
            plugin.getLogger().warning("üîÑ –ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /reload –¥–ª—è –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
        }
    }
    
    public void removeExistingRecipes() {
        try {
            String[] recipeNames = {"dark_lord_helmet", "dark_lord_chestplate", "dark_lord_leggings", "dark_lord_boots"};
            int removed = 0;
            
            for (String name : recipeNames) {
                NamespacedKey key = new NamespacedKey(plugin, name);
                if (plugin.getServer().removeRecipe(key)) {
                    removed++;
                    plugin.getLogger().info("üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ä–µ—Ü–µ–ø—Ç: " + name);
                }
            }
            
            if (removed > 0) {
                plugin.getLogger().info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ " + removed + " —Å—Ç–∞—Ä—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤");
            }
        } catch (Exception e) {
            plugin.getLogger().warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤: " + e.getMessage());
        }
    }
    
    private boolean registerHelmetRecipe() {
        try {
            ItemStack helmet = createDarkLordHelmet();
            NamespacedKey key = new NamespacedKey(plugin, "dark_lord_helmet");
            
            ShapedRecipe recipe = new ShapedRecipe(key, helmet);
            recipe.shape("FFF", "F F", "   ");
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Material –¥–ª—è –±–æ–ª—å—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            recipe.setIngredient('F', Material.PRISMARINE_SHARD);
            
            plugin.getLogger().info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç —à–ª–µ–º–∞ —Å Material.PRISMARINE_SHARD");
            return plugin.getServer().addRecipe(recipe);
        } catch (Exception e) {
            plugin.getLogger().severe("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à–ª–µ–º–∞: " + e.getMessage());
            return false;
        }
    }
    
    private boolean registerChestplateRecipe() {
        try {
            ItemStack chestplate = createDarkLordChestplate();
            NamespacedKey key = new NamespacedKey(plugin, "dark_lord_chestplate");
            
            ShapedRecipe recipe = new ShapedRecipe(key, chestplate);
            recipe.shape("F F", "FFF", "FFF");
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Material –¥–ª—è –±–æ–ª—å—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            recipe.setIngredient('F', Material.PRISMARINE_SHARD);
            
            plugin.getLogger().info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç –Ω–∞–≥—Ä—É–¥–Ω–∏–∫–∞ —Å Material.PRISMARINE_SHARD");
            return plugin.getServer().addRecipe(recipe);
        } catch (Exception e) {
            plugin.getLogger().severe("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä—É–¥–Ω–∏–∫–∞: " + e.getMessage());
            return false;
        }
    }
    
    private boolean registerLeggingsRecipe() {
        try {
            ItemStack leggings = createDarkLordLeggings();
            NamespacedKey key = new NamespacedKey(plugin, "dark_lord_leggings");
            
            ShapedRecipe recipe = new ShapedRecipe(key, leggings);
            recipe.shape("FFF", "F F", "F F");
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Material –¥–ª—è –±–æ–ª—å—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            recipe.setIngredient('F', Material.PRISMARINE_SHARD);
            
            plugin.getLogger().info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç –ø–æ–Ω–æ–∂–µ–π —Å Material.PRISMARINE_SHARD");
            return plugin.getServer().addRecipe(recipe);
        } catch (Exception e) {
            plugin.getLogger().severe("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–Ω–æ–∂–µ–π: " + e.getMessage());
            return false;
        }
    }
    
    private boolean registerBootsRecipe() {
        try {
            ItemStack boots = createDarkLordBoots();
            NamespacedKey key = new NamespacedKey(plugin, "dark_lord_boots");
            
            ShapedRecipe recipe = new ShapedRecipe(key, boots);
            recipe.shape("   ", "F F", "F F"); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Material –¥–ª—è –±–æ–ª—å—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            recipe.setIngredient('F', Material.PRISMARINE_SHARD);
            
            plugin.getLogger().info("üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç —Å–∞–ø–æ–≥ —Å Material.PRISMARINE_SHARD (4 –æ—Å–∫–æ–ª–∫–∞)");
            return plugin.getServer().addRecipe(recipe);
        } catch (Exception e) {
            plugin.getLogger().severe("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∞–ø–æ–≥: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * –°–û–í–ú–ï–°–¢–ò–ú–´–ô –° 1.20.4 –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–∫–æ–ª–∫–æ–≤
     */
    private ItemStack createDarkFragment() {
        ItemStack fragment = new ItemStack(Material.PRISMARINE_SHARD);
        ItemMeta meta = fragment.getItemMeta();
        
        if (meta != null) {
            // –ü—Ä–æ—Å—Ç–æ–µ, —è—Å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            meta.setDisplayName(ChatColor.DARK_PURPLE + "" + ChatColor.BOLD + "üñ§ –û–°–ö–û–õ–û–ö –¢–ï–ú–ù–û–ì–û –ü–û–í–ï–õ–ò–¢–ï–õ–Ø üñ§");
            meta.setCustomModelData(config.getFragmentsCustomModelData());
            
            // –õ–æ—Ä –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            meta.setLore(Arrays.asList(
                ChatColor.GRAY + "–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –±—Ä–æ–Ω–∏",
                ChatColor.DARK_GRAY + "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç",
                ChatColor.YELLOW + "–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤ —Ñ–æ—Ä–º–µ –¥–æ—Å–ø–µ—Ö–∞ –Ω–∞ –≤–µ—Ä—Å—Ç–∞–∫"
            ));
            
            fragment.setItemMeta(meta);
        }
        
        return fragment;
    }
    
    private ItemStack createDarkLordHelmet() {
        ItemStack helmet = new ItemStack(Material.NETHERITE_HELMET);
        ItemMeta meta = helmet.getItemMeta();
        
        if (meta != null) {
            meta.setDisplayName(ChatColor.DARK_RED + "" + ChatColor.BOLD + "üëë –®–õ–ï–ú –¢–ï–ú–ù–û–ì–û –ü–û–í–ï–õ–ò–¢–ï–õ–Ø üëë");
            meta.setLore(Arrays.asList(
                ChatColor.GRAY + "–®–ª–µ–º, –≤—ã–∫–æ–≤–∞–Ω–Ω—ã–π –∏–∑ –æ—Å–∫–æ–ª–∫–æ–≤",
                ChatColor.GRAY + "–ø–æ–±–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è",
                "",
                ChatColor.GOLD + "" + ChatColor.BOLD + "–°–ü–û–°–û–ë–ù–û–°–¢–ò:",
                ChatColor.YELLOW + "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ V",
                ChatColor.YELLOW + "üíé –ü—Ä–æ—á–Ω–æ—Å—Ç—å III",
                ChatColor.YELLOW + "üîß –ü–æ—á–∏–Ω–∫–∞",
                "",
                ChatColor.LIGHT_PURPLE + "–ß–∞—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è",
                ChatColor.GRAY + "–°–æ–±–µ—Ä–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è",
                ChatColor.GRAY + "—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π!",
                "",
                ChatColor.DARK_GRAY + "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
            ));
            
            meta.addEnchant(Enchantment.PROTECTION_ENVIRONMENTAL, 5, true);
            meta.addEnchant(Enchantment.DURABILITY, 3, true);
            meta.addEnchant(Enchantment.MENDING, 1, true);
            meta.setCustomModelData(11111);
            
            helmet.setItemMeta(meta);
        }
        
        return helmet;
    }
    
    private ItemStack createDarkLordChestplate() {
        ItemStack chestplate = new ItemStack(Material.NETHERITE_CHESTPLATE);
        ItemMeta meta = chestplate.getItemMeta();
        
        if (meta != null) {
            meta.setDisplayName(ChatColor.DARK_RED + "" + ChatColor.BOLD + "‚ö° –ù–ê–ì–†–£–î–ù–ò–ö –¢–ï–ú–ù–û–ì–û –ü–û–í–ï–õ–ò–¢–ï–õ–Ø ‚ö°");
            meta.setLore(Arrays.asList(
                ChatColor.GRAY + "–ù–∞–≥—Ä—É–¥–Ω–∏–∫, –≤—ã–∫–æ–≤–∞–Ω–Ω—ã–π –∏–∑ –æ—Å–∫–æ–ª–∫–æ–≤",
                ChatColor.GRAY + "–ø–æ–±–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è",
                "",
                ChatColor.GOLD + "" + ChatColor.BOLD + "–°–ü–û–°–û–ë–ù–û–°–¢–ò:",
                ChatColor.YELLOW + "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ V",
                ChatColor.YELLOW + "üíé –ü—Ä–æ—á–Ω–æ—Å—Ç—å III", 
                ChatColor.YELLOW + "üîß –ü–æ—á–∏–Ω–∫–∞",
                "",
                ChatColor.LIGHT_PURPLE + "–ß–∞—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è",
                ChatColor.GRAY + "–°–æ–±–µ—Ä–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è",
                ChatColor.GRAY + "—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π!",
                "",
                ChatColor.DARK_GRAY + "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
            ));
            
            meta.addEnchant(Enchantment.PROTECTION_ENVIRONMENTAL, 5, true);
            meta.addEnchant(Enchantment.DURABILITY, 3, true);
            meta.addEnchant(Enchantment.MENDING, 1, true);
            meta.setCustomModelData(22222);
            
            chestplate.setItemMeta(meta);
        }
        
        return chestplate;
    }
    
    private ItemStack createDarkLordLeggings() {
        ItemStack leggings = new ItemStack(Material.NETHERITE_LEGGINGS);
        ItemMeta meta = leggings.getItemMeta();
        
        if (meta != null) {
            meta.setDisplayName(ChatColor.DARK_RED + "" + ChatColor.BOLD + "ü¶µ –ü–û–ù–û–ñ–ò –¢–ï–ú–ù–û–ì–û –ü–û–í–ï–õ–ò–¢–ï–õ–Ø ü¶µ");
            meta.setLore(Arrays.asList(
                ChatColor.GRAY + "–ü–æ–Ω–æ–∂–∏, –≤—ã–∫–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–∫–æ–ª–∫–æ–≤",
                ChatColor.GRAY + "–ø–æ–±–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è",
                "",
                ChatColor.GOLD + "" + ChatColor.BOLD + "–°–ü–û–°–û–ë–ù–û–°–¢–ò:",
                ChatColor.YELLOW + "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ V",
                ChatColor.YELLOW + "üíé –ü—Ä–æ—á–Ω–æ—Å—Ç—å III",
                ChatColor.YELLOW + "üîß –ü–æ—á–∏–Ω–∫–∞",
                "",
                ChatColor.LIGHT_PURPLE + "–ß–∞—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è",
                ChatColor.GRAY + "–°–æ–±–µ—Ä–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è",
                ChatColor.GRAY + "—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π!",
                "",
                ChatColor.DARK_GRAY + "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
            ));
            
            meta.addEnchant(Enchantment.PROTECTION_ENVIRONMENTAL, 5, true);
            meta.addEnchant(Enchantment.DURABILITY, 3, true);
            meta.addEnchant(Enchantment.MENDING, 1, true);
            meta.setCustomModelData(33333);
            
            leggings.setItemMeta(meta);
        }
        
        return leggings;
    }
    
    private ItemStack createDarkLordBoots() {
        ItemStack boots = new ItemStack(Material.NETHERITE_BOOTS);
        ItemMeta meta = boots.getItemMeta();
        
        if (meta != null) {
            meta.setDisplayName(ChatColor.DARK_RED + "" + ChatColor.BOLD + "üë¢ –°–ê–ü–û–ì–ò –¢–ï–ú–ù–û–ì–û –ü–û–í–ï–õ–ò–¢–ï–õ–Ø üë¢");
            meta.setLore(Arrays.asList(
                ChatColor.GRAY + "–°–∞–ø–æ–≥–∏, –≤—ã–∫–æ–≤–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–∫–æ–ª–∫–æ–≤",
                ChatColor.GRAY + "–ø–æ–±–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è",
                "",
                ChatColor.GOLD + "" + ChatColor.BOLD + "–°–ü–û–°–û–ë–ù–û–°–¢–ò:",
                ChatColor.YELLOW + "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ V",
                ChatColor.YELLOW + "üíé –ü—Ä–æ—á–Ω–æ—Å—Ç—å III",
                ChatColor.YELLOW + "üîß –ü–æ—á–∏–Ω–∫–∞",
                ChatColor.AQUA + "üåä –ü–æ–¥–≤–æ–¥–Ω–∞—è —Ö–æ–¥—å–±–∞ III",
                "",
                ChatColor.LIGHT_PURPLE + "–ß–∞—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞ –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è",
                ChatColor.GRAY + "–°–æ–±–µ—Ä–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è",
                ChatColor.GRAY + "—É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π!",
                "",
                ChatColor.DARK_GRAY + "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
            ));
            
            meta.addEnchant(Enchantment.PROTECTION_ENVIRONMENTAL, 5, true);
            meta.addEnchant(Enchantment.DURABILITY, 3, true);
            meta.addEnchant(Enchantment.MENDING, 1, true);
            meta.addEnchant(Enchantment.DEPTH_STRIDER, 3, true);
            meta.setCustomModelData(44444);
            
            boots.setItemMeta(meta);
        }
        
        return boots;
    }
} 