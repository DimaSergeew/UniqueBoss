package org.bedepay.uniqueboss.events;

import org.bukkit.*;
import org.bukkit.entity.Player;
import org.bukkit.entity.Entity;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.scheduler.BukkitTask;
import org.bedepay.uniqueboss.UniqueBoss;
import org.bedepay.uniqueboss.boss.UniqueBossManager;
import org.bedepay.uniqueboss.config.ConfigManager;

import java.time.LocalTime;
import java.util.*;

public class BossEventManager {
    
    private final UniqueBoss plugin;
    private final ConfigManager config;
    private final Random random = new Random();
    
    private BukkitTask eventSchedulerTask;
    private BukkitTask reminderTask;
    private BukkitTask inactivityTask;
    
    private long nextSpawnTime;
    private Location bossSpawnLocation;
    private long bossSpawnTime;
    private int reminderCount = 0;
    private boolean removalWarningGiven = false;
    private boolean isForcedSpawn = false; // –§–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–∞–≤–Ω–∞
    
    public BossEventManager(UniqueBoss plugin, ConfigManager config) {
        this.plugin = plugin;
        this.config = config;
        
        if (config.isEventEnabled()) {
            scheduleNextEvent();
            plugin.getLogger().info("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–≤–µ–Ω—Ç—ã –±–æ—Å—Å–∞ –≤–∫–ª—é—á–µ–Ω—ã!");
            plugin.getLogger().info("‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∏–≤–µ–Ω—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ " + 
                getTimeUntilNextSpawn() + " –º–∏–Ω—É—Ç");
        } else {
            plugin.getLogger().info("‚è∏Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–≤–µ–Ω—Ç—ã –±–æ—Å—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ");
        }
    }
    
    public void scheduleNextEvent() {
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if (eventSchedulerTask != null) {
            eventSchedulerTask.cancel();
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è —Å–ø–∞–≤–Ω–∞
        int minInterval = config.getMinSpawnInterval();
        int maxInterval = config.getMaxSpawnInterval();
        int interval = minInterval + random.nextInt(maxInterval - minInterval + 1);
        
        nextSpawnTime = System.currentTimeMillis() + (interval * 60 * 1000L);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        eventSchedulerTask = new BukkitRunnable() {
            @Override
            public void run() {
                checkAndSpawnBoss();
            }
        }.runTaskTimer(plugin, 20L * 60L, 20L * 60L); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }
    
    private void checkAndSpawnBoss() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        if (System.currentTimeMillis() < nextSpawnTime) {
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —É–∂–µ –±–æ—Å—Å
        if (UniqueBossManager.isBossActive()) {
            // –ü–µ—Ä–µ–Ω–µ—Å–µ–º —Å–ø–∞–≤–Ω –Ω–∞ –ø–æ–∑–∂–µ
            scheduleNextEvent();
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
        if (!isCorrectTimeOfDay()) {
            plugin.getLogger().info("‚è∞ –û—Ç–ª–æ–∂–µ–Ω —Å–ø–∞–≤–Ω –±–æ—Å—Å–∞ - –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫");
            scheduleNextEvent();
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
        int onlinePlayers = Bukkit.getOnlinePlayers().size();
        if (onlinePlayers < config.getMinPlayersOnline()) {
            plugin.getLogger().info("üë• –û—Ç–ª–æ–∂–µ–Ω —Å–ø–∞–≤–Ω –±–æ—Å—Å–∞ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω (" + 
                onlinePlayers + "/" + config.getMinPlayersOnline() + ")");
            scheduleNextEvent();
            return;
        }
        
        // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –ª–æ–∫–∞—Ü–∏—é
        Location spawnLoc = findSuitableSpawnLocation();
        if (spawnLoc == null) {
            plugin.getLogger().warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Å–ø–∞–≤–Ω–∞ –±–æ—Å—Å–∞");
            scheduleNextEvent();
            return;
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–∞–≤–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ
        isForcedSpawn = false;
        
        // –°–ø–∞–≤–Ω–∏–º –±–æ—Å—Å–∞
        spawnEventBoss(spawnLoc);
    }
    
    private boolean isCorrectTimeOfDay() {
        LocalTime now = LocalTime.now();
        int currentHour = now.getHour();
        
        int startHour = config.getAllowedHourStart();
        int endHour = config.getAllowedHourEnd();
        
        return currentHour >= startHour && currentHour <= endHour;
    }
    
    private Location findSuitableSpawnLocation() {
        List<String> allowedWorlds = config.getAllowedWorlds();
        if (allowedWorlds.isEmpty()) {
            plugin.getLogger().warning("‚ùå –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –º–∏—Ä–æ–≤ –ø—É—Å—Ç!");
            return null;
        }
        
        plugin.getLogger().info("üîç –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–ø–∞–≤–Ω–∞ –±–æ—Å—Å–∞...");
        
        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–∏—Ä—ã
        for (String worldName : allowedWorlds) {
            World world = Bukkit.getWorld(worldName);
            if (world == null) {
                plugin.getLogger().warning("‚ùå –ú–∏—Ä " + worldName + " –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                continue;
            }
            
            plugin.getLogger().info("üåç –ò—â–µ–º –º–µ—Å—Ç–æ –≤ –º–∏—Ä–µ: " + worldName);
            
            // –î–µ–ª–∞–µ–º –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ
            for (int attempts = 0; attempts < 100; attempts++) {
                Location loc = findRandomLocationInWorld(world);
                if (loc != null) {
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞–Ω–∫
                    Chunk chunk = loc.getChunk();
                    if (!chunk.isLoaded()) {
                        chunk.load(true);
                        plugin.getLogger().info("üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω —á–∞–Ω–∫: " + chunk.getX() + ", " + chunk.getZ());
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–∞
                    if (isLocationSuitable(loc)) {
                        plugin.getLogger().info("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ: " + 
                            loc.getBlockX() + ", " + loc.getBlockY() + ", " + loc.getBlockZ());
                        return loc;
                    }
                }
                
                // –ö–∞–∂–¥—ã–µ 20 –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if (attempts % 20 == 0 && attempts > 0) {
                    plugin.getLogger().info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ " + attempts + "/100 –≤ –º–∏—Ä–µ " + worldName);
                }
            }
            
            plugin.getLogger().warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –≤ –º–∏—Ä–µ " + worldName + " –∑–∞ 100 –ø–æ–ø—ã—Ç–æ–∫");
        }
        
        plugin.getLogger().warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ª–æ–∫–∞—Ü–∏—é –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º!");
        plugin.getLogger().info("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é - –ø–æ–∏—Å–∫ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–∞–º–∏...");
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –∏—â–µ–º –º–µ—Å—Ç–æ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–∞–º–∏
        for (Player player : Bukkit.getOnlinePlayers()) {
            World world = player.getWorld();
            String worldName = world.getName();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —ç—Ç–æ—Ç –º–∏—Ä
            if (!config.getAllowedWorlds().contains(worldName)) continue;
            
            plugin.getLogger().info("üéØ –ò—â–µ–º –º–µ—Å—Ç–æ —Ä—è–¥–æ–º —Å –∏–≥—Ä–æ–∫–æ–º " + player.getName() + " –≤ –º–∏—Ä–µ " + worldName);
            
            Location playerLoc = player.getLocation();
            int minDistance = config.getMinDistanceFromPlayers();
            int maxDistance = config.getMaxDistanceFromPlayers();
            
            for (int attempts = 0; attempts < 50; attempts++) {
                // –ò—â–µ–º –º–µ—Å—Ç–æ –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                double angle = random.nextDouble() * 2 * Math.PI;
                double distance = minDistance + random.nextDouble() * (maxDistance - minDistance);
                
                double x = playerLoc.getX() + Math.cos(angle) * distance;
                double z = playerLoc.getZ() + Math.sin(angle) * distance;
                
                // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤—ã—Å–æ—Ç—É
                for (int y = config.getMaxSpawnY(); y >= config.getMinSpawnY(); y--) {
                    Location testLoc = new Location(world, x, y, z);
                    
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞–Ω–∫
                    Chunk chunk = testLoc.getChunk();
                    if (!chunk.isLoaded()) {
                        chunk.load(true);
                    }
                    
                    if (isSafeSpawnLocation(testLoc) && isLocationSuitable(testLoc)) {
                        plugin.getLogger().info("‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º: " + 
                            testLoc.getBlockX() + ", " + testLoc.getBlockY() + ", " + testLoc.getBlockZ());
                        return testLoc.add(0.5, 0, 0.5);
                    }
                }
            }
        }
        
        plugin.getLogger().severe("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ª–æ–∫–∞—Ü–∏—é –¥–∞–∂–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º!");
        return null;
    }
    
    private Location findRandomLocationInWorld(World world) {
        int searchRadius = config.getSearchRadius();
        int minY = config.getMinSpawnY();
        int maxY = config.getMaxSpawnY();
        
        // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
        if (searchRadius > 1000) {
            searchRadius = 1000; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1000 –±–ª–æ–∫–æ–≤
        }
        
        // –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–µ–Ω—å—à–µ–º —Ä–∞–¥–∏—É—Å–µ –≤–æ–∫—Ä—É–≥ —Å–ø–∞–≤–Ω–∞ –º–∏—Ä–∞
        Location worldSpawn = world.getSpawnLocation();
        int x = worldSpawn.getBlockX() + random.nextInt(searchRadius * 2) - searchRadius;
        int z = worldSpawn.getBlockZ() + random.nextInt(searchRadius * 2) - searchRadius;
        
        // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
        for (int y = maxY; y >= minY; y--) { // –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä—Ö—É
            Location loc = new Location(world, x + 0.5, y, z + 0.5);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —á–∞–Ω–∫ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            Chunk chunk = loc.getChunk();
            if (!chunk.isLoaded()) {
                chunk.load(true);
            }
            
            if (isSafeSpawnLocation(loc)) {
                return loc;
            }
        }
        
        return null;
    }
    
    private boolean isLocationSuitable(Location loc) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–æ–≤
        int minDistance = config.getMinDistanceFromPlayers();
        int maxDistance = config.getMaxDistanceFromPlayers();
        
        boolean tooCloseToPlayer = false;
        boolean hasPlayersInWorld = false;
        
        for (Player player : Bukkit.getOnlinePlayers()) {
            if (!player.getWorld().equals(loc.getWorld())) continue;
            
            hasPlayersInWorld = true;
            double distance = player.getLocation().distance(loc);
            
            if (distance < minDistance) {
                tooCloseToPlayer = true;
                break; // –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –∏–≥—Ä–æ–∫—É
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –º–∏—Ä–µ, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–ø–∞–≤–Ω
        if (!hasPlayersInWorld) {
            plugin.getLogger().info("üåç –†–∞–∑—Ä–µ—à–µ–Ω —Å–ø–∞–≤–Ω –≤ –º–∏—Ä–µ –±–µ–∑ –∏–≥—Ä–æ–∫–æ–≤");
            return true;
        }
        
        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –∏–≥—Ä–æ–∫—É, –∑–∞–ø—Ä–µ—â–∞–µ–º
        if (tooCloseToPlayer) {
            return false;
        }
        
        // –ò–Ω–∞—á–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º (—É–±–∏—Ä–∞–µ–º —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ —É—Å–ª–æ–≤–∏—è)
        return true;
    }
    
    private boolean isSafeSpawnLocation(Location loc) {
        try {
            Location groundLoc = loc.clone().subtract(0, 1, 0);
            Location feetLoc = loc.clone();
            Location headLoc = loc.clone().add(0, 1, 0);
            Location aboveLoc = loc.clone().add(0, 2, 0);
            
            Material ground = groundLoc.getBlock().getType();
            Material feet = feetLoc.getBlock().getType();
            Material head = headLoc.getBlock().getType();
            Material above = aboveLoc.getBlock().getType();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–≤–µ—Ä–¥–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
            boolean hasGround = ground.isSolid() && 
                               ground != Material.LAVA && 
                               ground != Material.MAGMA_BLOCK &&
                               ground != Material.CACTUS;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –±–æ—Å—Å–∞
            boolean hasSpace = (feet == Material.AIR || feet == Material.CAVE_AIR) && 
                              (head == Material.AIR || head == Material.CAVE_AIR) && 
                              (above == Material.AIR || above == Material.CAVE_AIR);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –≤ –ª–∞–≤–µ/–≤–æ–¥–µ
            boolean notInDanger = feet != Material.LAVA && 
                                 feet != Material.WATER &&
                                 head != Material.LAVA && 
                                 head != Material.WATER;
            
            boolean isSafe = hasGround && hasSpace && notInDanger;
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É (–Ω–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ –≤ –≤–æ–∑–¥—É—Ö–µ)
            if (isSafe) {
                // –ò—â–µ–º –∑–µ–º–ª—é –≤ —Ä–∞–¥–∏—É—Å–µ 10 –±–ª–æ–∫–æ–≤ –≤–Ω–∏–∑
                for (int y = 1; y <= 10; y++) {
                    Location checkLoc = groundLoc.clone().subtract(0, y, 0);
                    if (checkLoc.getBlock().getType().isSolid()) {
                        return true; // –ù–∞—à–ª–∏ –∑–µ–º–ª—é –Ω–µ–¥–∞–ª–µ–∫–æ
                    }
                }
                
                // –ï—Å–ª–∏ –∑–µ–º–ª—è —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ, –≤—Å–µ —Ä–∞–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º (–±–æ—Å—Å –º–æ–∂–µ—Ç –ª–µ—Ç–∞—Ç—å)
                return true;
            }
            
            return false;
            
        } catch (Exception e) {
            plugin.getLogger().warning("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞—Ü–∏–∏: " + e.getMessage());
            return false;
        }
    }
    
    private void spawnEventBoss(Location location) {
        bossSpawnLocation = location.clone();
        bossSpawnTime = System.currentTimeMillis();
        reminderCount = 0;
        removalWarningGiven = false;
        
        // –°–ø–∞–≤–Ω–∏–º –±–æ—Å—Å–∞
        UniqueBossManager.spawnBoss(location, config);
        
        // –û–±—ä—è–≤–ª—è–µ–º –æ —Å–ø–∞–≤–Ω–µ
        announceSpawn(location);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        startReminders();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        startInactivityMonitoring();
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–≤–µ–Ω—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–ø–∞–≤–Ω)
        if (!isForcedSpawn) {
            scheduleNextEvent();
        }
        
        String spawnType = isForcedSpawn ? "–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô" : "–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô";
        long timeoutMinutes = isForcedSpawn ? 60 : config.getInactiveTimeout();
        plugin.getLogger().info("üéØ " + spawnType + " –∏–≤–µ–Ω—Ç –±–æ—Å—Å–∞ –∑–∞–ø—É—â–µ–Ω –≤ –º–∏—Ä–µ " + location.getWorld().getName() + 
            " –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö " + location.getBlockX() + ", " + location.getBlockY() + ", " + location.getBlockZ() +
            " (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏: " + timeoutMinutes + " –º–∏–Ω—É—Ç)");
    }
    
    private void announceSpawn(Location location) {
        if (!config.isSpawnAnnouncementEnabled()) return;
        
        String world = location.getWorld().getName();
        String x = String.valueOf(location.getBlockX());
        String y = String.valueOf(location.getBlockY());
        String z = String.valueOf(location.getBlockZ());
        String timeoutMinutes = String.valueOf(config.getInactiveTimeout());
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        String spawnMsg = config.getEventMessage("spawn_global", "%world%", world);
        String coordsMsg = config.getEventMessage("spawn_coordinates", 
            new String[]{"%x%", "%y%", "%z%"}, 
            new String[]{x, y, z});
        String rewardsMsg = config.getEventMessage("spawn_rewards");
        String warningMsg = config.getEventMessage("spawn_warning", "%time%", timeoutMinutes);
        String instructionsMsg = config.getEventMessage("find_instructions");
        String compassMsg = config.getEventMessage("compass_tip");
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏
        String title = config.getEventMessage("spawn_global", "%world%", world);
        String subtitle = config.getEventMessage("spawn_coordinates", 
            new String[]{"%x%", "%y%", "%z%"}, 
            new String[]{x, y, z});
        
        for (Player player : Bukkit.getOnlinePlayers()) {
            // –ß–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            player.sendMessage("");
            player.sendMessage(spawnMsg);
            player.sendMessage(rewardsMsg);
            player.sendMessage(warningMsg);
            player.sendMessage("");
            player.sendMessage(instructionsMsg);
            player.sendMessage(compassMsg);
            player.sendMessage("");
            player.sendMessage(coordsMsg); // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            player.sendMessage("");
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (20 —Ç–∏–∫–æ–≤ –ø–æ—è–≤–ª–µ–Ω–∏–µ, 80 —Ç–∏–∫–æ–≤ –ø–æ–∫–∞–∑, 20 —Ç–∏–∫–æ–≤ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ = 6 —Å–µ–∫—É–Ω–¥)
            player.sendTitle(title, subtitle, 20, 80, 20);
            
            // –ó–≤—É–∫–∏
            player.playSound(player.getLocation(), Sound.ENTITY_ENDER_DRAGON_GROWL, 1.0f, 0.5f);
            player.playSound(player.getLocation(), Sound.UI_TOAST_CHALLENGE_COMPLETE, 1.0f, 1.0f);
            
            // –°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥
            showRewardsPreview(player);
        }
    }
    
    private void showRewardsPreview(Player player) {
        player.sendMessage(config.getEventMessage("rewards_preview"));
        player.sendMessage(config.getEventMessage("reward_fragments"));
        player.sendMessage(config.getEventMessage("reward_elytra"));
        player.sendMessage(config.getEventMessage("reward_sword"));
        player.sendMessage(config.getEventMessage("reward_staff"));
        player.sendMessage(config.getEventMessage("reward_boots"));
        player.sendMessage(config.getEventMessage("reward_crystal"));
        player.sendMessage(config.getEventMessage("reward_resources"));
    }
    
    private void startReminders() {
        if (!config.isPeriodicRemindersEnabled()) return;
        
        if (reminderTask != null) {
            reminderTask.cancel();
        }
        
        reminderTask = new BukkitRunnable() {
            @Override
            public void run() {
                if (!UniqueBossManager.isBossActive() || reminderCount >= config.getMaxReminders()) {
                    this.cancel();
                    return;
                }
                
                sendReminder();
                reminderCount++;
            }
        }.runTaskTimer(plugin, config.getReminderInterval() * 20L, config.getReminderInterval() * 20L);
    }
    
    private void sendReminder() {
        if (bossSpawnLocation == null) return;
        
        String world = bossSpawnLocation.getWorld().getName();
        String x = String.valueOf(bossSpawnLocation.getBlockX());
        String y = String.valueOf(bossSpawnLocation.getBlockY());
        String z = String.valueOf(bossSpawnLocation.getBlockZ());
        
        long timeLeft = getRemainingTime();
        String timeString = formatTime(timeLeft);
        
        String title = config.getEventMessage("reminder_title");
        String subtitle = config.getEventMessage("reminder_subtitle");
        String chatMsg = config.getEventMessage("reminder_chat", "%world%", world);
        String locationMsg = config.getEventMessage("reminder_location", 
            new String[]{"%x%", "%y%", "%z%"}, 
            new String[]{x, y, z});
        String timeMsg = config.getEventMessage("reminder_time_left", "%time%", timeString);
        
        for (Player player : Bukkit.getOnlinePlayers()) {
            player.sendMessage("");
            player.sendMessage(chatMsg);
            player.sendMessage(locationMsg);
            player.sendMessage(timeMsg);
            player.sendMessage("");
            
            player.sendTitle(title, subtitle, 10, 40, 10);
            player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_PLING, 1.0f, 0.8f);
        }
    }
    
    private void startInactivityMonitoring() {
        if (inactivityTask != null) {
            inactivityTask.cancel();
        }
        
        inactivityTask = new BukkitRunnable() {
            @Override
            public void run() {
                if (!UniqueBossManager.isBossActive()) {
                    this.cancel();
                    return;
                }
                
                checkBossActivity();
            }
        }.runTaskTimer(plugin, config.getCheckInterval() * 20L, config.getCheckInterval() * 20L);
    }
    
    private void checkBossActivity() {
        if (UniqueBossManager.getCurrentBoss() == null) {
            plugin.getLogger().info("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –±–æ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }
        
        Entity bossEntity = UniqueBossManager.getCurrentBoss().getEntity();
        if (bossEntity == null) {
            plugin.getLogger().warning("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: —Å—É—â–Ω–æ—Å—Ç—å –±–æ—Å—Å–∞ null");
            removeBossForInactivity();
            return;
        }
        
        Location bossLoc = bossEntity.getLocation();
        int checkRadius = config.getCheckRadius();
        
        boolean hasNearbyPlayers = false;
        int playerCount = 0;
        for (Player player : Bukkit.getOnlinePlayers()) {
            if (player.getWorld().equals(bossLoc.getWorld()) && 
                player.getLocation().distance(bossLoc) <= checkRadius) {
                hasNearbyPlayers = true;
                playerCount++;
            }
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏ —Ä—è–¥–æ–º - –°–ë–†–ê–°–´–í–ê–ï–ú –¢–ê–ô–ú–ï–†
        if (hasNearbyPlayers) {
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç
            bossSpawnTime = System.currentTimeMillis();
            
            if (removalWarningGiven) {
                plugin.getLogger().info("‚úÖ –ò–≥—Ä–æ–∫–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –±–æ—Å—Å—É (" + playerCount + " –∏–≥—Ä–æ–∫–æ–≤) - –°–ë–†–ê–°–´–í–ê–ï–ú –¢–ê–ô–ú–ï–†");
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ
                for (Player player : Bukkit.getOnlinePlayers()) {
                    player.sendMessage(ChatColor.GREEN + "‚úÖ –ò–≥—Ä–æ–∫–∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å! –¢–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–±—Ä–æ—à–µ–Ω.");
                }
            } else {
                plugin.getLogger().info("üîÑ –ò–≥—Ä–æ–∫–∏ —Ä—è–¥–æ–º —Å –±–æ—Å—Å–æ–º (" + playerCount + " –∏–≥—Ä–æ–∫–æ–≤) - —Ç–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω");
            }
            
            removalWarningGiven = false;
            return; // –ù–µ —É–¥–∞–ª—è–µ–º –±–æ—Å—Å–∞
        }
        
        long timeLeft = getRemainingTime();
        plugin.getLogger().info("‚è∞ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: –æ—Å—Ç–∞–ª–æ—Å—å " + (timeLeft / 1000 / 60) + " –º–∏–Ω—É—Ç –¥–æ —É–¥–∞–ª–µ–Ω–∏—è");
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        if (!removalWarningGiven && timeLeft <= config.getWarningTime() * 1000L) {
            sendRemovalWarning(timeLeft);
            removalWarningGiven = true;
        }
        
        // –£–¥–∞–ª—è–µ–º –±–æ—Å—Å–∞ –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
        if (timeLeft <= 0) {
            plugin.getLogger().info("‚è∞ –í—Ä–µ–º—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Å—Å–∞ –∏—Å—Ç–µ–∫–ª–æ - —É–¥–∞–ª—è–µ–º");
            removeBossForInactivity();
        }
    }
    
    private void sendRemovalWarning(long timeLeft) {
        if (!config.isRemovalWarningEnabled()) return;
        
        String timeString = formatTime(timeLeft);
        String title = config.getEventMessage("removal_warning");
        String subtitle = config.getEventMessage("removal_warning_text", "%time%", timeString);
        
        for (Player player : Bukkit.getOnlinePlayers()) {
            player.sendTitle(title, subtitle, 20, 80, 20);
            player.sendMessage("");
            player.sendMessage(title);
            player.sendMessage(subtitle);
            player.sendMessage("");
            
            player.playSound(player.getLocation(), Sound.BLOCK_NOTE_BLOCK_BASS, 1.0f, 0.5f);
        }
    }
    
    private void removeBossForInactivity() {
        if (UniqueBossManager.getCurrentBoss() != null) {
            plugin.getLogger().info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Å—Å–∞ –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...");
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è
            UniqueBossManager.getCurrentBoss().forceDestroy();
            
            // –û—á–∏—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Å—Å–∞
            UniqueBossManager.setBossDefeated();
            plugin.getLogger().info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Å—Å–∞ –æ—á–∏—â–µ–Ω");
            
            // –û–±—ä—è–≤–ª—è–µ–º –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
            String finalMsg = config.getEventMessage("removal_final");
            String reasonMsg = config.getEventMessage("removal_reason");
            
            for (Player player : Bukkit.getOnlinePlayers()) {
                player.sendMessage("");
                player.sendMessage(finalMsg);
                player.sendMessage(reasonMsg);
                player.sendMessage("");
                
                player.playSound(player.getLocation(), Sound.ENTITY_PHANTOM_DEATH, 1.0f, 0.5f);
            }
            
            plugin.getLogger().info("üëª –ë–æ—Å—Å —É–¥–∞–ª–µ–Ω –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å");
        } else {
            plugin.getLogger().info("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Å—Å–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏
        isForcedSpawn = false;
        removalWarningGiven = false;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        stopAllTasks();
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–≤–µ–Ω—Ç
        scheduleNextEvent();
    }
    
    private long getRemainingTime() {
        if (bossSpawnTime == 0) return 0;
        
        long elapsed = System.currentTimeMillis() - bossSpawnTime;
        
        // –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–∞–≤–Ω–∞ –¥–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
        long timeoutMinutes = isForcedSpawn ? 60 : config.getInactiveTimeout(); // 60 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ
        long timeout = timeoutMinutes * 60 * 1000L;
        
        return Math.max(0, timeout - elapsed);
    }
    
    private String formatTime(long milliseconds) {
        long minutes = milliseconds / (60 * 1000);
        return String.valueOf(minutes);
    }
    
    public long getTimeUntilNextSpawn() {
        if (nextSpawnTime == 0) return 0;
        return Math.max(0, (nextSpawnTime - System.currentTimeMillis()) / (60 * 1000));
    }
    
    public String getBossStatus() {
        if (!UniqueBossManager.isBossActive()) {
            long minutesLeft = getTimeUntilNextSpawn();
            if (minutesLeft <= 0) {
                return "–ë–æ—Å—Å –≥–æ—Ç–æ–≤ –∫ —Å–ø–∞–≤–Ω—É! –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É—Å–ª–æ–≤–∏–π...";
            }
            return "–°–ª–µ–¥—É—é—â–∏–π –∏–≤–µ–Ω—Ç —á–µ—Ä–µ–∑ " + minutesLeft + " –º–∏–Ω—É—Ç";
        }
        
        long timeLeft = getRemainingTime();
        String timeString = formatTime(timeLeft);
        String spawnType = isForcedSpawn ? " (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π)" : "";
        return "–ë–æ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω" + spawnType + ". –í—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è: " + timeString + " –º–∏–Ω—É—Ç";
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏–≤–µ–Ω—Ç–∞ –±–æ—Å—Å–∞
    public boolean forceSpawnBoss() {
        if (UniqueBossManager.isBossActive()) {
            plugin.getLogger().warning("‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–∞–≤–Ω–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –±–æ—Å—Å–µ!");
            return false;
        }
        
        plugin.getLogger().info("üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ü–ê–í–ù: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –¥–ª—è –±–æ—Å—Å–∞...");
        
        // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –ª–æ–∫–∞—Ü–∏—é
        Location spawnLoc = findSuitableSpawnLocation();
        if (spawnLoc == null) {
            plugin.getLogger().warning("‚ùå –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ü–ê–í–ù: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ª–æ–∫–∞—Ü–∏—é!");
            return false;
        }
        
        plugin.getLogger().info("‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ü–ê–í–ù: –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç–æ - " + 
            spawnLoc.getWorld().getName() + " [" + 
            spawnLoc.getBlockX() + ", " + spawnLoc.getBlockY() + ", " + spawnLoc.getBlockZ() + "]");
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–∞–≤–Ω–∞
        isForcedSpawn = true;
        
        // –°–ø–∞–≤–Ω–∏–º –±–æ—Å—Å–∞ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º (—ç—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç bossSpawnTime)
        spawnEventBoss(spawnLoc);
        
        plugin.getLogger().info("üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –°–ü–ê–í–ù: –ë–æ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞—Å–ø–∞–≤–Ω–µ–Ω —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ (60 –º–∏–Ω—É—Ç)!");
        return true;
    }
    
    public void stopAllTasks() {
        if (eventSchedulerTask != null) {
            eventSchedulerTask.cancel();
        }
        if (reminderTask != null) {
            reminderTask.cancel();
        }
        if (inactivityTask != null) {
            inactivityTask.cancel();
        }
    }
    
    public void shutdown() {
        stopAllTasks();
        plugin.getLogger().info("üõë –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–≤–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    }
} 