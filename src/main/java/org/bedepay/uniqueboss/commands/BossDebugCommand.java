package org.bedepay.uniqueboss.commands;

import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.entity.Wither;
import org.bedepay.uniqueboss.boss.UniqueBossManager;
import org.bedepay.uniqueboss.boss.UniqueBossEntity;
import org.bedepay.uniqueboss.config.ConfigManager;

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 * –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Å—Å–æ–º
 */
public class BossDebugCommand implements CommandExecutor {

    private final ConfigManager config;

    public BossDebugCommand(ConfigManager config) {
        this.config = config;
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        if (!sender.hasPermission("uniqueboss.debug")) {
            sender.sendMessage(ChatColor.RED + "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!");
            return true;
        }

        if (args.length == 0) {
            showHelp(sender);
            return true;
        }

        String subCommand = args[0].toLowerCase();

        switch (subCommand) {
            case "status":
                showBossStatus(sender);
                break;
                
            case "teleport":
                if (sender instanceof Player) {
                    teleportToBoss((Player) sender);
                } else {
                    sender.sendMessage(ChatColor.RED + "–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!");
                }
                break;
                
            case "heal":
                healBoss(sender);
                break;
                
            case "difficulty":
                handleDifficultyCommand(sender, args);
                break;
                
            default:
                showHelp(sender);
                break;
        }

        return true;
    }

    private void showHelp(CommandSender sender) {
        sender.sendMessage(ChatColor.GOLD + "=== –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Å—Å–æ–º ===");
        sender.sendMessage(ChatColor.YELLOW + "/bossdebug status" + ChatColor.GRAY + " - —Å—Ç–∞—Ç—É—Å –±–æ—Å—Å–∞");
        sender.sendMessage(ChatColor.YELLOW + "/bossdebug teleport" + ChatColor.GRAY + " - —Ç–µ–ª–µ–ø–æ—Ä—Ç –∫ –±–æ—Å—Å—É");
        sender.sendMessage(ChatColor.YELLOW + "/bossdebug heal" + ChatColor.GRAY + " - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –±–æ—Å—Å–∞");
        sender.sendMessage(ChatColor.YELLOW + "/bossdebug difficulty <1-5>" + ChatColor.GRAY + " - –∏–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å");
    }

    private void showBossStatus(CommandSender sender) {
        if (!UniqueBossManager.isBossActive()) {
            sender.sendMessage(ChatColor.RED + "‚ùå –ë–æ—Å—Å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω");
            return;
        }

        UniqueBossEntity boss = UniqueBossManager.getCurrentBoss();
        Entity entity = boss.getEntity();
        
        if (entity == null || !entity.isValid()) {
            sender.sendMessage(ChatColor.RED + "‚ùå –ë–æ—Å—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ–≥–æ —Å—É—â–Ω–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        sender.sendMessage(ChatColor.GOLD + "=== –°—Ç–∞—Ç—É—Å –¢–µ–º–Ω–æ–≥–æ –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è ===");
        sender.sendMessage(ChatColor.GREEN + "‚úÖ –ë–æ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω –∏ –≤–∞–ª–∏–¥–µ–Ω");
        sender.sendMessage(ChatColor.YELLOW + "üìç –§–∞–∑–∞: " + ChatColor.WHITE + boss.getCurrentPhase() + "/3");
        
        if (entity instanceof Wither) {
            Wither wither = (Wither) entity;
            double health = wither.getHealth();
            double maxHealth = wither.getMaxHealth();
            double healthPercent = (health / maxHealth) * 100;
            
            sender.sendMessage(ChatColor.YELLOW + "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: " + ChatColor.WHITE + 
                String.format("%.1f/%.1f (%.1f%%)", health, maxHealth, healthPercent));
        }
        
        Location loc = entity.getLocation();
        sender.sendMessage(ChatColor.YELLOW + "üåç –ü–æ–∑–∏—Ü–∏—è: " + ChatColor.WHITE + 
            String.format("%s: %.1f, %.1f, %.1f", 
                loc.getWorld().getName(), loc.getX(), loc.getY(), loc.getZ()));
        
        sender.sendMessage(ChatColor.YELLOW + "‚öîÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: " + ChatColor.WHITE + 
            config.getDifficultyLevel() + " (" + config.getDifficultyName() + ")");
    }

    private void teleportToBoss(Player player) {
        if (!UniqueBossManager.isBossActive()) {
            player.sendMessage(ChatColor.RED + "‚ùå –ë–æ—Å—Å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω");
            return;
        }

        UniqueBossEntity boss = UniqueBossManager.getCurrentBoss();
        Entity entity = boss.getEntity();
        
        if (entity == null || !entity.isValid()) {
            player.sendMessage(ChatColor.RED + "‚ùå –°—É—â–Ω–æ—Å—Ç—å –±–æ—Å—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏");
            return;
        }

        Location bossLoc = entity.getLocation();
        Location safeLoc = bossLoc.clone().add(0, 5, 0); // –¢–µ–ª–µ–ø–æ—Ä—Ç –Ω–∞ 5 –±–ª–æ–∫–æ–≤ –≤—ã—à–µ –±–æ—Å—Å–∞
        
        player.teleport(safeLoc);
        player.sendMessage(ChatColor.GREEN + "‚úÖ –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ –¢–µ–º–Ω–æ–º—É –ü–æ–≤–µ–ª–∏—Ç–µ–ª—é –≤—ã–ø–æ–ª–Ω–µ–Ω!");
        player.sendMessage(ChatColor.YELLOW + "üìç –§–∞–∑–∞ " + boss.getCurrentPhase() + "/3");
    }

    private void healBoss(CommandSender sender) {
        if (!UniqueBossManager.isBossActive()) {
            sender.sendMessage(ChatColor.RED + "‚ùå –ë–æ—Å—Å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω");
            return;
        }

        UniqueBossEntity boss = UniqueBossManager.getCurrentBoss();
        Entity entity = boss.getEntity();
        
        if (entity == null || !entity.isValid() || !(entity instanceof Wither)) {
            sender.sendMessage(ChatColor.RED + "‚ùå –°—É—â–Ω–æ—Å—Ç—å –±–æ—Å—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        Wither wither = (Wither) entity;
        wither.setHealth(wither.getMaxHealth());
        
        sender.sendMessage(ChatColor.GREEN + "‚úÖ –ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Å—Å–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!");
        sender.sendMessage(ChatColor.YELLOW + "‚ù§Ô∏è –ù–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ: " + wither.getHealth() + "/" + wither.getMaxHealth());
    }

    private void handleDifficultyCommand(CommandSender sender, String[] args) {
        if (args.length < 2) {
            sender.sendMessage(ChatColor.YELLOW + "‚öîÔ∏è –¢–µ–∫—É—â–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: " + 
                ChatColor.WHITE + config.getDifficultyLevel() + " (" + config.getDifficultyName() + ")");
            sender.sendMessage(ChatColor.GRAY + "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bossdebug difficulty <1-5>");
            sender.sendMessage(ChatColor.GRAY + "1=–õ–µ–≥–∫–∏–π, 2=–ü—Ä–æ—Å—Ç–æ–π, 3=–ù–æ—Ä–º–∞–ª—å–Ω—ã–π, 4=–°–ª–æ–∂–Ω—ã–π, 5=–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π");
            return;
        }

        try {
            int newLevel = Integer.parseInt(args[1]);
            
            if (newLevel < 1 || newLevel > 5) {
                sender.sendMessage(ChatColor.RED + "‚ùå –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5!");
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ (—Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è)
            sender.sendMessage(ChatColor.YELLOW + "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
            sender.sendMessage(ChatColor.GRAY + "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ config.yml: boss.difficulty_level: " + newLevel);
            sender.sendMessage(ChatColor.GRAY + "–ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: /uniqueboss reload");
            
        } catch (NumberFormatException e) {
            sender.sendMessage(ChatColor.RED + "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: " + args[1]);
        }
    }
} 